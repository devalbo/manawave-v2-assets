// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "manawave-types.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message PlayerPb
 */
export interface PlayerPb {
    /**
     * @generated from protobuf field: string playerId = 1;
     */
    playerId: string;
    /**
     * @generated from protobuf field: PlayerSideId playerSide = 2;
     */
    playerSide: PlayerSideId;
    /**
     * @generated from protobuf field: PlayerDefaultStrategyPb defaultStrategy = 3;
     */
    defaultStrategy: PlayerDefaultStrategyPb;
}
/**
 * @generated from protobuf message PlayerRegistration
 */
export interface PlayerRegistration {
    /**
     * SeasonPbId seasonId = 1;
     *
     * @generated from protobuf field: PlayerPb optPlayer = 1;
     */
    optPlayer?: PlayerPb;
    /**
     * @generated from protobuf field: PlayerPb osbPlayer = 2;
     */
    osbPlayer?: PlayerPb;
}
/**
 * @generated from protobuf message GameHostPb
 */
export interface GameHostPb {
    /**
     * @generated from protobuf field: string gameHostId = 1;
     */
    gameHostId: string;
}
/**
 * @generated from protobuf message SeasonPbId
 */
export interface SeasonPbId {
    /**
     * @generated from protobuf field: SeasonType seasonType = 1;
     */
    seasonType: SeasonType;
    /**
     * @generated from protobuf field: SeasonDefinition seasonDefinition = 2;
     */
    seasonDefinition: SeasonDefinition;
}
/**
 * @generated from protobuf message TotemPbId
 */
export interface TotemPbId {
    /**
     * @generated from protobuf field: SeasonPbId seasonId = 1;
     */
    seasonId?: SeasonPbId;
    /**
     * @generated from protobuf field: uint32 seasonTotemId = 2;
     */
    seasonTotemId: number;
}
/**
 * @generated from protobuf message MonumentCardPbId
 */
export interface MonumentCardPbId {
    /**
     * @generated from protobuf field: SeasonPbId seasonId = 1;
     */
    seasonId?: SeasonPbId;
    /**
     * @generated from protobuf field: uint32 seasonMonumentCardId = 2;
     */
    seasonMonumentCardId: number;
}
/**
 * @generated from protobuf message GameBoardMonuments
 */
export interface GameBoardMonuments {
    /**
     * @generated from protobuf field: MonumentCardPbId leyPoint1MonumentId = 1;
     */
    leyPoint1MonumentId?: MonumentCardPbId;
    /**
     * @generated from protobuf field: MonumentCardPbId leyPoint2MonumentId = 2;
     */
    leyPoint2MonumentId?: MonumentCardPbId;
    /**
     * @generated from protobuf field: MonumentCardPbId leyPoint3MonumentId = 3;
     */
    leyPoint3MonumentId?: MonumentCardPbId;
}
/**
 * @generated from protobuf message ClanCardDefPbId
 */
export interface ClanCardDefPbId {
    /**
     * @generated from protobuf field: SeasonPbId seasonId = 1;
     */
    seasonId?: SeasonPbId;
    /**
     * @generated from protobuf field: uint32 seasonClanCardId = 2;
     */
    seasonClanCardId: number;
}
/**
 * @generated from protobuf message ClanCardInstancePbId
 */
export interface ClanCardInstancePbId {
    /**
     * @generated from protobuf field: ClanCardDefPbId clanCardDefId = 1;
     */
    clanCardDefId?: ClanCardDefPbId;
    /**
     * @generated from protobuf field: PlayerSideId playerSide = 2;
     */
    playerSide: PlayerSideId;
}
/**
 * @generated from protobuf message MonumentCardInPlayPbInstance
 */
export interface MonumentCardInPlayPbInstance {
    /**
     * @generated from protobuf field: MonumentCardPbId sourceCardId = 1;
     */
    sourceCardId?: MonumentCardPbId;
    /**
     * @generated from protobuf field: LeylineDistanceFromSource leylineDistance = 2;
     */
    leylineDistance: LeylineDistanceFromSource;
}
/**
 * @generated from protobuf message FamilyCardDefPbId
 */
export interface FamilyCardDefPbId {
    /**
     * @generated from protobuf field: SeasonPbId seasonId = 1;
     */
    seasonId?: SeasonPbId;
    /**
     * @generated from protobuf field: uint32 seasonFamilyCardId = 2;
     */
    seasonFamilyCardId: number;
}
/**
 * @generated from protobuf message FamilyCardInstancePbId
 */
export interface FamilyCardInstancePbId {
    /**
     * @generated from protobuf field: FamilyCardDefPbId familyCardDefId = 1;
     */
    familyCardDefId?: FamilyCardDefPbId;
    /**
     * @generated from protobuf field: PlayerSideId owningPlayerSide = 2;
     */
    owningPlayerSide: PlayerSideId;
}
/**
 * @generated from protobuf enum SeasonType
 */
export enum SeasonType {
    /**
     * @generated from protobuf enum value: SeasonType_NotSet = 0;
     */
    SeasonType_NotSet = 0,
    /**
     * @generated from protobuf enum value: SeasonType_Dev = 1;
     */
    SeasonType_Dev = 1,
    /**
     * @generated from protobuf enum value: SeasonType_Flavor = 2;
     */
    SeasonType_Flavor = 2,
    /**
     * @generated from protobuf enum value: SeasonType_Playtest = 10;
     */
    SeasonType_Playtest = 10,
    /**
     * @generated from protobuf enum value: SeasonType_Production = 100;
     */
    SeasonType_Production = 100
}
/**
 * @generated from protobuf enum SeasonDefinition
 */
export enum SeasonDefinition {
    /**
     * @generated from protobuf enum value: SeasonDef_NotSet = 0;
     */
    SeasonDef_NotSet = 0,
    /**
     * @generated from protobuf enum value: SeasonDef_Zero_1 = 1;
     */
    SeasonDef_Zero_1 = 1
}
/**
 * @generated from protobuf enum PlayerSideId
 */
export enum PlayerSideId {
    /**
     * @generated from protobuf enum value: PlayerSide_NotSet = 0;
     */
    PlayerSide_NotSet = 0,
    /**
     * @generated from protobuf enum value: PlayerSide_Opt = 1;
     */
    PlayerSide_Opt = 1,
    /**
     * @generated from protobuf enum value: PlayerSide_Osb = 2;
     */
    PlayerSide_Osb = 2
}
/**
 * @generated from protobuf enum PlayerSelectionDefault
 */
export enum PlayerSelectionDefault {
    /**
     * @generated from protobuf enum value: PlayerSelectionDefault_NotSet = 0;
     */
    PlayerSelectionDefault_NotSet = 0,
    /**
     * @generated from protobuf enum value: PlayerSelectionDefault_FirstChoice = 1;
     */
    PlayerSelectionDefault_FirstChoice = 1,
    /**
     * @generated from protobuf enum value: PlayerSelectionDefault_LastChoice = 2;
     */
    PlayerSelectionDefault_LastChoice = 2,
    /**
     * @generated from protobuf enum value: PlayerSelectionDefault_RandomChoice = 3;
     */
    PlayerSelectionDefault_RandomChoice = 3
}
/**
 * @generated from protobuf enum PlayerCardChoicePb
 */
export enum PlayerCardChoicePb {
    /**
     * @generated from protobuf enum value: PlayerCardChoice_NotSet = 0;
     */
    PlayerCardChoice_NotSet = 0,
    /**
     * @generated from protobuf enum value: PlayerCardChoice_FamilyA = 1;
     */
    PlayerCardChoice_FamilyA = 1,
    /**
     * @generated from protobuf enum value: PlayerCardChoice_FamilyB = 2;
     */
    PlayerCardChoice_FamilyB = 2,
    /**
     * @generated from protobuf enum value: PlayerCardChoice_FamilyC = 3;
     */
    PlayerCardChoice_FamilyC = 3,
    /**
     * @generated from protobuf enum value: PlayerCardChoice_NoFamilyPickChoice = 30;
     */
    PlayerCardChoice_NoFamilyPickChoice = 30
}
/**
 * @generated from protobuf enum LeylineDistanceFromSource
 */
export enum LeylineDistanceFromSource {
    /**
     * @generated from protobuf enum value: LeylineDistance_Source = 0;
     */
    LeylineDistance_Source = 0,
    /**
     * @generated from protobuf enum value: LeylineDistance_1 = 1;
     */
    LeylineDistance_1 = 1,
    /**
     * @generated from protobuf enum value: LeylineDistance_2 = 2;
     */
    LeylineDistance_2 = 2,
    /**
     * @generated from protobuf enum value: LeylineDistance_3 = 3;
     */
    LeylineDistance_3 = 3,
    /**
     * @generated from protobuf enum value: LeylineDistance_Sink = 255;
     */
    LeylineDistance_Sink = 255
}
/**
 * @generated from protobuf enum MwMarkerType
 */
export enum MwMarkerType {
    /**
     * @generated from protobuf enum value: MwMarkerType_NotSet = 0;
     */
    MwMarkerType_NotSet = 0,
    /**
     * @generated from protobuf enum value: MwMarkerType_PopulationIncreaseCounter = 1;
     */
    MwMarkerType_PopulationIncreaseCounter = 1,
    /**
     * @generated from protobuf enum value: MwMarkerType_PopulationSacrificeCounter = 2;
     */
    MwMarkerType_PopulationSacrificeCounter = 2,
    /**
     * @generated from protobuf enum value: MwMarkerType_AttackCounter = 3;
     */
    MwMarkerType_AttackCounter = 3,
    /**
     * @generated from protobuf enum value: MwMarkerType_ShieldCounter = 4;
     */
    MwMarkerType_ShieldCounter = 4,
    /**
     * @generated from protobuf enum value: MwMarkerType_ManaCounter = 5;
     */
    MwMarkerType_ManaCounter = 5,
    /**
     * @generated from protobuf enum value: MwMarkerType_ManalithClaimCounter = 6;
     */
    MwMarkerType_ManalithClaimCounter = 6,
    /**
     * @generated from protobuf enum value: MwMarkerType_PopulationSlaughterCounter = 7;
     */
    MwMarkerType_PopulationSlaughterCounter = 7,
    /**
     * @generated from protobuf enum value: MwMarkerType_PopulationToken = 100;
     */
    MwMarkerType_PopulationToken = 100,
    /**
     * @generated from protobuf enum value: MwMarkerType_ManalithToken = 101;
     */
    MwMarkerType_ManalithToken = 101,
    /**
     * @generated from protobuf enum value: MwMarkerType_SoulstainToken = 102;
     */
    MwMarkerType_SoulstainToken = 102,
    /**
     * @generated from protobuf enum value: MwMarkerType_ManawaveRoundToken = 103;
     */
    MwMarkerType_ManawaveRoundToken = 103
}
/**
 * @generated from protobuf enum PlayerDefaultStrategyPb
 */
export enum PlayerDefaultStrategyPb {
    /**
     * @generated from protobuf enum value: PlayerDefaultStrategyPb_NotSet = 0;
     */
    PlayerDefaultStrategyPb_NotSet = 0,
    /**
     * @generated from protobuf enum value: PlayerDefaultStrategyPb_First = 1;
     */
    PlayerDefaultStrategyPb_First = 1,
    /**
     * @generated from protobuf enum value: PlayerDefaultStrategyPb_Last = 2;
     */
    PlayerDefaultStrategyPb_Last = 2,
    /**
     * @generated from protobuf enum value: PlayerDefaultStrategyPb_Random = 3;
     */
    PlayerDefaultStrategyPb_Random = 3
}
/**
 * @generated from protobuf enum GamePhaseId
 */
export enum GamePhaseId {
    /**
     * @generated from protobuf enum value: GamePhase_NotSet = 0;
     */
    GamePhase_NotSet = 0,
    /**
     * @generated from protobuf enum value: GamePhase_InitialConditionsSet = 1;
     */
    GamePhase_InitialConditionsSet = 1,
    /**
     * @generated from protobuf enum value: GamePhaseInit_PlayerRegistrationComplete = 11;
     */
    GamePhaseInit_PlayerRegistrationComplete = 11,
    /**
     * @generated from protobuf enum value: GamePhaseInit_AllPlayersPickingTotemsAndMonumentVeto = 12;
     */
    GamePhaseInit_AllPlayersPickingTotemsAndMonumentVeto = 12,
    /**
     * @generated from protobuf enum value: GamePhaseInit_AllPlayersPlacingClans = 13;
     */
    GamePhaseInit_AllPlayersPlacingClans = 13,
    /**
     * @generated from protobuf enum value: GamePhase_PlayingMainGame = 20;
     */
    GamePhase_PlayingMainGame = 20,
    /**
     * @generated from protobuf enum value: GamePhase_Uninitialized = 99;
     */
    GamePhase_Uninitialized = 99,
    /**
     * @generated from protobuf enum value: GamePhase_GameOver = 100;
     */
    GamePhase_GameOver = 100
}
/**
 * @generated from protobuf enum GameOutcome
 */
export enum GameOutcome {
    /**
     * @generated from protobuf enum value: GameOutcome_NotSet = 0;
     */
    GameOutcome_NotSet = 0,
    /**
     * @generated from protobuf enum value: GameOutcome_InProgress = 1;
     */
    GameOutcome_InProgress = 1,
    /**
     * @generated from protobuf enum value: GameOutcome_OptPlayerWins = 2;
     */
    GameOutcome_OptPlayerWins = 2,
    /**
     * @generated from protobuf enum value: GameOutcome_OsbPlayerWins = 3;
     */
    GameOutcome_OsbPlayerWins = 3,
    /**
     * @generated from protobuf enum value: GameOutcome_Draw = 4;
     */
    GameOutcome_Draw = 4,
    /**
     * @generated from protobuf enum value: GameOutcome_BothPlayersWin = 5;
     */
    GameOutcome_BothPlayersWin = 5,
    /**
     * @generated from protobuf enum value: GameOutcome_BothPlayersLose = 6;
     */
    GameOutcome_BothPlayersLose = 6
}
/**
 * @generated from protobuf enum RoundProgress
 */
export enum RoundProgress {
    /**
     * @generated from protobuf enum value: RoundProgress_NotSet = 0;
     */
    RoundProgress_NotSet = 0,
    /**
     * @generated from protobuf enum value: RoundProgress_InProgress_DealFamilies = 20;
     */
    RoundProgress_InProgress_DealFamilies = 20,
    /**
     * @generated from protobuf enum value: RoundProgress_InProgress_PickFamilies = 21;
     */
    RoundProgress_InProgress_PickFamilies = 21,
    /**
     * @generated from protobuf enum value: RoundProgress_InProgress_PlaceFamiliesAndPickModes = 22;
     */
    RoundProgress_InProgress_PlaceFamiliesAndPickModes = 22,
    /**
     * @generated from protobuf enum value: RoundProgress_InProgress_ChannelClanManaflows = 23;
     */
    RoundProgress_InProgress_ChannelClanManaflows = 23,
    /**
     * @generated from protobuf enum value: RoundProgress_InProgress_PurchaseAndPlaceMarkers = 24;
     */
    RoundProgress_InProgress_PurchaseAndPlaceMarkers = 24,
    /**
     * @generated from protobuf enum value: RoundProgress_InProgress_WageClanConflicts = 25;
     */
    RoundProgress_InProgress_WageClanConflicts = 25,
    /**
     * @generated from protobuf enum value: RoundProgress_InProgress_PowerMonuments = 26;
     */
    RoundProgress_InProgress_PowerMonuments = 26,
    /**
     * @generated from protobuf enum value: RoundProgress_InProgress_ConsolidateMarkers = 27;
     */
    RoundProgress_InProgress_ConsolidateMarkers = 27,
    /**
     * @generated from protobuf enum value: RoundProgress_GameOver = 50;
     */
    RoundProgress_GameOver = 50,
    /**
     * go back to RoundProgress_InProgress_DealFamilies
     *
     * @generated from protobuf enum value: RoundProgress_Complete = 255;
     */
    RoundProgress_Complete = 255
}
// @generated message type with reflection information, may provide speed optimized methods
class PlayerPb$Type extends MessageType<PlayerPb> {
    constructor() {
        super("PlayerPb", [
            { no: 1, name: "playerId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "playerSide", kind: "enum", T: () => ["PlayerSideId", PlayerSideId] },
            { no: 3, name: "defaultStrategy", kind: "enum", T: () => ["PlayerDefaultStrategyPb", PlayerDefaultStrategyPb] }
        ]);
    }
    create(value?: PartialMessage<PlayerPb>): PlayerPb {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.playerId = "";
        message.playerSide = 0;
        message.defaultStrategy = 0;
        if (value !== undefined)
            reflectionMergePartial<PlayerPb>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerPb): PlayerPb {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string playerId */ 1:
                    message.playerId = reader.string();
                    break;
                case /* PlayerSideId playerSide */ 2:
                    message.playerSide = reader.int32();
                    break;
                case /* PlayerDefaultStrategyPb defaultStrategy */ 3:
                    message.defaultStrategy = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerPb, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string playerId = 1; */
        if (message.playerId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.playerId);
        /* PlayerSideId playerSide = 2; */
        if (message.playerSide !== 0)
            writer.tag(2, WireType.Varint).int32(message.playerSide);
        /* PlayerDefaultStrategyPb defaultStrategy = 3; */
        if (message.defaultStrategy !== 0)
            writer.tag(3, WireType.Varint).int32(message.defaultStrategy);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PlayerPb
 */
export const PlayerPb = new PlayerPb$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerRegistration$Type extends MessageType<PlayerRegistration> {
    constructor() {
        super("PlayerRegistration", [
            { no: 1, name: "optPlayer", kind: "message", T: () => PlayerPb },
            { no: 2, name: "osbPlayer", kind: "message", T: () => PlayerPb }
        ]);
    }
    create(value?: PartialMessage<PlayerRegistration>): PlayerRegistration {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<PlayerRegistration>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerRegistration): PlayerRegistration {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* PlayerPb optPlayer */ 1:
                    message.optPlayer = PlayerPb.internalBinaryRead(reader, reader.uint32(), options, message.optPlayer);
                    break;
                case /* PlayerPb osbPlayer */ 2:
                    message.osbPlayer = PlayerPb.internalBinaryRead(reader, reader.uint32(), options, message.osbPlayer);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerRegistration, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* PlayerPb optPlayer = 1; */
        if (message.optPlayer)
            PlayerPb.internalBinaryWrite(message.optPlayer, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* PlayerPb osbPlayer = 2; */
        if (message.osbPlayer)
            PlayerPb.internalBinaryWrite(message.osbPlayer, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PlayerRegistration
 */
export const PlayerRegistration = new PlayerRegistration$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GameHostPb$Type extends MessageType<GameHostPb> {
    constructor() {
        super("GameHostPb", [
            { no: 1, name: "gameHostId", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GameHostPb>): GameHostPb {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.gameHostId = "";
        if (value !== undefined)
            reflectionMergePartial<GameHostPb>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GameHostPb): GameHostPb {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string gameHostId */ 1:
                    message.gameHostId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GameHostPb, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string gameHostId = 1; */
        if (message.gameHostId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.gameHostId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GameHostPb
 */
export const GameHostPb = new GameHostPb$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SeasonPbId$Type extends MessageType<SeasonPbId> {
    constructor() {
        super("SeasonPbId", [
            { no: 1, name: "seasonType", kind: "enum", T: () => ["SeasonType", SeasonType] },
            { no: 2, name: "seasonDefinition", kind: "enum", T: () => ["SeasonDefinition", SeasonDefinition] }
        ]);
    }
    create(value?: PartialMessage<SeasonPbId>): SeasonPbId {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.seasonType = 0;
        message.seasonDefinition = 0;
        if (value !== undefined)
            reflectionMergePartial<SeasonPbId>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SeasonPbId): SeasonPbId {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* SeasonType seasonType */ 1:
                    message.seasonType = reader.int32();
                    break;
                case /* SeasonDefinition seasonDefinition */ 2:
                    message.seasonDefinition = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SeasonPbId, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* SeasonType seasonType = 1; */
        if (message.seasonType !== 0)
            writer.tag(1, WireType.Varint).int32(message.seasonType);
        /* SeasonDefinition seasonDefinition = 2; */
        if (message.seasonDefinition !== 0)
            writer.tag(2, WireType.Varint).int32(message.seasonDefinition);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SeasonPbId
 */
export const SeasonPbId = new SeasonPbId$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TotemPbId$Type extends MessageType<TotemPbId> {
    constructor() {
        super("TotemPbId", [
            { no: 1, name: "seasonId", kind: "message", T: () => SeasonPbId },
            { no: 2, name: "seasonTotemId", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<TotemPbId>): TotemPbId {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.seasonTotemId = 0;
        if (value !== undefined)
            reflectionMergePartial<TotemPbId>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TotemPbId): TotemPbId {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* SeasonPbId seasonId */ 1:
                    message.seasonId = SeasonPbId.internalBinaryRead(reader, reader.uint32(), options, message.seasonId);
                    break;
                case /* uint32 seasonTotemId */ 2:
                    message.seasonTotemId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TotemPbId, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* SeasonPbId seasonId = 1; */
        if (message.seasonId)
            SeasonPbId.internalBinaryWrite(message.seasonId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint32 seasonTotemId = 2; */
        if (message.seasonTotemId !== 0)
            writer.tag(2, WireType.Varint).uint32(message.seasonTotemId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TotemPbId
 */
export const TotemPbId = new TotemPbId$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MonumentCardPbId$Type extends MessageType<MonumentCardPbId> {
    constructor() {
        super("MonumentCardPbId", [
            { no: 1, name: "seasonId", kind: "message", T: () => SeasonPbId },
            { no: 2, name: "seasonMonumentCardId", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<MonumentCardPbId>): MonumentCardPbId {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.seasonMonumentCardId = 0;
        if (value !== undefined)
            reflectionMergePartial<MonumentCardPbId>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MonumentCardPbId): MonumentCardPbId {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* SeasonPbId seasonId */ 1:
                    message.seasonId = SeasonPbId.internalBinaryRead(reader, reader.uint32(), options, message.seasonId);
                    break;
                case /* uint32 seasonMonumentCardId */ 2:
                    message.seasonMonumentCardId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MonumentCardPbId, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* SeasonPbId seasonId = 1; */
        if (message.seasonId)
            SeasonPbId.internalBinaryWrite(message.seasonId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint32 seasonMonumentCardId = 2; */
        if (message.seasonMonumentCardId !== 0)
            writer.tag(2, WireType.Varint).uint32(message.seasonMonumentCardId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MonumentCardPbId
 */
export const MonumentCardPbId = new MonumentCardPbId$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GameBoardMonuments$Type extends MessageType<GameBoardMonuments> {
    constructor() {
        super("GameBoardMonuments", [
            { no: 1, name: "leyPoint1MonumentId", kind: "message", T: () => MonumentCardPbId },
            { no: 2, name: "leyPoint2MonumentId", kind: "message", T: () => MonumentCardPbId },
            { no: 3, name: "leyPoint3MonumentId", kind: "message", T: () => MonumentCardPbId }
        ]);
    }
    create(value?: PartialMessage<GameBoardMonuments>): GameBoardMonuments {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GameBoardMonuments>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GameBoardMonuments): GameBoardMonuments {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* MonumentCardPbId leyPoint1MonumentId */ 1:
                    message.leyPoint1MonumentId = MonumentCardPbId.internalBinaryRead(reader, reader.uint32(), options, message.leyPoint1MonumentId);
                    break;
                case /* MonumentCardPbId leyPoint2MonumentId */ 2:
                    message.leyPoint2MonumentId = MonumentCardPbId.internalBinaryRead(reader, reader.uint32(), options, message.leyPoint2MonumentId);
                    break;
                case /* MonumentCardPbId leyPoint3MonumentId */ 3:
                    message.leyPoint3MonumentId = MonumentCardPbId.internalBinaryRead(reader, reader.uint32(), options, message.leyPoint3MonumentId);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GameBoardMonuments, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* MonumentCardPbId leyPoint1MonumentId = 1; */
        if (message.leyPoint1MonumentId)
            MonumentCardPbId.internalBinaryWrite(message.leyPoint1MonumentId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* MonumentCardPbId leyPoint2MonumentId = 2; */
        if (message.leyPoint2MonumentId)
            MonumentCardPbId.internalBinaryWrite(message.leyPoint2MonumentId, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* MonumentCardPbId leyPoint3MonumentId = 3; */
        if (message.leyPoint3MonumentId)
            MonumentCardPbId.internalBinaryWrite(message.leyPoint3MonumentId, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GameBoardMonuments
 */
export const GameBoardMonuments = new GameBoardMonuments$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClanCardDefPbId$Type extends MessageType<ClanCardDefPbId> {
    constructor() {
        super("ClanCardDefPbId", [
            { no: 1, name: "seasonId", kind: "message", T: () => SeasonPbId },
            { no: 2, name: "seasonClanCardId", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ClanCardDefPbId>): ClanCardDefPbId {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.seasonClanCardId = 0;
        if (value !== undefined)
            reflectionMergePartial<ClanCardDefPbId>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClanCardDefPbId): ClanCardDefPbId {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* SeasonPbId seasonId */ 1:
                    message.seasonId = SeasonPbId.internalBinaryRead(reader, reader.uint32(), options, message.seasonId);
                    break;
                case /* uint32 seasonClanCardId */ 2:
                    message.seasonClanCardId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClanCardDefPbId, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* SeasonPbId seasonId = 1; */
        if (message.seasonId)
            SeasonPbId.internalBinaryWrite(message.seasonId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint32 seasonClanCardId = 2; */
        if (message.seasonClanCardId !== 0)
            writer.tag(2, WireType.Varint).uint32(message.seasonClanCardId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ClanCardDefPbId
 */
export const ClanCardDefPbId = new ClanCardDefPbId$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClanCardInstancePbId$Type extends MessageType<ClanCardInstancePbId> {
    constructor() {
        super("ClanCardInstancePbId", [
            { no: 1, name: "clanCardDefId", kind: "message", T: () => ClanCardDefPbId },
            { no: 2, name: "playerSide", kind: "enum", T: () => ["PlayerSideId", PlayerSideId] }
        ]);
    }
    create(value?: PartialMessage<ClanCardInstancePbId>): ClanCardInstancePbId {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.playerSide = 0;
        if (value !== undefined)
            reflectionMergePartial<ClanCardInstancePbId>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClanCardInstancePbId): ClanCardInstancePbId {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ClanCardDefPbId clanCardDefId */ 1:
                    message.clanCardDefId = ClanCardDefPbId.internalBinaryRead(reader, reader.uint32(), options, message.clanCardDefId);
                    break;
                case /* PlayerSideId playerSide */ 2:
                    message.playerSide = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClanCardInstancePbId, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ClanCardDefPbId clanCardDefId = 1; */
        if (message.clanCardDefId)
            ClanCardDefPbId.internalBinaryWrite(message.clanCardDefId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* PlayerSideId playerSide = 2; */
        if (message.playerSide !== 0)
            writer.tag(2, WireType.Varint).int32(message.playerSide);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ClanCardInstancePbId
 */
export const ClanCardInstancePbId = new ClanCardInstancePbId$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MonumentCardInPlayPbInstance$Type extends MessageType<MonumentCardInPlayPbInstance> {
    constructor() {
        super("MonumentCardInPlayPbInstance", [
            { no: 1, name: "sourceCardId", kind: "message", T: () => MonumentCardPbId },
            { no: 2, name: "leylineDistance", kind: "enum", T: () => ["LeylineDistanceFromSource", LeylineDistanceFromSource] }
        ]);
    }
    create(value?: PartialMessage<MonumentCardInPlayPbInstance>): MonumentCardInPlayPbInstance {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.leylineDistance = 0;
        if (value !== undefined)
            reflectionMergePartial<MonumentCardInPlayPbInstance>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MonumentCardInPlayPbInstance): MonumentCardInPlayPbInstance {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* MonumentCardPbId sourceCardId */ 1:
                    message.sourceCardId = MonumentCardPbId.internalBinaryRead(reader, reader.uint32(), options, message.sourceCardId);
                    break;
                case /* LeylineDistanceFromSource leylineDistance */ 2:
                    message.leylineDistance = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MonumentCardInPlayPbInstance, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* MonumentCardPbId sourceCardId = 1; */
        if (message.sourceCardId)
            MonumentCardPbId.internalBinaryWrite(message.sourceCardId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* LeylineDistanceFromSource leylineDistance = 2; */
        if (message.leylineDistance !== 0)
            writer.tag(2, WireType.Varint).int32(message.leylineDistance);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MonumentCardInPlayPbInstance
 */
export const MonumentCardInPlayPbInstance = new MonumentCardInPlayPbInstance$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FamilyCardDefPbId$Type extends MessageType<FamilyCardDefPbId> {
    constructor() {
        super("FamilyCardDefPbId", [
            { no: 1, name: "seasonId", kind: "message", T: () => SeasonPbId },
            { no: 2, name: "seasonFamilyCardId", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<FamilyCardDefPbId>): FamilyCardDefPbId {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.seasonFamilyCardId = 0;
        if (value !== undefined)
            reflectionMergePartial<FamilyCardDefPbId>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FamilyCardDefPbId): FamilyCardDefPbId {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* SeasonPbId seasonId */ 1:
                    message.seasonId = SeasonPbId.internalBinaryRead(reader, reader.uint32(), options, message.seasonId);
                    break;
                case /* uint32 seasonFamilyCardId */ 2:
                    message.seasonFamilyCardId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FamilyCardDefPbId, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* SeasonPbId seasonId = 1; */
        if (message.seasonId)
            SeasonPbId.internalBinaryWrite(message.seasonId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint32 seasonFamilyCardId = 2; */
        if (message.seasonFamilyCardId !== 0)
            writer.tag(2, WireType.Varint).uint32(message.seasonFamilyCardId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message FamilyCardDefPbId
 */
export const FamilyCardDefPbId = new FamilyCardDefPbId$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FamilyCardInstancePbId$Type extends MessageType<FamilyCardInstancePbId> {
    constructor() {
        super("FamilyCardInstancePbId", [
            { no: 1, name: "familyCardDefId", kind: "message", T: () => FamilyCardDefPbId },
            { no: 2, name: "owningPlayerSide", kind: "enum", T: () => ["PlayerSideId", PlayerSideId] }
        ]);
    }
    create(value?: PartialMessage<FamilyCardInstancePbId>): FamilyCardInstancePbId {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.owningPlayerSide = 0;
        if (value !== undefined)
            reflectionMergePartial<FamilyCardInstancePbId>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FamilyCardInstancePbId): FamilyCardInstancePbId {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* FamilyCardDefPbId familyCardDefId */ 1:
                    message.familyCardDefId = FamilyCardDefPbId.internalBinaryRead(reader, reader.uint32(), options, message.familyCardDefId);
                    break;
                case /* PlayerSideId owningPlayerSide */ 2:
                    message.owningPlayerSide = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FamilyCardInstancePbId, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* FamilyCardDefPbId familyCardDefId = 1; */
        if (message.familyCardDefId)
            FamilyCardDefPbId.internalBinaryWrite(message.familyCardDefId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* PlayerSideId owningPlayerSide = 2; */
        if (message.owningPlayerSide !== 0)
            writer.tag(2, WireType.Varint).int32(message.owningPlayerSide);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message FamilyCardInstancePbId
 */
export const FamilyCardInstancePbId = new FamilyCardInstancePbId$Type();
