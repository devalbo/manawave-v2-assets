// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "manawave.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { PlayerRegistration } from "./manawave-types";
import { GamePhaseId } from "./manawave-types";
import { GameOutcome } from "./manawave-types";
import { RoundProgress } from "./manawave-types";
import { PlayerSideId } from "./manawave-types";
import { MwMarkerType } from "./manawave-types";
import { MyBoardPlayerSideCoordinate } from "./manawave-board";
import { PlayerCardChoicePb } from "./manawave-types";
import { FamilyCardInstancePbId } from "./manawave-types";
import { GameBoardMonuments } from "./manawave-types";
import { ClanCardDefPbId } from "./manawave-types";
import { LeylineDistanceFromSource } from "./manawave-types";
import { TotemPbId } from "./manawave-types";
import { MonumentCardPbId } from "./manawave-types";
// message BoardPlayerSideCoordinate {
//   PlayerSideId playerSide = 1;
//   uint32 rank = 2;
//   LeylineDistanceFromSource leylineDistance = 3;
// }

// message PlayerTilePlacemenPoint {
//   LeylineDistanceFromSource leylineDistance = 1;
// }

/**
 * @generated from protobuf message InitialConditions
 */
export interface InitialConditions {
    /**
     * @generated from protobuf field: uint32 randomSeed = 1;
     */
    randomSeed: number; // bool useFastForwardMode = 2;
}
/**
 * @generated from protobuf message GameSetupLeyPointOptions
 */
export interface GameSetupLeyPointOptions {
    /**
     * @generated from protobuf field: MonumentCardPbId defaultMonumentId = 1;
     */
    defaultMonumentId?: MonumentCardPbId;
    /**
     * @generated from protobuf field: MonumentCardPbId replacementMonumentId = 2;
     */
    replacementMonumentId?: MonumentCardPbId;
}
/**
 * @generated from protobuf message GameInitLeylineDrawResults
 */
export interface GameInitLeylineDrawResults {
    /**
     * @generated from protobuf field: GameSetupLeyPointOptions leyPoint1Options = 1;
     */
    leyPoint1Options?: GameSetupLeyPointOptions;
    /**
     * @generated from protobuf field: GameSetupLeyPointOptions leyPoint2Options = 2;
     */
    leyPoint2Options?: GameSetupLeyPointOptions;
    /**
     * @generated from protobuf field: GameSetupLeyPointOptions leyPoint3Options = 3;
     */
    leyPoint3Options?: GameSetupLeyPointOptions;
}
/**
 * @generated from protobuf message TotemAndMonumentVetoPlayerChoices
 */
export interface TotemAndMonumentVetoPlayerChoices {
    /**
     * @generated from protobuf field: TotemPbId selectedTotem1Id = 1;
     */
    selectedTotem1Id?: TotemPbId;
    /**
     * @generated from protobuf field: TotemPbId selectedTotem2Id = 2;
     */
    selectedTotem2Id?: TotemPbId;
    /**
     * @generated from protobuf field: LeylineDistanceFromSource vetoedMonumentLeylineDistance = 3;
     */
    vetoedMonumentLeylineDistance: LeylineDistanceFromSource;
}
/**
 * @generated from protobuf message PlayerClanPlacements
 */
export interface PlayerClanPlacements {
    /**
     * @generated from protobuf field: ClanCardDefPbId leyline1ClanId = 1;
     */
    leyline1ClanId?: ClanCardDefPbId;
    /**
     * @generated from protobuf field: ClanCardDefPbId leyline2ClanId = 2;
     */
    leyline2ClanId?: ClanCardDefPbId;
    /**
     * @generated from protobuf field: ClanCardDefPbId leyline3ClanId = 3;
     */
    leyline3ClanId?: ClanCardDefPbId;
}
/**
 * @generated from protobuf message GameInitSetup
 */
export interface GameInitSetup {
    /**
     * @generated from protobuf field: GameInitLeylineDrawResults leylineDrawResults = 1;
     */
    leylineDrawResults?: GameInitLeylineDrawResults;
    /**
     * @generated from protobuf field: TotemAndMonumentVetoPlayerChoices defaultOptPlayerTotemAndMonumentVetoChoices = 4;
     */
    defaultOptPlayerTotemAndMonumentVetoChoices?: TotemAndMonumentVetoPlayerChoices;
    /**
     * @generated from protobuf field: TotemAndMonumentVetoPlayerChoices defaultOsbPlayerTotemAndMonumentVetoChoices = 5;
     */
    defaultOsbPlayerTotemAndMonumentVetoChoices?: TotemAndMonumentVetoPlayerChoices;
    /**
     * @generated from protobuf field: PlayerClanPlacements defaultOptPlayerClanPlacements = 6;
     */
    defaultOptPlayerClanPlacements?: PlayerClanPlacements;
    /**
     * @generated from protobuf field: PlayerClanPlacements defaultOsbPlayerClanPlacements = 7;
     */
    defaultOsbPlayerClanPlacements?: PlayerClanPlacements;
}
/**
 * @generated from protobuf message GameInitPickTotemsAndMonumentVetoResult
 */
export interface GameInitPickTotemsAndMonumentVetoResult {
    /**
     * @generated from protobuf field: TotemAndMonumentVetoPlayerChoices finalOptPlayerTotemAndMonumentVetoChoices = 1;
     */
    finalOptPlayerTotemAndMonumentVetoChoices?: TotemAndMonumentVetoPlayerChoices;
    /**
     * @generated from protobuf field: TotemAndMonumentVetoPlayerChoices finalOsbPlayerTotemAndMonumentVetoChoices = 2;
     */
    finalOsbPlayerTotemAndMonumentVetoChoices?: TotemAndMonumentVetoPlayerChoices;
    /**
     * @generated from protobuf field: GameBoardMonuments finalMonuments = 3;
     */
    finalMonuments?: GameBoardMonuments;
}
/**
 * @generated from protobuf message GameInitPlaceClansResult
 */
export interface GameInitPlaceClansResult {
    /**
     * @generated from protobuf field: PlayerClanPlacements optPlayerClanPlacements = 1;
     */
    optPlayerClanPlacements?: PlayerClanPlacements;
    /**
     * @generated from protobuf field: PlayerClanPlacements osbPlayerClanPlacements = 2;
     */
    osbPlayerClanPlacements?: PlayerClanPlacements;
}
/**
 * @generated from protobuf message DrawFamilyCardsResults
 */
export interface DrawFamilyCardsResults {
    /**
     * @generated from protobuf field: FamilyCardInstancePbId familyAId = 1;
     */
    familyAId?: FamilyCardInstancePbId;
    /**
     * @generated from protobuf field: FamilyCardInstancePbId familyBId = 2;
     */
    familyBId?: FamilyCardInstancePbId;
    /**
     * @generated from protobuf field: FamilyCardInstancePbId familyCId = 3;
     */
    familyCId?: FamilyCardInstancePbId;
    /**
     * @generated from protobuf field: uint32 numCardsRemainingInPile = 10;
     */
    numCardsRemainingInPile: number;
}
/**
 * @generated from protobuf message FullGameFamilyDrawResults
 */
export interface FullGameFamilyDrawResults {
    /**
     * @generated from protobuf field: repeated DrawFamilyCardsResults familyCardDrawSets = 1;
     */
    familyCardDrawSets: DrawFamilyCardsResults[];
}
// message PlayerPb {
//   string playerId = 1;
//   PlayerSideId playerSide = 2;
//   PlayerDefaultStrategyPb defaultStrategy = 3;
// }

// message PlayerRegistration {
//   SeasonPbId seasonId = 1;
//   PlayerPb optPlayer  = 2;
//   PlayerPb osbPlayer  = 3;
// }

/**
 * @generated from protobuf message AllPlayerFamilyChoiceDefaults
 */
export interface AllPlayerFamilyChoiceDefaults {
    /**
     * @generated from protobuf field: PlayerCardChoicePb optPlayerCardDefault = 1;
     */
    optPlayerCardDefault: PlayerCardChoicePb;
    /**
     * @generated from protobuf field: PlayerCardChoicePb osbPlayerCardDefault = 2;
     */
    osbPlayerCardDefault: PlayerCardChoicePb;
}
/**
 * @generated from protobuf message AllPlayerFamilyChoiceResults
 */
export interface AllPlayerFamilyChoiceResults {
    /**
     * @generated from protobuf field: PlayerCardChoicePb optPlayerCardChoice = 1;
     */
    optPlayerCardChoice: PlayerCardChoicePb;
    /**
     * @generated from protobuf field: PlayerCardChoicePb osbPlayerCardChoice = 2;
     */
    osbPlayerCardChoice: PlayerCardChoicePb;
}
/**
 * @generated from protobuf message PlayerFamilyPlacementOptions
 */
export interface PlayerFamilyPlacementOptions {
    /**
     * @generated from protobuf field: repeated LeylineDistanceFromSource leylineDistanceOptions = 1;
     */
    leylineDistanceOptions: LeylineDistanceFromSource[];
}
/**
 * @generated from protobuf message AllPlayerFamilyPlacementOptions
 */
export interface AllPlayerFamilyPlacementOptions {
    /**
     * @generated from protobuf field: PlayerFamilyPlacementOptions optPlayerFamilyPlacementOptions = 1;
     */
    optPlayerFamilyPlacementOptions?: PlayerFamilyPlacementOptions;
    /**
     * @generated from protobuf field: PlayerFamilyPlacementOptions osbPlayerFamilyPlacementOptions = 2;
     */
    osbPlayerFamilyPlacementOptions?: PlayerFamilyPlacementOptions;
}
/**
 * @generated from protobuf message PlayerFamilyPlacementDefaults
 */
export interface PlayerFamilyPlacementDefaults {
    /**
     * @generated from protobuf field: LeylineDistanceFromSource leylineDistance = 1;
     */
    leylineDistance: LeylineDistanceFromSource;
}
/**
 * @generated from protobuf message AllPlayerFamilyPlacementDefaults
 */
export interface AllPlayerFamilyPlacementDefaults {
    /**
     * @generated from protobuf field: PlayerFamilyPlacementDefaults optPlayerFamilyPlacementDefaults = 1;
     */
    optPlayerFamilyPlacementDefaults?: PlayerFamilyPlacementDefaults;
    /**
     * @generated from protobuf field: PlayerFamilyPlacementDefaults osbPlayerFamilyPlacementDefaults = 2;
     */
    osbPlayerFamilyPlacementDefaults?: PlayerFamilyPlacementDefaults;
}
/**
 * @generated from protobuf message PlayerFamilyPlacementResults
 */
export interface PlayerFamilyPlacementResults {
    /**
     * @generated from protobuf field: LeylineDistanceFromSource leylineDistance = 1;
     */
    leylineDistance: LeylineDistanceFromSource;
}
/**
 * @generated from protobuf message AllPlayerFamilyPlacementResults
 */
export interface AllPlayerFamilyPlacementResults {
    /**
     * @generated from protobuf field: PlayerFamilyPlacementResults optPlayerFamilyPlacementResults = 1;
     */
    optPlayerFamilyPlacementResults?: PlayerFamilyPlacementResults;
    /**
     * @generated from protobuf field: PlayerFamilyPlacementResults osbPlayerFamilyPlacementResults = 2;
     */
    osbPlayerFamilyPlacementResults?: PlayerFamilyPlacementResults;
}
/**
 * @generated from protobuf message ModalitySelection
 */
export interface ModalitySelection {
    /**
     * @generated from protobuf field: MyBoardPlayerSideCoordinate cardCoordinate = 1;
     */
    cardCoordinate?: MyBoardPlayerSideCoordinate;
    /**
     * @generated from protobuf field: uint32 modalityIndex = 2;
     */
    modalityIndex: number;
}
/**
 * @generated from protobuf message PlayerModalitySelectionDefaults
 */
export interface PlayerModalitySelectionDefaults {
    /**
     * LeylineDistanceFromSource leylineDistance = 1;
     *
     * @generated from protobuf field: string dummyValue = 1;
     */
    dummyValue: string;
}
/**
 * @generated from protobuf message AllPlayerModalitySelectionDefaults
 */
export interface AllPlayerModalitySelectionDefaults {
    /**
     * @generated from protobuf field: PlayerModalitySelectionDefaults optPlayerNonZeroIndexModalitySelectionDefaults = 1;
     */
    optPlayerNonZeroIndexModalitySelectionDefaults?: PlayerModalitySelectionDefaults;
    /**
     * @generated from protobuf field: PlayerModalitySelectionDefaults osbPlayerNonZeroIndexModalitySelectionDefaults = 2;
     */
    osbPlayerNonZeroIndexModalitySelectionDefaults?: PlayerModalitySelectionDefaults;
}
/**
 * @generated from protobuf message PlayerModalitySelectionResults
 */
export interface PlayerModalitySelectionResults {
    /**
     * use 0-index modes as defaults unless otherwise selected
     *
     * @generated from protobuf field: repeated ModalitySelection nonZeroIndexModeSelections = 1;
     */
    nonZeroIndexModeSelections: ModalitySelection[]; // LeylineDistanceFromSource leylineDistance = 1;
}
/**
 * @generated from protobuf message AllPlayerModalitySelectionResults
 */
export interface AllPlayerModalitySelectionResults {
    /**
     * @generated from protobuf field: PlayerModalitySelectionResults optPlayerModalitySelectionResults = 1;
     */
    optPlayerModalitySelectionResults?: PlayerModalitySelectionResults;
    /**
     * @generated from protobuf field: PlayerModalitySelectionResults osbPlayerModalitySelectionResults = 2;
     */
    osbPlayerModalitySelectionResults?: PlayerModalitySelectionResults;
}
/**
 * @generated from protobuf message MarkerConversion
 */
export interface MarkerConversion {
    /**
     * BoardPlayerSideCoordinate sourcePiece = 1;
     * BoardPlayerSideCoordinate destinationPiece = 2;
     *
     * @generated from protobuf field: MwMarkerType sourceType = 1;
     */
    sourceType: MwMarkerType;
    /**
     * @generated from protobuf field: MwMarkerType destinationType = 2;
     */
    destinationType: MwMarkerType;
    /**
     * @generated from protobuf field: uint32 sourceAmount = 3;
     */
    sourceAmount: number;
    /**
     * @generated from protobuf field: uint32 destinationAmount = 4;
     */
    destinationAmount: number;
}
/**
 * @generated from protobuf message MarkerAllocation
 */
export interface MarkerAllocation {
    /**
     * @generated from protobuf field: MwMarkerType markerType = 1;
     */
    markerType: MwMarkerType;
}
/**
 * @generated from protobuf message TribeMarkerConversions
 */
export interface TribeMarkerConversions {
    /**
     * @generated from protobuf field: repeated MarkerConversion conversions = 1;
     */
    conversions: MarkerConversion[];
}
/**
 * @generated from protobuf message TribeToClanMarkerAllocations
 */
export interface TribeToClanMarkerAllocations {
    /**
     * @generated from protobuf field: repeated MarkerAllocation tribeToClanAtLeyline1Allocations = 1;
     */
    tribeToClanAtLeyline1Allocations: MarkerAllocation[];
    /**
     * @generated from protobuf field: repeated MarkerAllocation tribeToClanAtLeyline2Allocations = 2;
     */
    tribeToClanAtLeyline2Allocations: MarkerAllocation[];
    /**
     * @generated from protobuf field: repeated MarkerAllocation tribeToClanAtLeyline3Allocations = 3;
     */
    tribeToClanAtLeyline3Allocations: MarkerAllocation[];
}
/**
 * @generated from protobuf message ClanMarkerConversions
 */
export interface ClanMarkerConversions {
    /**
     * @generated from protobuf field: repeated MarkerConversion clanAtLeyline1Conversions = 1;
     */
    clanAtLeyline1Conversions: MarkerConversion[];
    /**
     * @generated from protobuf field: repeated MarkerConversion clanAtLeyline2Conversions = 2;
     */
    clanAtLeyline2Conversions: MarkerConversion[];
    /**
     * @generated from protobuf field: repeated MarkerConversion clanAtLeyline3Conversions = 3;
     */
    clanAtLeyline3Conversions: MarkerConversion[];
}
/**
 * @generated from protobuf message PlayerPurchaseAndPlaceMarkersSelections
 */
export interface PlayerPurchaseAndPlaceMarkersSelections {
    /**
     * LeylineDistanceFromSource selectedFamilyLocation = 1;
     *
     * @generated from protobuf field: TribeMarkerConversions tribeMarkerConversions = 1;
     */
    tribeMarkerConversions?: TribeMarkerConversions;
    /**
     * @generated from protobuf field: TribeToClanMarkerAllocations tribeToClanMarkerAllocations = 2;
     */
    tribeToClanMarkerAllocations?: TribeToClanMarkerAllocations;
    /**
     * @generated from protobuf field: ClanMarkerConversions clanMarkerConversions = 3;
     */
    clanMarkerConversions?: ClanMarkerConversions; // spending can be...
    //  * first, spend from tribe to clans
    //    * convert mana counters to non-mana counters
    //    * allocate non-mana counters to Clans
    //  * then, spend from each clan
    //    * convert mana counters to something
    //    * pick modes drawing from manalith "points" pool
}
// // TODO: are these options even necessary anymore?
// message AllPlayerPurchaseAndPlaceMarkersOptions {
//   repeated LeylineDistanceFromSource optPlayerLeylinePlacementOptions = 1;
//   repeated LeylineDistanceFromSource osbPlayerLeylinePlacementOptions = 2;
//   // PlayerPurchaseAndPlaceMarkersSelections optPlayerPurchaseAndPlaceMarkersSelections = 1;
//   // PlayerPurchaseAndPlaceMarkersSelections osbPlayerPurchaseAndPlaceMarkersSelections = 1;
// }

/**
 * @generated from protobuf message AllPlayerPurchaseAndPlaceMarkersDefaults
 */
export interface AllPlayerPurchaseAndPlaceMarkersDefaults {
    /**
     * LeylineDistanceFromSource optPlayerLeylineDistance = 1;
     * LeylineDistanceFromSource osbPlayerLeylineDistance = 2;
     *
     * @generated from protobuf field: PlayerPurchaseAndPlaceMarkersSelections optPlayerPurchaseAndPlaceMarkersSelections = 1;
     */
    optPlayerPurchaseAndPlaceMarkersSelections?: PlayerPurchaseAndPlaceMarkersSelections;
    /**
     * @generated from protobuf field: PlayerPurchaseAndPlaceMarkersSelections osbPlayerPurchaseAndPlaceMarkersSelections = 2;
     */
    osbPlayerPurchaseAndPlaceMarkersSelections?: PlayerPurchaseAndPlaceMarkersSelections;
}
/**
 * @generated from protobuf message AllPlayerPurchaseAndPlaceMarkersResults
 */
export interface AllPlayerPurchaseAndPlaceMarkersResults {
    /**
     * LeylineDistanceFromSource optPlayerLeylineDistance = 1;
     * LeylineDistanceFromSource osbPlayerLeylineDistance = 2;
     *
     * @generated from protobuf field: PlayerPurchaseAndPlaceMarkersSelections optPlayerPurchaseAndPlaceMarkersSelections = 1;
     */
    optPlayerPurchaseAndPlaceMarkersSelections?: PlayerPurchaseAndPlaceMarkersSelections;
    /**
     * @generated from protobuf field: PlayerPurchaseAndPlaceMarkersSelections osbPlayerPurchaseAndPlaceMarkersSelections = 2;
     */
    osbPlayerPurchaseAndPlaceMarkersSelections?: PlayerPurchaseAndPlaceMarkersSelections;
}
/**
 * @generated from protobuf message PlayerTribeMarkerAllocation
 */
export interface PlayerTribeMarkerAllocation {
    /**
     * @generated from protobuf field: MyBoardPlayerSideCoordinate sourcePiece = 1;
     */
    sourcePiece?: MyBoardPlayerSideCoordinate;
    /**
     * @generated from protobuf field: MyBoardPlayerSideCoordinate destinationPiece = 2;
     */
    destinationPiece?: MyBoardPlayerSideCoordinate;
    /**
     * @generated from protobuf field: MwMarkerType markerType = 3;
     */
    markerType: MwMarkerType;
    /**
     * @generated from protobuf field: uint32 sourceDecrement = 4;
     */
    sourceDecrement: number;
    /**
     * @generated from protobuf field: uint32 destinationIncrement = 5;
     */
    destinationIncrement: number;
}
// message PlayerMarkerAllocations {
//   // repeated BoardPlayerSideCoordinate populationIncreaseTokenLocations = 1;
//   // repeated BoardPlayerSideCoordinate sacrificeTokenLocations = 2;
//   // repeated BoardPlayerSideCoordinate damageTokenLocations = 3;
//   // repeated BoardPlayerSideCoordinate shieldTokenLocations = 4;

//   // repeated PlayerMarkerAllocation populationIncreaseAllocations = 1;
//   // repeated PlayerMarkerAllocation sacrificeAllocations = 2;
//   // repeated PlayerMarkerAllocation damageAllocations = 3;
//   // repeated PlayerMarkerAllocation shieldAllocations = 4;
//   // repeated PlayerMarkerAllocation manalithAllocations = 5;

//   repeated PlayerTribeMarkerAllocation tribeAllocations = 1;
//   repeated PlayerClanMarkerConversion leyline1ClanConversions = 2;
//   repeated PlayerClanMarkerConversion leyline2ClanConversions = 3;
//   repeated PlayerClanMarkerConversion leyline3ClanConversions = 4;
// }

/**
 * @generated from protobuf message PlayerTribeMarkerStockpile
 */
export interface PlayerTribeMarkerStockpile {
    /**
     * @generated from protobuf field: repeated MwMarkerType markers = 1;
     */
    markers: MwMarkerType[];
}
/**
 * @generated from protobuf message PlayerClanMarkerStockpile
 */
export interface PlayerClanMarkerStockpile {
    /**
     * @generated from protobuf field: repeated MwMarkerType markers = 1;
     */
    markers: MwMarkerType[]; // repeated MwMarkerType leylineClan1Markers = 1;
    // repeated MwMarkerType leylineClan2Markers = 2;
    // repeated MwMarkerType leylineClan3Markers = 3;
}
/**
 * @generated from protobuf message PlayerMarkerStockpiles
 */
export interface PlayerMarkerStockpiles {
    /**
     * @generated from protobuf field: PlayerTribeMarkerStockpile tribeStockpile = 1;
     */
    tribeStockpile?: PlayerTribeMarkerStockpile;
    /**
     * @generated from protobuf field: PlayerClanMarkerStockpile leyline1ClanStockpile = 2;
     */
    leyline1ClanStockpile?: PlayerClanMarkerStockpile;
    /**
     * @generated from protobuf field: PlayerClanMarkerStockpile leyline2ClanStockpile = 3;
     */
    leyline2ClanStockpile?: PlayerClanMarkerStockpile;
    /**
     * @generated from protobuf field: PlayerClanMarkerStockpile leyline3ClanStockpile = 4;
     */
    leyline3ClanStockpile?: PlayerClanMarkerStockpile;
}
// message PlayerMarkerAllocationOptions {

// }

// message AllPlayerMarkerAllocationOptions {
//   PlayerMarkerAllocationOptions optPlayerMarkerPlacementOptions = 1;
//   PlayerMarkerAllocationOptions osbPlayerMarkerPlacementOptions = 2;
// }

// message AllPlayerMarkerStockpileAndAllocationDefaults {
//   PlayerMarkerStockpiles optPlayerStockpiles = 1;
//   PlayerMarkerStockpiles osbPlayerStockpiles = 2;
//   // PlayerMarkerAllocations optPlayerAllocations = 3;
//   // PlayerMarkerAllocations osbPlayerAllocations = 4;
// }

// message AllPlayerMarkerStockpileAndAllocationResults {
//   PlayerMarkerStockpiles optPlayerStockpiles = 1;
//   PlayerMarkerStockpiles osbPlayerStockpiles = 2;
//   PlayerMarkerAllocations optPlayerAllocations = 3;
//   PlayerMarkerAllocations osbPlayerAllocations = 4;
// }

/**
 * @generated from protobuf message ManaflowResults
 */
export interface ManaflowResults {
    /**
     * @generated from protobuf field: PlayerMarkerStockpiles optPlayerManaflowOutcomeStockpiles = 1;
     */
    optPlayerManaflowOutcomeStockpiles?: PlayerMarkerStockpiles;
    /**
     * @generated from protobuf field: PlayerMarkerStockpiles osbPlayerManaflowOutcomeStockpiles = 2;
     */
    osbPlayerManaflowOutcomeStockpiles?: PlayerMarkerStockpiles;
}
/**
 * @generated from protobuf message WageClanConflictsResults
 */
export interface WageClanConflictsResults {
    /**
     * @generated from protobuf field: PlayerMarkerStockpiles optPlayerConflictOutcomeStockpiles = 1;
     */
    optPlayerConflictOutcomeStockpiles?: PlayerMarkerStockpiles;
    /**
     * @generated from protobuf field: PlayerMarkerStockpiles osbPlayerConflictOutcomeStockpiles = 2;
     */
    osbPlayerConflictOutcomeStockpiles?: PlayerMarkerStockpiles;
}
/**
 * @generated from protobuf message PowerMonumentsResults
 */
export interface PowerMonumentsResults {
    /**
     * @generated from protobuf field: string dummyValue = 1;
     */
    dummyValue: string;
}
/**
 * @generated from protobuf message ConsolidateMarkersResults
 */
export interface ConsolidateMarkersResults {
    /**
     * @generated from protobuf field: string dummyValue = 1;
     */
    dummyValue: string;
}
/**
 * @generated from protobuf message PlayerFamilyPlacementAndModalitySelections
 */
export interface PlayerFamilyPlacementAndModalitySelections {
    /**
     * @generated from protobuf field: PlayerFamilyPlacementResults playerFamilyPlacementResults = 1;
     */
    playerFamilyPlacementResults?: PlayerFamilyPlacementResults;
    /**
     * @generated from protobuf field: PlayerModalitySelectionResults modalitySelections = 2;
     */
    modalitySelections?: PlayerModalitySelectionResults;
}
/**
 * @generated from protobuf message ManawavePlayerMoveSelection
 */
export interface ManawavePlayerMoveSelection {
    /**
     * @generated from protobuf oneof: move
     */
    move: {
        oneofKind: "totemAndMonumentVetoPlayerChoices";
        /**
         * @generated from protobuf field: TotemAndMonumentVetoPlayerChoices totemAndMonumentVetoPlayerChoices = 1;
         */
        totemAndMonumentVetoPlayerChoices: TotemAndMonumentVetoPlayerChoices;
    } | {
        oneofKind: "playerClanPlacements";
        /**
         * @generated from protobuf field: PlayerClanPlacements playerClanPlacements = 2;
         */
        playerClanPlacements: PlayerClanPlacements;
    } | {
        oneofKind: "playerCardChoice";
        /**
         * @generated from protobuf field: PlayerCardChoicePb playerCardChoice = 3;
         */
        playerCardChoice: PlayerCardChoicePb;
    } | {
        oneofKind: "playerFamilyPlacementAndModalitySelections";
        /**
         * @generated from protobuf field: PlayerFamilyPlacementAndModalitySelections playerFamilyPlacementAndModalitySelections = 4;
         */
        playerFamilyPlacementAndModalitySelections: PlayerFamilyPlacementAndModalitySelections;
    } | {
        oneofKind: "playerPurchaseAndPlaceMarkersSelections";
        /**
         * @generated from protobuf field: PlayerPurchaseAndPlaceMarkersSelections playerPurchaseAndPlaceMarkersSelections = 5;
         */
        playerPurchaseAndPlaceMarkersSelections: PlayerPurchaseAndPlaceMarkersSelections;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message ManawavePlayerMove
 */
export interface ManawavePlayerMove {
    /**
     * @generated from protobuf field: ManawavePlayerMoveSelection move = 1;
     */
    move?: ManawavePlayerMoveSelection;
    /**
     * @generated from protobuf field: PlayerSideId playerSide = 2;
     */
    playerSide: PlayerSideId;
}
/**
 * @generated from protobuf message ManawaveRound
 */
export interface ManawaveRound {
    /**
     * @generated from protobuf field: RoundProgress roundProgress = 1;
     */
    roundProgress: RoundProgress; // uint32 roundNumber = 2;
    // GameBoardStatePb gameBoardState = 3;
    /**
     * @generated from protobuf field: DrawFamilyCardsResults drawFamilyCardsResults = 10;
     */
    drawFamilyCardsResults?: DrawFamilyCardsResults;
    /**
     * @generated from protobuf field: AllPlayerFamilyChoiceDefaults allPlayerFamilyChoiceDefaults = 11;
     */
    allPlayerFamilyChoiceDefaults?: AllPlayerFamilyChoiceDefaults;
    /**
     * @generated from protobuf field: AllPlayerFamilyChoiceResults allPlayerFamilyChoiceResults = 12;
     */
    allPlayerFamilyChoiceResults?: AllPlayerFamilyChoiceResults;
    /**
     * @generated from protobuf field: AllPlayerFamilyPlacementOptions allPlayerFamilyPlacementOptions = 20;
     */
    allPlayerFamilyPlacementOptions?: AllPlayerFamilyPlacementOptions;
    /**
     * @generated from protobuf field: AllPlayerFamilyPlacementDefaults allPlayerFamilyPlacementDefaults = 21;
     */
    allPlayerFamilyPlacementDefaults?: AllPlayerFamilyPlacementDefaults;
    /**
     * @generated from protobuf field: AllPlayerFamilyPlacementResults allPlayerFamilyPlacementResults = 22;
     */
    allPlayerFamilyPlacementResults?: AllPlayerFamilyPlacementResults;
    /**
     * @generated from protobuf field: AllPlayerModalitySelectionDefaults allPlayerModalitySelectionDefaults = 30;
     */
    allPlayerModalitySelectionDefaults?: AllPlayerModalitySelectionDefaults;
    /**
     * @generated from protobuf field: AllPlayerModalitySelectionResults allPlayerModalitySelectionResults = 31;
     */
    allPlayerModalitySelectionResults?: AllPlayerModalitySelectionResults;
    /**
     * this might be useful, but it's not strictly necessary since everything can be computed
     *
     * @generated from protobuf field: ManaflowResults manaflowResults = 40;
     */
    manaflowResults?: ManaflowResults;
    /**
     * AllPlayerPurchaseAndPlaceMarkersOptions allPlayerPurchaseAndPlaceMarkersOptions = 50;
     *
     * @generated from protobuf field: AllPlayerPurchaseAndPlaceMarkersDefaults allPlayerPurchaseAndPlaceMarkersDefaults = 50;
     */
    allPlayerPurchaseAndPlaceMarkersDefaults?: AllPlayerPurchaseAndPlaceMarkersDefaults;
    /**
     * @generated from protobuf field: AllPlayerPurchaseAndPlaceMarkersResults allPlayerPurchaseAndPlaceMarkersResults = 51;
     */
    allPlayerPurchaseAndPlaceMarkersResults?: AllPlayerPurchaseAndPlaceMarkersResults;
    // AllPlayerMarkerStockpileAndAllocationDefaults allPlayerMarkerStockpileAndAllocationDefaults = 41;
    // AllPlayerMarkerStockpileAndAllocationResults allPlayerMarkerStockpileAndAllocationsResults = 42;

    /**
     * @generated from protobuf field: WageClanConflictsResults wageClanConflictsResults = 60;
     */
    wageClanConflictsResults?: WageClanConflictsResults;
    /**
     * @generated from protobuf field: PowerMonumentsResults powerMonumentsResults = 80;
     */
    powerMonumentsResults?: PowerMonumentsResults;
    /**
     * @generated from protobuf field: ConsolidateMarkersResults consolidateMarkersResults = 90;
     */
    consolidateMarkersResults?: ConsolidateMarkersResults;
    /**
     * @generated from protobuf field: GameOutcome gameOutcome = 100;
     */
    gameOutcome: GameOutcome;
}
/**
 * @generated from protobuf message GameOverResult
 */
export interface GameOverResult {
    /**
     * @generated from protobuf field: GameOutcome gameOutcome = 1;
     */
    gameOutcome: GameOutcome;
}
/**
 * @generated from protobuf message GameStatePb
 */
export interface GameStatePb {
    /**
     * @generated from protobuf field: GamePhaseId gamePhaseId = 1;
     */
    gamePhaseId: GamePhaseId;
    /**
     * @generated from protobuf field: InitialConditions initialConditions = 2;
     */
    initialConditions?: InitialConditions;
    /**
     * @generated from protobuf field: PlayerRegistration playerRegistration = 3;
     */
    playerRegistration?: PlayerRegistration;
    // GameBoardStatePb gameBoardState = 10;

    /**
     * @generated from protobuf field: GameInitSetup initGameSetup = 20;
     */
    initGameSetup?: GameInitSetup;
    /**
     * @generated from protobuf field: GameInitPickTotemsAndMonumentVetoResult initPickTotemsAndMonumentVetoResult = 21;
     */
    initPickTotemsAndMonumentVetoResult?: GameInitPickTotemsAndMonumentVetoResult;
    /**
     * @generated from protobuf field: GameInitPlaceClansResult initPlaceClansResult = 22;
     */
    initPlaceClansResult?: GameInitPlaceClansResult; // GameInitfamilyDrawResults familyDrawResults = 23;
    /**
     * @generated from protobuf field: ManawaveRound currentRound = 30;
     */
    currentRound?: ManawaveRound;
    /**
     * @generated from protobuf field: repeated ManawaveRound completedRounds = 31;
     */
    completedRounds: ManawaveRound[];
    /**
     * @generated from protobuf field: GameOverResult gameOverResult = 40;
     */
    gameOverResult?: GameOverResult;
}
// @generated message type with reflection information, may provide speed optimized methods
class InitialConditions$Type extends MessageType<InitialConditions> {
    constructor() {
        super("InitialConditions", [
            { no: 1, name: "randomSeed", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<InitialConditions>): InitialConditions {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.randomSeed = 0;
        if (value !== undefined)
            reflectionMergePartial<InitialConditions>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InitialConditions): InitialConditions {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 randomSeed */ 1:
                    message.randomSeed = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InitialConditions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 randomSeed = 1; */
        if (message.randomSeed !== 0)
            writer.tag(1, WireType.Varint).uint32(message.randomSeed);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message InitialConditions
 */
export const InitialConditions = new InitialConditions$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GameSetupLeyPointOptions$Type extends MessageType<GameSetupLeyPointOptions> {
    constructor() {
        super("GameSetupLeyPointOptions", [
            { no: 1, name: "defaultMonumentId", kind: "message", T: () => MonumentCardPbId },
            { no: 2, name: "replacementMonumentId", kind: "message", T: () => MonumentCardPbId }
        ]);
    }
    create(value?: PartialMessage<GameSetupLeyPointOptions>): GameSetupLeyPointOptions {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GameSetupLeyPointOptions>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GameSetupLeyPointOptions): GameSetupLeyPointOptions {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* MonumentCardPbId defaultMonumentId */ 1:
                    message.defaultMonumentId = MonumentCardPbId.internalBinaryRead(reader, reader.uint32(), options, message.defaultMonumentId);
                    break;
                case /* MonumentCardPbId replacementMonumentId */ 2:
                    message.replacementMonumentId = MonumentCardPbId.internalBinaryRead(reader, reader.uint32(), options, message.replacementMonumentId);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GameSetupLeyPointOptions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* MonumentCardPbId defaultMonumentId = 1; */
        if (message.defaultMonumentId)
            MonumentCardPbId.internalBinaryWrite(message.defaultMonumentId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* MonumentCardPbId replacementMonumentId = 2; */
        if (message.replacementMonumentId)
            MonumentCardPbId.internalBinaryWrite(message.replacementMonumentId, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GameSetupLeyPointOptions
 */
export const GameSetupLeyPointOptions = new GameSetupLeyPointOptions$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GameInitLeylineDrawResults$Type extends MessageType<GameInitLeylineDrawResults> {
    constructor() {
        super("GameInitLeylineDrawResults", [
            { no: 1, name: "leyPoint1Options", kind: "message", T: () => GameSetupLeyPointOptions },
            { no: 2, name: "leyPoint2Options", kind: "message", T: () => GameSetupLeyPointOptions },
            { no: 3, name: "leyPoint3Options", kind: "message", T: () => GameSetupLeyPointOptions }
        ]);
    }
    create(value?: PartialMessage<GameInitLeylineDrawResults>): GameInitLeylineDrawResults {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GameInitLeylineDrawResults>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GameInitLeylineDrawResults): GameInitLeylineDrawResults {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* GameSetupLeyPointOptions leyPoint1Options */ 1:
                    message.leyPoint1Options = GameSetupLeyPointOptions.internalBinaryRead(reader, reader.uint32(), options, message.leyPoint1Options);
                    break;
                case /* GameSetupLeyPointOptions leyPoint2Options */ 2:
                    message.leyPoint2Options = GameSetupLeyPointOptions.internalBinaryRead(reader, reader.uint32(), options, message.leyPoint2Options);
                    break;
                case /* GameSetupLeyPointOptions leyPoint3Options */ 3:
                    message.leyPoint3Options = GameSetupLeyPointOptions.internalBinaryRead(reader, reader.uint32(), options, message.leyPoint3Options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GameInitLeylineDrawResults, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* GameSetupLeyPointOptions leyPoint1Options = 1; */
        if (message.leyPoint1Options)
            GameSetupLeyPointOptions.internalBinaryWrite(message.leyPoint1Options, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* GameSetupLeyPointOptions leyPoint2Options = 2; */
        if (message.leyPoint2Options)
            GameSetupLeyPointOptions.internalBinaryWrite(message.leyPoint2Options, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* GameSetupLeyPointOptions leyPoint3Options = 3; */
        if (message.leyPoint3Options)
            GameSetupLeyPointOptions.internalBinaryWrite(message.leyPoint3Options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GameInitLeylineDrawResults
 */
export const GameInitLeylineDrawResults = new GameInitLeylineDrawResults$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TotemAndMonumentVetoPlayerChoices$Type extends MessageType<TotemAndMonumentVetoPlayerChoices> {
    constructor() {
        super("TotemAndMonumentVetoPlayerChoices", [
            { no: 1, name: "selectedTotem1Id", kind: "message", T: () => TotemPbId },
            { no: 2, name: "selectedTotem2Id", kind: "message", T: () => TotemPbId },
            { no: 3, name: "vetoedMonumentLeylineDistance", kind: "enum", T: () => ["LeylineDistanceFromSource", LeylineDistanceFromSource] }
        ]);
    }
    create(value?: PartialMessage<TotemAndMonumentVetoPlayerChoices>): TotemAndMonumentVetoPlayerChoices {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.vetoedMonumentLeylineDistance = 0;
        if (value !== undefined)
            reflectionMergePartial<TotemAndMonumentVetoPlayerChoices>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TotemAndMonumentVetoPlayerChoices): TotemAndMonumentVetoPlayerChoices {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* TotemPbId selectedTotem1Id */ 1:
                    message.selectedTotem1Id = TotemPbId.internalBinaryRead(reader, reader.uint32(), options, message.selectedTotem1Id);
                    break;
                case /* TotemPbId selectedTotem2Id */ 2:
                    message.selectedTotem2Id = TotemPbId.internalBinaryRead(reader, reader.uint32(), options, message.selectedTotem2Id);
                    break;
                case /* LeylineDistanceFromSource vetoedMonumentLeylineDistance */ 3:
                    message.vetoedMonumentLeylineDistance = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TotemAndMonumentVetoPlayerChoices, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* TotemPbId selectedTotem1Id = 1; */
        if (message.selectedTotem1Id)
            TotemPbId.internalBinaryWrite(message.selectedTotem1Id, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* TotemPbId selectedTotem2Id = 2; */
        if (message.selectedTotem2Id)
            TotemPbId.internalBinaryWrite(message.selectedTotem2Id, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* LeylineDistanceFromSource vetoedMonumentLeylineDistance = 3; */
        if (message.vetoedMonumentLeylineDistance !== 0)
            writer.tag(3, WireType.Varint).int32(message.vetoedMonumentLeylineDistance);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TotemAndMonumentVetoPlayerChoices
 */
export const TotemAndMonumentVetoPlayerChoices = new TotemAndMonumentVetoPlayerChoices$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerClanPlacements$Type extends MessageType<PlayerClanPlacements> {
    constructor() {
        super("PlayerClanPlacements", [
            { no: 1, name: "leyline1ClanId", kind: "message", T: () => ClanCardDefPbId },
            { no: 2, name: "leyline2ClanId", kind: "message", T: () => ClanCardDefPbId },
            { no: 3, name: "leyline3ClanId", kind: "message", T: () => ClanCardDefPbId }
        ]);
    }
    create(value?: PartialMessage<PlayerClanPlacements>): PlayerClanPlacements {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<PlayerClanPlacements>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerClanPlacements): PlayerClanPlacements {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ClanCardDefPbId leyline1ClanId */ 1:
                    message.leyline1ClanId = ClanCardDefPbId.internalBinaryRead(reader, reader.uint32(), options, message.leyline1ClanId);
                    break;
                case /* ClanCardDefPbId leyline2ClanId */ 2:
                    message.leyline2ClanId = ClanCardDefPbId.internalBinaryRead(reader, reader.uint32(), options, message.leyline2ClanId);
                    break;
                case /* ClanCardDefPbId leyline3ClanId */ 3:
                    message.leyline3ClanId = ClanCardDefPbId.internalBinaryRead(reader, reader.uint32(), options, message.leyline3ClanId);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerClanPlacements, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ClanCardDefPbId leyline1ClanId = 1; */
        if (message.leyline1ClanId)
            ClanCardDefPbId.internalBinaryWrite(message.leyline1ClanId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* ClanCardDefPbId leyline2ClanId = 2; */
        if (message.leyline2ClanId)
            ClanCardDefPbId.internalBinaryWrite(message.leyline2ClanId, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* ClanCardDefPbId leyline3ClanId = 3; */
        if (message.leyline3ClanId)
            ClanCardDefPbId.internalBinaryWrite(message.leyline3ClanId, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PlayerClanPlacements
 */
export const PlayerClanPlacements = new PlayerClanPlacements$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GameInitSetup$Type extends MessageType<GameInitSetup> {
    constructor() {
        super("GameInitSetup", [
            { no: 1, name: "leylineDrawResults", kind: "message", T: () => GameInitLeylineDrawResults },
            { no: 4, name: "defaultOptPlayerTotemAndMonumentVetoChoices", kind: "message", T: () => TotemAndMonumentVetoPlayerChoices },
            { no: 5, name: "defaultOsbPlayerTotemAndMonumentVetoChoices", kind: "message", T: () => TotemAndMonumentVetoPlayerChoices },
            { no: 6, name: "defaultOptPlayerClanPlacements", kind: "message", T: () => PlayerClanPlacements },
            { no: 7, name: "defaultOsbPlayerClanPlacements", kind: "message", T: () => PlayerClanPlacements }
        ]);
    }
    create(value?: PartialMessage<GameInitSetup>): GameInitSetup {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GameInitSetup>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GameInitSetup): GameInitSetup {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* GameInitLeylineDrawResults leylineDrawResults */ 1:
                    message.leylineDrawResults = GameInitLeylineDrawResults.internalBinaryRead(reader, reader.uint32(), options, message.leylineDrawResults);
                    break;
                case /* TotemAndMonumentVetoPlayerChoices defaultOptPlayerTotemAndMonumentVetoChoices */ 4:
                    message.defaultOptPlayerTotemAndMonumentVetoChoices = TotemAndMonumentVetoPlayerChoices.internalBinaryRead(reader, reader.uint32(), options, message.defaultOptPlayerTotemAndMonumentVetoChoices);
                    break;
                case /* TotemAndMonumentVetoPlayerChoices defaultOsbPlayerTotemAndMonumentVetoChoices */ 5:
                    message.defaultOsbPlayerTotemAndMonumentVetoChoices = TotemAndMonumentVetoPlayerChoices.internalBinaryRead(reader, reader.uint32(), options, message.defaultOsbPlayerTotemAndMonumentVetoChoices);
                    break;
                case /* PlayerClanPlacements defaultOptPlayerClanPlacements */ 6:
                    message.defaultOptPlayerClanPlacements = PlayerClanPlacements.internalBinaryRead(reader, reader.uint32(), options, message.defaultOptPlayerClanPlacements);
                    break;
                case /* PlayerClanPlacements defaultOsbPlayerClanPlacements */ 7:
                    message.defaultOsbPlayerClanPlacements = PlayerClanPlacements.internalBinaryRead(reader, reader.uint32(), options, message.defaultOsbPlayerClanPlacements);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GameInitSetup, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* GameInitLeylineDrawResults leylineDrawResults = 1; */
        if (message.leylineDrawResults)
            GameInitLeylineDrawResults.internalBinaryWrite(message.leylineDrawResults, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* TotemAndMonumentVetoPlayerChoices defaultOptPlayerTotemAndMonumentVetoChoices = 4; */
        if (message.defaultOptPlayerTotemAndMonumentVetoChoices)
            TotemAndMonumentVetoPlayerChoices.internalBinaryWrite(message.defaultOptPlayerTotemAndMonumentVetoChoices, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* TotemAndMonumentVetoPlayerChoices defaultOsbPlayerTotemAndMonumentVetoChoices = 5; */
        if (message.defaultOsbPlayerTotemAndMonumentVetoChoices)
            TotemAndMonumentVetoPlayerChoices.internalBinaryWrite(message.defaultOsbPlayerTotemAndMonumentVetoChoices, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* PlayerClanPlacements defaultOptPlayerClanPlacements = 6; */
        if (message.defaultOptPlayerClanPlacements)
            PlayerClanPlacements.internalBinaryWrite(message.defaultOptPlayerClanPlacements, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* PlayerClanPlacements defaultOsbPlayerClanPlacements = 7; */
        if (message.defaultOsbPlayerClanPlacements)
            PlayerClanPlacements.internalBinaryWrite(message.defaultOsbPlayerClanPlacements, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GameInitSetup
 */
export const GameInitSetup = new GameInitSetup$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GameInitPickTotemsAndMonumentVetoResult$Type extends MessageType<GameInitPickTotemsAndMonumentVetoResult> {
    constructor() {
        super("GameInitPickTotemsAndMonumentVetoResult", [
            { no: 1, name: "finalOptPlayerTotemAndMonumentVetoChoices", kind: "message", T: () => TotemAndMonumentVetoPlayerChoices },
            { no: 2, name: "finalOsbPlayerTotemAndMonumentVetoChoices", kind: "message", T: () => TotemAndMonumentVetoPlayerChoices },
            { no: 3, name: "finalMonuments", kind: "message", T: () => GameBoardMonuments }
        ]);
    }
    create(value?: PartialMessage<GameInitPickTotemsAndMonumentVetoResult>): GameInitPickTotemsAndMonumentVetoResult {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GameInitPickTotemsAndMonumentVetoResult>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GameInitPickTotemsAndMonumentVetoResult): GameInitPickTotemsAndMonumentVetoResult {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* TotemAndMonumentVetoPlayerChoices finalOptPlayerTotemAndMonumentVetoChoices */ 1:
                    message.finalOptPlayerTotemAndMonumentVetoChoices = TotemAndMonumentVetoPlayerChoices.internalBinaryRead(reader, reader.uint32(), options, message.finalOptPlayerTotemAndMonumentVetoChoices);
                    break;
                case /* TotemAndMonumentVetoPlayerChoices finalOsbPlayerTotemAndMonumentVetoChoices */ 2:
                    message.finalOsbPlayerTotemAndMonumentVetoChoices = TotemAndMonumentVetoPlayerChoices.internalBinaryRead(reader, reader.uint32(), options, message.finalOsbPlayerTotemAndMonumentVetoChoices);
                    break;
                case /* GameBoardMonuments finalMonuments */ 3:
                    message.finalMonuments = GameBoardMonuments.internalBinaryRead(reader, reader.uint32(), options, message.finalMonuments);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GameInitPickTotemsAndMonumentVetoResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* TotemAndMonumentVetoPlayerChoices finalOptPlayerTotemAndMonumentVetoChoices = 1; */
        if (message.finalOptPlayerTotemAndMonumentVetoChoices)
            TotemAndMonumentVetoPlayerChoices.internalBinaryWrite(message.finalOptPlayerTotemAndMonumentVetoChoices, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* TotemAndMonumentVetoPlayerChoices finalOsbPlayerTotemAndMonumentVetoChoices = 2; */
        if (message.finalOsbPlayerTotemAndMonumentVetoChoices)
            TotemAndMonumentVetoPlayerChoices.internalBinaryWrite(message.finalOsbPlayerTotemAndMonumentVetoChoices, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* GameBoardMonuments finalMonuments = 3; */
        if (message.finalMonuments)
            GameBoardMonuments.internalBinaryWrite(message.finalMonuments, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GameInitPickTotemsAndMonumentVetoResult
 */
export const GameInitPickTotemsAndMonumentVetoResult = new GameInitPickTotemsAndMonumentVetoResult$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GameInitPlaceClansResult$Type extends MessageType<GameInitPlaceClansResult> {
    constructor() {
        super("GameInitPlaceClansResult", [
            { no: 1, name: "optPlayerClanPlacements", kind: "message", T: () => PlayerClanPlacements },
            { no: 2, name: "osbPlayerClanPlacements", kind: "message", T: () => PlayerClanPlacements }
        ]);
    }
    create(value?: PartialMessage<GameInitPlaceClansResult>): GameInitPlaceClansResult {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GameInitPlaceClansResult>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GameInitPlaceClansResult): GameInitPlaceClansResult {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* PlayerClanPlacements optPlayerClanPlacements */ 1:
                    message.optPlayerClanPlacements = PlayerClanPlacements.internalBinaryRead(reader, reader.uint32(), options, message.optPlayerClanPlacements);
                    break;
                case /* PlayerClanPlacements osbPlayerClanPlacements */ 2:
                    message.osbPlayerClanPlacements = PlayerClanPlacements.internalBinaryRead(reader, reader.uint32(), options, message.osbPlayerClanPlacements);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GameInitPlaceClansResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* PlayerClanPlacements optPlayerClanPlacements = 1; */
        if (message.optPlayerClanPlacements)
            PlayerClanPlacements.internalBinaryWrite(message.optPlayerClanPlacements, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* PlayerClanPlacements osbPlayerClanPlacements = 2; */
        if (message.osbPlayerClanPlacements)
            PlayerClanPlacements.internalBinaryWrite(message.osbPlayerClanPlacements, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GameInitPlaceClansResult
 */
export const GameInitPlaceClansResult = new GameInitPlaceClansResult$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DrawFamilyCardsResults$Type extends MessageType<DrawFamilyCardsResults> {
    constructor() {
        super("DrawFamilyCardsResults", [
            { no: 1, name: "familyAId", kind: "message", T: () => FamilyCardInstancePbId },
            { no: 2, name: "familyBId", kind: "message", T: () => FamilyCardInstancePbId },
            { no: 3, name: "familyCId", kind: "message", T: () => FamilyCardInstancePbId },
            { no: 10, name: "numCardsRemainingInPile", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<DrawFamilyCardsResults>): DrawFamilyCardsResults {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.numCardsRemainingInPile = 0;
        if (value !== undefined)
            reflectionMergePartial<DrawFamilyCardsResults>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DrawFamilyCardsResults): DrawFamilyCardsResults {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* FamilyCardInstancePbId familyAId */ 1:
                    message.familyAId = FamilyCardInstancePbId.internalBinaryRead(reader, reader.uint32(), options, message.familyAId);
                    break;
                case /* FamilyCardInstancePbId familyBId */ 2:
                    message.familyBId = FamilyCardInstancePbId.internalBinaryRead(reader, reader.uint32(), options, message.familyBId);
                    break;
                case /* FamilyCardInstancePbId familyCId */ 3:
                    message.familyCId = FamilyCardInstancePbId.internalBinaryRead(reader, reader.uint32(), options, message.familyCId);
                    break;
                case /* uint32 numCardsRemainingInPile */ 10:
                    message.numCardsRemainingInPile = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DrawFamilyCardsResults, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* FamilyCardInstancePbId familyAId = 1; */
        if (message.familyAId)
            FamilyCardInstancePbId.internalBinaryWrite(message.familyAId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* FamilyCardInstancePbId familyBId = 2; */
        if (message.familyBId)
            FamilyCardInstancePbId.internalBinaryWrite(message.familyBId, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* FamilyCardInstancePbId familyCId = 3; */
        if (message.familyCId)
            FamilyCardInstancePbId.internalBinaryWrite(message.familyCId, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* uint32 numCardsRemainingInPile = 10; */
        if (message.numCardsRemainingInPile !== 0)
            writer.tag(10, WireType.Varint).uint32(message.numCardsRemainingInPile);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DrawFamilyCardsResults
 */
export const DrawFamilyCardsResults = new DrawFamilyCardsResults$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FullGameFamilyDrawResults$Type extends MessageType<FullGameFamilyDrawResults> {
    constructor() {
        super("FullGameFamilyDrawResults", [
            { no: 1, name: "familyCardDrawSets", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DrawFamilyCardsResults }
        ]);
    }
    create(value?: PartialMessage<FullGameFamilyDrawResults>): FullGameFamilyDrawResults {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.familyCardDrawSets = [];
        if (value !== undefined)
            reflectionMergePartial<FullGameFamilyDrawResults>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FullGameFamilyDrawResults): FullGameFamilyDrawResults {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated DrawFamilyCardsResults familyCardDrawSets */ 1:
                    message.familyCardDrawSets.push(DrawFamilyCardsResults.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FullGameFamilyDrawResults, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated DrawFamilyCardsResults familyCardDrawSets = 1; */
        for (let i = 0; i < message.familyCardDrawSets.length; i++)
            DrawFamilyCardsResults.internalBinaryWrite(message.familyCardDrawSets[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message FullGameFamilyDrawResults
 */
export const FullGameFamilyDrawResults = new FullGameFamilyDrawResults$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AllPlayerFamilyChoiceDefaults$Type extends MessageType<AllPlayerFamilyChoiceDefaults> {
    constructor() {
        super("AllPlayerFamilyChoiceDefaults", [
            { no: 1, name: "optPlayerCardDefault", kind: "enum", T: () => ["PlayerCardChoicePb", PlayerCardChoicePb] },
            { no: 2, name: "osbPlayerCardDefault", kind: "enum", T: () => ["PlayerCardChoicePb", PlayerCardChoicePb] }
        ]);
    }
    create(value?: PartialMessage<AllPlayerFamilyChoiceDefaults>): AllPlayerFamilyChoiceDefaults {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.optPlayerCardDefault = 0;
        message.osbPlayerCardDefault = 0;
        if (value !== undefined)
            reflectionMergePartial<AllPlayerFamilyChoiceDefaults>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AllPlayerFamilyChoiceDefaults): AllPlayerFamilyChoiceDefaults {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* PlayerCardChoicePb optPlayerCardDefault */ 1:
                    message.optPlayerCardDefault = reader.int32();
                    break;
                case /* PlayerCardChoicePb osbPlayerCardDefault */ 2:
                    message.osbPlayerCardDefault = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AllPlayerFamilyChoiceDefaults, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* PlayerCardChoicePb optPlayerCardDefault = 1; */
        if (message.optPlayerCardDefault !== 0)
            writer.tag(1, WireType.Varint).int32(message.optPlayerCardDefault);
        /* PlayerCardChoicePb osbPlayerCardDefault = 2; */
        if (message.osbPlayerCardDefault !== 0)
            writer.tag(2, WireType.Varint).int32(message.osbPlayerCardDefault);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message AllPlayerFamilyChoiceDefaults
 */
export const AllPlayerFamilyChoiceDefaults = new AllPlayerFamilyChoiceDefaults$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AllPlayerFamilyChoiceResults$Type extends MessageType<AllPlayerFamilyChoiceResults> {
    constructor() {
        super("AllPlayerFamilyChoiceResults", [
            { no: 1, name: "optPlayerCardChoice", kind: "enum", T: () => ["PlayerCardChoicePb", PlayerCardChoicePb] },
            { no: 2, name: "osbPlayerCardChoice", kind: "enum", T: () => ["PlayerCardChoicePb", PlayerCardChoicePb] }
        ]);
    }
    create(value?: PartialMessage<AllPlayerFamilyChoiceResults>): AllPlayerFamilyChoiceResults {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.optPlayerCardChoice = 0;
        message.osbPlayerCardChoice = 0;
        if (value !== undefined)
            reflectionMergePartial<AllPlayerFamilyChoiceResults>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AllPlayerFamilyChoiceResults): AllPlayerFamilyChoiceResults {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* PlayerCardChoicePb optPlayerCardChoice */ 1:
                    message.optPlayerCardChoice = reader.int32();
                    break;
                case /* PlayerCardChoicePb osbPlayerCardChoice */ 2:
                    message.osbPlayerCardChoice = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AllPlayerFamilyChoiceResults, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* PlayerCardChoicePb optPlayerCardChoice = 1; */
        if (message.optPlayerCardChoice !== 0)
            writer.tag(1, WireType.Varint).int32(message.optPlayerCardChoice);
        /* PlayerCardChoicePb osbPlayerCardChoice = 2; */
        if (message.osbPlayerCardChoice !== 0)
            writer.tag(2, WireType.Varint).int32(message.osbPlayerCardChoice);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message AllPlayerFamilyChoiceResults
 */
export const AllPlayerFamilyChoiceResults = new AllPlayerFamilyChoiceResults$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerFamilyPlacementOptions$Type extends MessageType<PlayerFamilyPlacementOptions> {
    constructor() {
        super("PlayerFamilyPlacementOptions", [
            { no: 1, name: "leylineDistanceOptions", kind: "enum", repeat: 1 /*RepeatType.PACKED*/, T: () => ["LeylineDistanceFromSource", LeylineDistanceFromSource] }
        ]);
    }
    create(value?: PartialMessage<PlayerFamilyPlacementOptions>): PlayerFamilyPlacementOptions {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.leylineDistanceOptions = [];
        if (value !== undefined)
            reflectionMergePartial<PlayerFamilyPlacementOptions>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerFamilyPlacementOptions): PlayerFamilyPlacementOptions {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated LeylineDistanceFromSource leylineDistanceOptions */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.leylineDistanceOptions.push(reader.int32());
                    else
                        message.leylineDistanceOptions.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerFamilyPlacementOptions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated LeylineDistanceFromSource leylineDistanceOptions = 1; */
        if (message.leylineDistanceOptions.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.leylineDistanceOptions.length; i++)
                writer.int32(message.leylineDistanceOptions[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PlayerFamilyPlacementOptions
 */
export const PlayerFamilyPlacementOptions = new PlayerFamilyPlacementOptions$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AllPlayerFamilyPlacementOptions$Type extends MessageType<AllPlayerFamilyPlacementOptions> {
    constructor() {
        super("AllPlayerFamilyPlacementOptions", [
            { no: 1, name: "optPlayerFamilyPlacementOptions", kind: "message", T: () => PlayerFamilyPlacementOptions },
            { no: 2, name: "osbPlayerFamilyPlacementOptions", kind: "message", T: () => PlayerFamilyPlacementOptions }
        ]);
    }
    create(value?: PartialMessage<AllPlayerFamilyPlacementOptions>): AllPlayerFamilyPlacementOptions {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<AllPlayerFamilyPlacementOptions>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AllPlayerFamilyPlacementOptions): AllPlayerFamilyPlacementOptions {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* PlayerFamilyPlacementOptions optPlayerFamilyPlacementOptions */ 1:
                    message.optPlayerFamilyPlacementOptions = PlayerFamilyPlacementOptions.internalBinaryRead(reader, reader.uint32(), options, message.optPlayerFamilyPlacementOptions);
                    break;
                case /* PlayerFamilyPlacementOptions osbPlayerFamilyPlacementOptions */ 2:
                    message.osbPlayerFamilyPlacementOptions = PlayerFamilyPlacementOptions.internalBinaryRead(reader, reader.uint32(), options, message.osbPlayerFamilyPlacementOptions);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AllPlayerFamilyPlacementOptions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* PlayerFamilyPlacementOptions optPlayerFamilyPlacementOptions = 1; */
        if (message.optPlayerFamilyPlacementOptions)
            PlayerFamilyPlacementOptions.internalBinaryWrite(message.optPlayerFamilyPlacementOptions, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* PlayerFamilyPlacementOptions osbPlayerFamilyPlacementOptions = 2; */
        if (message.osbPlayerFamilyPlacementOptions)
            PlayerFamilyPlacementOptions.internalBinaryWrite(message.osbPlayerFamilyPlacementOptions, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message AllPlayerFamilyPlacementOptions
 */
export const AllPlayerFamilyPlacementOptions = new AllPlayerFamilyPlacementOptions$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerFamilyPlacementDefaults$Type extends MessageType<PlayerFamilyPlacementDefaults> {
    constructor() {
        super("PlayerFamilyPlacementDefaults", [
            { no: 1, name: "leylineDistance", kind: "enum", T: () => ["LeylineDistanceFromSource", LeylineDistanceFromSource] }
        ]);
    }
    create(value?: PartialMessage<PlayerFamilyPlacementDefaults>): PlayerFamilyPlacementDefaults {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.leylineDistance = 0;
        if (value !== undefined)
            reflectionMergePartial<PlayerFamilyPlacementDefaults>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerFamilyPlacementDefaults): PlayerFamilyPlacementDefaults {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* LeylineDistanceFromSource leylineDistance */ 1:
                    message.leylineDistance = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerFamilyPlacementDefaults, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* LeylineDistanceFromSource leylineDistance = 1; */
        if (message.leylineDistance !== 0)
            writer.tag(1, WireType.Varint).int32(message.leylineDistance);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PlayerFamilyPlacementDefaults
 */
export const PlayerFamilyPlacementDefaults = new PlayerFamilyPlacementDefaults$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AllPlayerFamilyPlacementDefaults$Type extends MessageType<AllPlayerFamilyPlacementDefaults> {
    constructor() {
        super("AllPlayerFamilyPlacementDefaults", [
            { no: 1, name: "optPlayerFamilyPlacementDefaults", kind: "message", T: () => PlayerFamilyPlacementDefaults },
            { no: 2, name: "osbPlayerFamilyPlacementDefaults", kind: "message", T: () => PlayerFamilyPlacementDefaults }
        ]);
    }
    create(value?: PartialMessage<AllPlayerFamilyPlacementDefaults>): AllPlayerFamilyPlacementDefaults {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<AllPlayerFamilyPlacementDefaults>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AllPlayerFamilyPlacementDefaults): AllPlayerFamilyPlacementDefaults {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* PlayerFamilyPlacementDefaults optPlayerFamilyPlacementDefaults */ 1:
                    message.optPlayerFamilyPlacementDefaults = PlayerFamilyPlacementDefaults.internalBinaryRead(reader, reader.uint32(), options, message.optPlayerFamilyPlacementDefaults);
                    break;
                case /* PlayerFamilyPlacementDefaults osbPlayerFamilyPlacementDefaults */ 2:
                    message.osbPlayerFamilyPlacementDefaults = PlayerFamilyPlacementDefaults.internalBinaryRead(reader, reader.uint32(), options, message.osbPlayerFamilyPlacementDefaults);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AllPlayerFamilyPlacementDefaults, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* PlayerFamilyPlacementDefaults optPlayerFamilyPlacementDefaults = 1; */
        if (message.optPlayerFamilyPlacementDefaults)
            PlayerFamilyPlacementDefaults.internalBinaryWrite(message.optPlayerFamilyPlacementDefaults, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* PlayerFamilyPlacementDefaults osbPlayerFamilyPlacementDefaults = 2; */
        if (message.osbPlayerFamilyPlacementDefaults)
            PlayerFamilyPlacementDefaults.internalBinaryWrite(message.osbPlayerFamilyPlacementDefaults, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message AllPlayerFamilyPlacementDefaults
 */
export const AllPlayerFamilyPlacementDefaults = new AllPlayerFamilyPlacementDefaults$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerFamilyPlacementResults$Type extends MessageType<PlayerFamilyPlacementResults> {
    constructor() {
        super("PlayerFamilyPlacementResults", [
            { no: 1, name: "leylineDistance", kind: "enum", T: () => ["LeylineDistanceFromSource", LeylineDistanceFromSource] }
        ]);
    }
    create(value?: PartialMessage<PlayerFamilyPlacementResults>): PlayerFamilyPlacementResults {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.leylineDistance = 0;
        if (value !== undefined)
            reflectionMergePartial<PlayerFamilyPlacementResults>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerFamilyPlacementResults): PlayerFamilyPlacementResults {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* LeylineDistanceFromSource leylineDistance */ 1:
                    message.leylineDistance = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerFamilyPlacementResults, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* LeylineDistanceFromSource leylineDistance = 1; */
        if (message.leylineDistance !== 0)
            writer.tag(1, WireType.Varint).int32(message.leylineDistance);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PlayerFamilyPlacementResults
 */
export const PlayerFamilyPlacementResults = new PlayerFamilyPlacementResults$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AllPlayerFamilyPlacementResults$Type extends MessageType<AllPlayerFamilyPlacementResults> {
    constructor() {
        super("AllPlayerFamilyPlacementResults", [
            { no: 1, name: "optPlayerFamilyPlacementResults", kind: "message", T: () => PlayerFamilyPlacementResults },
            { no: 2, name: "osbPlayerFamilyPlacementResults", kind: "message", T: () => PlayerFamilyPlacementResults }
        ]);
    }
    create(value?: PartialMessage<AllPlayerFamilyPlacementResults>): AllPlayerFamilyPlacementResults {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<AllPlayerFamilyPlacementResults>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AllPlayerFamilyPlacementResults): AllPlayerFamilyPlacementResults {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* PlayerFamilyPlacementResults optPlayerFamilyPlacementResults */ 1:
                    message.optPlayerFamilyPlacementResults = PlayerFamilyPlacementResults.internalBinaryRead(reader, reader.uint32(), options, message.optPlayerFamilyPlacementResults);
                    break;
                case /* PlayerFamilyPlacementResults osbPlayerFamilyPlacementResults */ 2:
                    message.osbPlayerFamilyPlacementResults = PlayerFamilyPlacementResults.internalBinaryRead(reader, reader.uint32(), options, message.osbPlayerFamilyPlacementResults);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AllPlayerFamilyPlacementResults, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* PlayerFamilyPlacementResults optPlayerFamilyPlacementResults = 1; */
        if (message.optPlayerFamilyPlacementResults)
            PlayerFamilyPlacementResults.internalBinaryWrite(message.optPlayerFamilyPlacementResults, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* PlayerFamilyPlacementResults osbPlayerFamilyPlacementResults = 2; */
        if (message.osbPlayerFamilyPlacementResults)
            PlayerFamilyPlacementResults.internalBinaryWrite(message.osbPlayerFamilyPlacementResults, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message AllPlayerFamilyPlacementResults
 */
export const AllPlayerFamilyPlacementResults = new AllPlayerFamilyPlacementResults$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ModalitySelection$Type extends MessageType<ModalitySelection> {
    constructor() {
        super("ModalitySelection", [
            { no: 1, name: "cardCoordinate", kind: "message", T: () => MyBoardPlayerSideCoordinate },
            { no: 2, name: "modalityIndex", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ModalitySelection>): ModalitySelection {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.modalityIndex = 0;
        if (value !== undefined)
            reflectionMergePartial<ModalitySelection>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ModalitySelection): ModalitySelection {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* MyBoardPlayerSideCoordinate cardCoordinate */ 1:
                    message.cardCoordinate = MyBoardPlayerSideCoordinate.internalBinaryRead(reader, reader.uint32(), options, message.cardCoordinate);
                    break;
                case /* uint32 modalityIndex */ 2:
                    message.modalityIndex = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ModalitySelection, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* MyBoardPlayerSideCoordinate cardCoordinate = 1; */
        if (message.cardCoordinate)
            MyBoardPlayerSideCoordinate.internalBinaryWrite(message.cardCoordinate, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint32 modalityIndex = 2; */
        if (message.modalityIndex !== 0)
            writer.tag(2, WireType.Varint).uint32(message.modalityIndex);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ModalitySelection
 */
export const ModalitySelection = new ModalitySelection$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerModalitySelectionDefaults$Type extends MessageType<PlayerModalitySelectionDefaults> {
    constructor() {
        super("PlayerModalitySelectionDefaults", [
            { no: 1, name: "dummyValue", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PlayerModalitySelectionDefaults>): PlayerModalitySelectionDefaults {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.dummyValue = "";
        if (value !== undefined)
            reflectionMergePartial<PlayerModalitySelectionDefaults>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerModalitySelectionDefaults): PlayerModalitySelectionDefaults {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string dummyValue */ 1:
                    message.dummyValue = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerModalitySelectionDefaults, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string dummyValue = 1; */
        if (message.dummyValue !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.dummyValue);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PlayerModalitySelectionDefaults
 */
export const PlayerModalitySelectionDefaults = new PlayerModalitySelectionDefaults$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AllPlayerModalitySelectionDefaults$Type extends MessageType<AllPlayerModalitySelectionDefaults> {
    constructor() {
        super("AllPlayerModalitySelectionDefaults", [
            { no: 1, name: "optPlayerNonZeroIndexModalitySelectionDefaults", kind: "message", T: () => PlayerModalitySelectionDefaults },
            { no: 2, name: "osbPlayerNonZeroIndexModalitySelectionDefaults", kind: "message", T: () => PlayerModalitySelectionDefaults }
        ]);
    }
    create(value?: PartialMessage<AllPlayerModalitySelectionDefaults>): AllPlayerModalitySelectionDefaults {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<AllPlayerModalitySelectionDefaults>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AllPlayerModalitySelectionDefaults): AllPlayerModalitySelectionDefaults {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* PlayerModalitySelectionDefaults optPlayerNonZeroIndexModalitySelectionDefaults */ 1:
                    message.optPlayerNonZeroIndexModalitySelectionDefaults = PlayerModalitySelectionDefaults.internalBinaryRead(reader, reader.uint32(), options, message.optPlayerNonZeroIndexModalitySelectionDefaults);
                    break;
                case /* PlayerModalitySelectionDefaults osbPlayerNonZeroIndexModalitySelectionDefaults */ 2:
                    message.osbPlayerNonZeroIndexModalitySelectionDefaults = PlayerModalitySelectionDefaults.internalBinaryRead(reader, reader.uint32(), options, message.osbPlayerNonZeroIndexModalitySelectionDefaults);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AllPlayerModalitySelectionDefaults, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* PlayerModalitySelectionDefaults optPlayerNonZeroIndexModalitySelectionDefaults = 1; */
        if (message.optPlayerNonZeroIndexModalitySelectionDefaults)
            PlayerModalitySelectionDefaults.internalBinaryWrite(message.optPlayerNonZeroIndexModalitySelectionDefaults, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* PlayerModalitySelectionDefaults osbPlayerNonZeroIndexModalitySelectionDefaults = 2; */
        if (message.osbPlayerNonZeroIndexModalitySelectionDefaults)
            PlayerModalitySelectionDefaults.internalBinaryWrite(message.osbPlayerNonZeroIndexModalitySelectionDefaults, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message AllPlayerModalitySelectionDefaults
 */
export const AllPlayerModalitySelectionDefaults = new AllPlayerModalitySelectionDefaults$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerModalitySelectionResults$Type extends MessageType<PlayerModalitySelectionResults> {
    constructor() {
        super("PlayerModalitySelectionResults", [
            { no: 1, name: "nonZeroIndexModeSelections", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ModalitySelection }
        ]);
    }
    create(value?: PartialMessage<PlayerModalitySelectionResults>): PlayerModalitySelectionResults {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.nonZeroIndexModeSelections = [];
        if (value !== undefined)
            reflectionMergePartial<PlayerModalitySelectionResults>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerModalitySelectionResults): PlayerModalitySelectionResults {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated ModalitySelection nonZeroIndexModeSelections */ 1:
                    message.nonZeroIndexModeSelections.push(ModalitySelection.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerModalitySelectionResults, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated ModalitySelection nonZeroIndexModeSelections = 1; */
        for (let i = 0; i < message.nonZeroIndexModeSelections.length; i++)
            ModalitySelection.internalBinaryWrite(message.nonZeroIndexModeSelections[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PlayerModalitySelectionResults
 */
export const PlayerModalitySelectionResults = new PlayerModalitySelectionResults$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AllPlayerModalitySelectionResults$Type extends MessageType<AllPlayerModalitySelectionResults> {
    constructor() {
        super("AllPlayerModalitySelectionResults", [
            { no: 1, name: "optPlayerModalitySelectionResults", kind: "message", T: () => PlayerModalitySelectionResults },
            { no: 2, name: "osbPlayerModalitySelectionResults", kind: "message", T: () => PlayerModalitySelectionResults }
        ]);
    }
    create(value?: PartialMessage<AllPlayerModalitySelectionResults>): AllPlayerModalitySelectionResults {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<AllPlayerModalitySelectionResults>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AllPlayerModalitySelectionResults): AllPlayerModalitySelectionResults {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* PlayerModalitySelectionResults optPlayerModalitySelectionResults */ 1:
                    message.optPlayerModalitySelectionResults = PlayerModalitySelectionResults.internalBinaryRead(reader, reader.uint32(), options, message.optPlayerModalitySelectionResults);
                    break;
                case /* PlayerModalitySelectionResults osbPlayerModalitySelectionResults */ 2:
                    message.osbPlayerModalitySelectionResults = PlayerModalitySelectionResults.internalBinaryRead(reader, reader.uint32(), options, message.osbPlayerModalitySelectionResults);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AllPlayerModalitySelectionResults, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* PlayerModalitySelectionResults optPlayerModalitySelectionResults = 1; */
        if (message.optPlayerModalitySelectionResults)
            PlayerModalitySelectionResults.internalBinaryWrite(message.optPlayerModalitySelectionResults, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* PlayerModalitySelectionResults osbPlayerModalitySelectionResults = 2; */
        if (message.osbPlayerModalitySelectionResults)
            PlayerModalitySelectionResults.internalBinaryWrite(message.osbPlayerModalitySelectionResults, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message AllPlayerModalitySelectionResults
 */
export const AllPlayerModalitySelectionResults = new AllPlayerModalitySelectionResults$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MarkerConversion$Type extends MessageType<MarkerConversion> {
    constructor() {
        super("MarkerConversion", [
            { no: 1, name: "sourceType", kind: "enum", T: () => ["MwMarkerType", MwMarkerType] },
            { no: 2, name: "destinationType", kind: "enum", T: () => ["MwMarkerType", MwMarkerType] },
            { no: 3, name: "sourceAmount", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "destinationAmount", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<MarkerConversion>): MarkerConversion {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.sourceType = 0;
        message.destinationType = 0;
        message.sourceAmount = 0;
        message.destinationAmount = 0;
        if (value !== undefined)
            reflectionMergePartial<MarkerConversion>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MarkerConversion): MarkerConversion {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* MwMarkerType sourceType */ 1:
                    message.sourceType = reader.int32();
                    break;
                case /* MwMarkerType destinationType */ 2:
                    message.destinationType = reader.int32();
                    break;
                case /* uint32 sourceAmount */ 3:
                    message.sourceAmount = reader.uint32();
                    break;
                case /* uint32 destinationAmount */ 4:
                    message.destinationAmount = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MarkerConversion, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* MwMarkerType sourceType = 1; */
        if (message.sourceType !== 0)
            writer.tag(1, WireType.Varint).int32(message.sourceType);
        /* MwMarkerType destinationType = 2; */
        if (message.destinationType !== 0)
            writer.tag(2, WireType.Varint).int32(message.destinationType);
        /* uint32 sourceAmount = 3; */
        if (message.sourceAmount !== 0)
            writer.tag(3, WireType.Varint).uint32(message.sourceAmount);
        /* uint32 destinationAmount = 4; */
        if (message.destinationAmount !== 0)
            writer.tag(4, WireType.Varint).uint32(message.destinationAmount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MarkerConversion
 */
export const MarkerConversion = new MarkerConversion$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MarkerAllocation$Type extends MessageType<MarkerAllocation> {
    constructor() {
        super("MarkerAllocation", [
            { no: 1, name: "markerType", kind: "enum", T: () => ["MwMarkerType", MwMarkerType] }
        ]);
    }
    create(value?: PartialMessage<MarkerAllocation>): MarkerAllocation {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.markerType = 0;
        if (value !== undefined)
            reflectionMergePartial<MarkerAllocation>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MarkerAllocation): MarkerAllocation {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* MwMarkerType markerType */ 1:
                    message.markerType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MarkerAllocation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* MwMarkerType markerType = 1; */
        if (message.markerType !== 0)
            writer.tag(1, WireType.Varint).int32(message.markerType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MarkerAllocation
 */
export const MarkerAllocation = new MarkerAllocation$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TribeMarkerConversions$Type extends MessageType<TribeMarkerConversions> {
    constructor() {
        super("TribeMarkerConversions", [
            { no: 1, name: "conversions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MarkerConversion }
        ]);
    }
    create(value?: PartialMessage<TribeMarkerConversions>): TribeMarkerConversions {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.conversions = [];
        if (value !== undefined)
            reflectionMergePartial<TribeMarkerConversions>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TribeMarkerConversions): TribeMarkerConversions {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated MarkerConversion conversions */ 1:
                    message.conversions.push(MarkerConversion.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TribeMarkerConversions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated MarkerConversion conversions = 1; */
        for (let i = 0; i < message.conversions.length; i++)
            MarkerConversion.internalBinaryWrite(message.conversions[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TribeMarkerConversions
 */
export const TribeMarkerConversions = new TribeMarkerConversions$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TribeToClanMarkerAllocations$Type extends MessageType<TribeToClanMarkerAllocations> {
    constructor() {
        super("TribeToClanMarkerAllocations", [
            { no: 1, name: "tribeToClanAtLeyline1Allocations", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MarkerAllocation },
            { no: 2, name: "tribeToClanAtLeyline2Allocations", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MarkerAllocation },
            { no: 3, name: "tribeToClanAtLeyline3Allocations", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MarkerAllocation }
        ]);
    }
    create(value?: PartialMessage<TribeToClanMarkerAllocations>): TribeToClanMarkerAllocations {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.tribeToClanAtLeyline1Allocations = [];
        message.tribeToClanAtLeyline2Allocations = [];
        message.tribeToClanAtLeyline3Allocations = [];
        if (value !== undefined)
            reflectionMergePartial<TribeToClanMarkerAllocations>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TribeToClanMarkerAllocations): TribeToClanMarkerAllocations {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated MarkerAllocation tribeToClanAtLeyline1Allocations */ 1:
                    message.tribeToClanAtLeyline1Allocations.push(MarkerAllocation.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated MarkerAllocation tribeToClanAtLeyline2Allocations */ 2:
                    message.tribeToClanAtLeyline2Allocations.push(MarkerAllocation.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated MarkerAllocation tribeToClanAtLeyline3Allocations */ 3:
                    message.tribeToClanAtLeyline3Allocations.push(MarkerAllocation.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TribeToClanMarkerAllocations, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated MarkerAllocation tribeToClanAtLeyline1Allocations = 1; */
        for (let i = 0; i < message.tribeToClanAtLeyline1Allocations.length; i++)
            MarkerAllocation.internalBinaryWrite(message.tribeToClanAtLeyline1Allocations[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated MarkerAllocation tribeToClanAtLeyline2Allocations = 2; */
        for (let i = 0; i < message.tribeToClanAtLeyline2Allocations.length; i++)
            MarkerAllocation.internalBinaryWrite(message.tribeToClanAtLeyline2Allocations[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated MarkerAllocation tribeToClanAtLeyline3Allocations = 3; */
        for (let i = 0; i < message.tribeToClanAtLeyline3Allocations.length; i++)
            MarkerAllocation.internalBinaryWrite(message.tribeToClanAtLeyline3Allocations[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TribeToClanMarkerAllocations
 */
export const TribeToClanMarkerAllocations = new TribeToClanMarkerAllocations$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClanMarkerConversions$Type extends MessageType<ClanMarkerConversions> {
    constructor() {
        super("ClanMarkerConversions", [
            { no: 1, name: "clanAtLeyline1Conversions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MarkerConversion },
            { no: 2, name: "clanAtLeyline2Conversions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MarkerConversion },
            { no: 3, name: "clanAtLeyline3Conversions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MarkerConversion }
        ]);
    }
    create(value?: PartialMessage<ClanMarkerConversions>): ClanMarkerConversions {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.clanAtLeyline1Conversions = [];
        message.clanAtLeyline2Conversions = [];
        message.clanAtLeyline3Conversions = [];
        if (value !== undefined)
            reflectionMergePartial<ClanMarkerConversions>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClanMarkerConversions): ClanMarkerConversions {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated MarkerConversion clanAtLeyline1Conversions */ 1:
                    message.clanAtLeyline1Conversions.push(MarkerConversion.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated MarkerConversion clanAtLeyline2Conversions */ 2:
                    message.clanAtLeyline2Conversions.push(MarkerConversion.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated MarkerConversion clanAtLeyline3Conversions */ 3:
                    message.clanAtLeyline3Conversions.push(MarkerConversion.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClanMarkerConversions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated MarkerConversion clanAtLeyline1Conversions = 1; */
        for (let i = 0; i < message.clanAtLeyline1Conversions.length; i++)
            MarkerConversion.internalBinaryWrite(message.clanAtLeyline1Conversions[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated MarkerConversion clanAtLeyline2Conversions = 2; */
        for (let i = 0; i < message.clanAtLeyline2Conversions.length; i++)
            MarkerConversion.internalBinaryWrite(message.clanAtLeyline2Conversions[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated MarkerConversion clanAtLeyline3Conversions = 3; */
        for (let i = 0; i < message.clanAtLeyline3Conversions.length; i++)
            MarkerConversion.internalBinaryWrite(message.clanAtLeyline3Conversions[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ClanMarkerConversions
 */
export const ClanMarkerConversions = new ClanMarkerConversions$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerPurchaseAndPlaceMarkersSelections$Type extends MessageType<PlayerPurchaseAndPlaceMarkersSelections> {
    constructor() {
        super("PlayerPurchaseAndPlaceMarkersSelections", [
            { no: 1, name: "tribeMarkerConversions", kind: "message", T: () => TribeMarkerConversions },
            { no: 2, name: "tribeToClanMarkerAllocations", kind: "message", T: () => TribeToClanMarkerAllocations },
            { no: 3, name: "clanMarkerConversions", kind: "message", T: () => ClanMarkerConversions }
        ]);
    }
    create(value?: PartialMessage<PlayerPurchaseAndPlaceMarkersSelections>): PlayerPurchaseAndPlaceMarkersSelections {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<PlayerPurchaseAndPlaceMarkersSelections>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerPurchaseAndPlaceMarkersSelections): PlayerPurchaseAndPlaceMarkersSelections {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* TribeMarkerConversions tribeMarkerConversions */ 1:
                    message.tribeMarkerConversions = TribeMarkerConversions.internalBinaryRead(reader, reader.uint32(), options, message.tribeMarkerConversions);
                    break;
                case /* TribeToClanMarkerAllocations tribeToClanMarkerAllocations */ 2:
                    message.tribeToClanMarkerAllocations = TribeToClanMarkerAllocations.internalBinaryRead(reader, reader.uint32(), options, message.tribeToClanMarkerAllocations);
                    break;
                case /* ClanMarkerConversions clanMarkerConversions */ 3:
                    message.clanMarkerConversions = ClanMarkerConversions.internalBinaryRead(reader, reader.uint32(), options, message.clanMarkerConversions);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerPurchaseAndPlaceMarkersSelections, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* TribeMarkerConversions tribeMarkerConversions = 1; */
        if (message.tribeMarkerConversions)
            TribeMarkerConversions.internalBinaryWrite(message.tribeMarkerConversions, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* TribeToClanMarkerAllocations tribeToClanMarkerAllocations = 2; */
        if (message.tribeToClanMarkerAllocations)
            TribeToClanMarkerAllocations.internalBinaryWrite(message.tribeToClanMarkerAllocations, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* ClanMarkerConversions clanMarkerConversions = 3; */
        if (message.clanMarkerConversions)
            ClanMarkerConversions.internalBinaryWrite(message.clanMarkerConversions, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PlayerPurchaseAndPlaceMarkersSelections
 */
export const PlayerPurchaseAndPlaceMarkersSelections = new PlayerPurchaseAndPlaceMarkersSelections$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AllPlayerPurchaseAndPlaceMarkersDefaults$Type extends MessageType<AllPlayerPurchaseAndPlaceMarkersDefaults> {
    constructor() {
        super("AllPlayerPurchaseAndPlaceMarkersDefaults", [
            { no: 1, name: "optPlayerPurchaseAndPlaceMarkersSelections", kind: "message", T: () => PlayerPurchaseAndPlaceMarkersSelections },
            { no: 2, name: "osbPlayerPurchaseAndPlaceMarkersSelections", kind: "message", T: () => PlayerPurchaseAndPlaceMarkersSelections }
        ]);
    }
    create(value?: PartialMessage<AllPlayerPurchaseAndPlaceMarkersDefaults>): AllPlayerPurchaseAndPlaceMarkersDefaults {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<AllPlayerPurchaseAndPlaceMarkersDefaults>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AllPlayerPurchaseAndPlaceMarkersDefaults): AllPlayerPurchaseAndPlaceMarkersDefaults {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* PlayerPurchaseAndPlaceMarkersSelections optPlayerPurchaseAndPlaceMarkersSelections */ 1:
                    message.optPlayerPurchaseAndPlaceMarkersSelections = PlayerPurchaseAndPlaceMarkersSelections.internalBinaryRead(reader, reader.uint32(), options, message.optPlayerPurchaseAndPlaceMarkersSelections);
                    break;
                case /* PlayerPurchaseAndPlaceMarkersSelections osbPlayerPurchaseAndPlaceMarkersSelections */ 2:
                    message.osbPlayerPurchaseAndPlaceMarkersSelections = PlayerPurchaseAndPlaceMarkersSelections.internalBinaryRead(reader, reader.uint32(), options, message.osbPlayerPurchaseAndPlaceMarkersSelections);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AllPlayerPurchaseAndPlaceMarkersDefaults, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* PlayerPurchaseAndPlaceMarkersSelections optPlayerPurchaseAndPlaceMarkersSelections = 1; */
        if (message.optPlayerPurchaseAndPlaceMarkersSelections)
            PlayerPurchaseAndPlaceMarkersSelections.internalBinaryWrite(message.optPlayerPurchaseAndPlaceMarkersSelections, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* PlayerPurchaseAndPlaceMarkersSelections osbPlayerPurchaseAndPlaceMarkersSelections = 2; */
        if (message.osbPlayerPurchaseAndPlaceMarkersSelections)
            PlayerPurchaseAndPlaceMarkersSelections.internalBinaryWrite(message.osbPlayerPurchaseAndPlaceMarkersSelections, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message AllPlayerPurchaseAndPlaceMarkersDefaults
 */
export const AllPlayerPurchaseAndPlaceMarkersDefaults = new AllPlayerPurchaseAndPlaceMarkersDefaults$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AllPlayerPurchaseAndPlaceMarkersResults$Type extends MessageType<AllPlayerPurchaseAndPlaceMarkersResults> {
    constructor() {
        super("AllPlayerPurchaseAndPlaceMarkersResults", [
            { no: 1, name: "optPlayerPurchaseAndPlaceMarkersSelections", kind: "message", T: () => PlayerPurchaseAndPlaceMarkersSelections },
            { no: 2, name: "osbPlayerPurchaseAndPlaceMarkersSelections", kind: "message", T: () => PlayerPurchaseAndPlaceMarkersSelections }
        ]);
    }
    create(value?: PartialMessage<AllPlayerPurchaseAndPlaceMarkersResults>): AllPlayerPurchaseAndPlaceMarkersResults {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<AllPlayerPurchaseAndPlaceMarkersResults>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AllPlayerPurchaseAndPlaceMarkersResults): AllPlayerPurchaseAndPlaceMarkersResults {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* PlayerPurchaseAndPlaceMarkersSelections optPlayerPurchaseAndPlaceMarkersSelections */ 1:
                    message.optPlayerPurchaseAndPlaceMarkersSelections = PlayerPurchaseAndPlaceMarkersSelections.internalBinaryRead(reader, reader.uint32(), options, message.optPlayerPurchaseAndPlaceMarkersSelections);
                    break;
                case /* PlayerPurchaseAndPlaceMarkersSelections osbPlayerPurchaseAndPlaceMarkersSelections */ 2:
                    message.osbPlayerPurchaseAndPlaceMarkersSelections = PlayerPurchaseAndPlaceMarkersSelections.internalBinaryRead(reader, reader.uint32(), options, message.osbPlayerPurchaseAndPlaceMarkersSelections);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AllPlayerPurchaseAndPlaceMarkersResults, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* PlayerPurchaseAndPlaceMarkersSelections optPlayerPurchaseAndPlaceMarkersSelections = 1; */
        if (message.optPlayerPurchaseAndPlaceMarkersSelections)
            PlayerPurchaseAndPlaceMarkersSelections.internalBinaryWrite(message.optPlayerPurchaseAndPlaceMarkersSelections, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* PlayerPurchaseAndPlaceMarkersSelections osbPlayerPurchaseAndPlaceMarkersSelections = 2; */
        if (message.osbPlayerPurchaseAndPlaceMarkersSelections)
            PlayerPurchaseAndPlaceMarkersSelections.internalBinaryWrite(message.osbPlayerPurchaseAndPlaceMarkersSelections, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message AllPlayerPurchaseAndPlaceMarkersResults
 */
export const AllPlayerPurchaseAndPlaceMarkersResults = new AllPlayerPurchaseAndPlaceMarkersResults$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerTribeMarkerAllocation$Type extends MessageType<PlayerTribeMarkerAllocation> {
    constructor() {
        super("PlayerTribeMarkerAllocation", [
            { no: 1, name: "sourcePiece", kind: "message", T: () => MyBoardPlayerSideCoordinate },
            { no: 2, name: "destinationPiece", kind: "message", T: () => MyBoardPlayerSideCoordinate },
            { no: 3, name: "markerType", kind: "enum", T: () => ["MwMarkerType", MwMarkerType] },
            { no: 4, name: "sourceDecrement", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "destinationIncrement", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<PlayerTribeMarkerAllocation>): PlayerTribeMarkerAllocation {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.markerType = 0;
        message.sourceDecrement = 0;
        message.destinationIncrement = 0;
        if (value !== undefined)
            reflectionMergePartial<PlayerTribeMarkerAllocation>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerTribeMarkerAllocation): PlayerTribeMarkerAllocation {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* MyBoardPlayerSideCoordinate sourcePiece */ 1:
                    message.sourcePiece = MyBoardPlayerSideCoordinate.internalBinaryRead(reader, reader.uint32(), options, message.sourcePiece);
                    break;
                case /* MyBoardPlayerSideCoordinate destinationPiece */ 2:
                    message.destinationPiece = MyBoardPlayerSideCoordinate.internalBinaryRead(reader, reader.uint32(), options, message.destinationPiece);
                    break;
                case /* MwMarkerType markerType */ 3:
                    message.markerType = reader.int32();
                    break;
                case /* uint32 sourceDecrement */ 4:
                    message.sourceDecrement = reader.uint32();
                    break;
                case /* uint32 destinationIncrement */ 5:
                    message.destinationIncrement = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerTribeMarkerAllocation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* MyBoardPlayerSideCoordinate sourcePiece = 1; */
        if (message.sourcePiece)
            MyBoardPlayerSideCoordinate.internalBinaryWrite(message.sourcePiece, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* MyBoardPlayerSideCoordinate destinationPiece = 2; */
        if (message.destinationPiece)
            MyBoardPlayerSideCoordinate.internalBinaryWrite(message.destinationPiece, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* MwMarkerType markerType = 3; */
        if (message.markerType !== 0)
            writer.tag(3, WireType.Varint).int32(message.markerType);
        /* uint32 sourceDecrement = 4; */
        if (message.sourceDecrement !== 0)
            writer.tag(4, WireType.Varint).uint32(message.sourceDecrement);
        /* uint32 destinationIncrement = 5; */
        if (message.destinationIncrement !== 0)
            writer.tag(5, WireType.Varint).uint32(message.destinationIncrement);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PlayerTribeMarkerAllocation
 */
export const PlayerTribeMarkerAllocation = new PlayerTribeMarkerAllocation$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerTribeMarkerStockpile$Type extends MessageType<PlayerTribeMarkerStockpile> {
    constructor() {
        super("PlayerTribeMarkerStockpile", [
            { no: 1, name: "markers", kind: "enum", repeat: 1 /*RepeatType.PACKED*/, T: () => ["MwMarkerType", MwMarkerType] }
        ]);
    }
    create(value?: PartialMessage<PlayerTribeMarkerStockpile>): PlayerTribeMarkerStockpile {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.markers = [];
        if (value !== undefined)
            reflectionMergePartial<PlayerTribeMarkerStockpile>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerTribeMarkerStockpile): PlayerTribeMarkerStockpile {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated MwMarkerType markers */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.markers.push(reader.int32());
                    else
                        message.markers.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerTribeMarkerStockpile, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated MwMarkerType markers = 1; */
        if (message.markers.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.markers.length; i++)
                writer.int32(message.markers[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PlayerTribeMarkerStockpile
 */
export const PlayerTribeMarkerStockpile = new PlayerTribeMarkerStockpile$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerClanMarkerStockpile$Type extends MessageType<PlayerClanMarkerStockpile> {
    constructor() {
        super("PlayerClanMarkerStockpile", [
            { no: 1, name: "markers", kind: "enum", repeat: 1 /*RepeatType.PACKED*/, T: () => ["MwMarkerType", MwMarkerType] }
        ]);
    }
    create(value?: PartialMessage<PlayerClanMarkerStockpile>): PlayerClanMarkerStockpile {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.markers = [];
        if (value !== undefined)
            reflectionMergePartial<PlayerClanMarkerStockpile>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerClanMarkerStockpile): PlayerClanMarkerStockpile {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated MwMarkerType markers */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.markers.push(reader.int32());
                    else
                        message.markers.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerClanMarkerStockpile, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated MwMarkerType markers = 1; */
        if (message.markers.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.markers.length; i++)
                writer.int32(message.markers[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PlayerClanMarkerStockpile
 */
export const PlayerClanMarkerStockpile = new PlayerClanMarkerStockpile$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerMarkerStockpiles$Type extends MessageType<PlayerMarkerStockpiles> {
    constructor() {
        super("PlayerMarkerStockpiles", [
            { no: 1, name: "tribeStockpile", kind: "message", T: () => PlayerTribeMarkerStockpile },
            { no: 2, name: "leyline1ClanStockpile", kind: "message", T: () => PlayerClanMarkerStockpile },
            { no: 3, name: "leyline2ClanStockpile", kind: "message", T: () => PlayerClanMarkerStockpile },
            { no: 4, name: "leyline3ClanStockpile", kind: "message", T: () => PlayerClanMarkerStockpile }
        ]);
    }
    create(value?: PartialMessage<PlayerMarkerStockpiles>): PlayerMarkerStockpiles {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<PlayerMarkerStockpiles>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerMarkerStockpiles): PlayerMarkerStockpiles {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* PlayerTribeMarkerStockpile tribeStockpile */ 1:
                    message.tribeStockpile = PlayerTribeMarkerStockpile.internalBinaryRead(reader, reader.uint32(), options, message.tribeStockpile);
                    break;
                case /* PlayerClanMarkerStockpile leyline1ClanStockpile */ 2:
                    message.leyline1ClanStockpile = PlayerClanMarkerStockpile.internalBinaryRead(reader, reader.uint32(), options, message.leyline1ClanStockpile);
                    break;
                case /* PlayerClanMarkerStockpile leyline2ClanStockpile */ 3:
                    message.leyline2ClanStockpile = PlayerClanMarkerStockpile.internalBinaryRead(reader, reader.uint32(), options, message.leyline2ClanStockpile);
                    break;
                case /* PlayerClanMarkerStockpile leyline3ClanStockpile */ 4:
                    message.leyline3ClanStockpile = PlayerClanMarkerStockpile.internalBinaryRead(reader, reader.uint32(), options, message.leyline3ClanStockpile);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerMarkerStockpiles, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* PlayerTribeMarkerStockpile tribeStockpile = 1; */
        if (message.tribeStockpile)
            PlayerTribeMarkerStockpile.internalBinaryWrite(message.tribeStockpile, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* PlayerClanMarkerStockpile leyline1ClanStockpile = 2; */
        if (message.leyline1ClanStockpile)
            PlayerClanMarkerStockpile.internalBinaryWrite(message.leyline1ClanStockpile, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* PlayerClanMarkerStockpile leyline2ClanStockpile = 3; */
        if (message.leyline2ClanStockpile)
            PlayerClanMarkerStockpile.internalBinaryWrite(message.leyline2ClanStockpile, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* PlayerClanMarkerStockpile leyline3ClanStockpile = 4; */
        if (message.leyline3ClanStockpile)
            PlayerClanMarkerStockpile.internalBinaryWrite(message.leyline3ClanStockpile, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PlayerMarkerStockpiles
 */
export const PlayerMarkerStockpiles = new PlayerMarkerStockpiles$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ManaflowResults$Type extends MessageType<ManaflowResults> {
    constructor() {
        super("ManaflowResults", [
            { no: 1, name: "optPlayerManaflowOutcomeStockpiles", kind: "message", T: () => PlayerMarkerStockpiles },
            { no: 2, name: "osbPlayerManaflowOutcomeStockpiles", kind: "message", T: () => PlayerMarkerStockpiles }
        ]);
    }
    create(value?: PartialMessage<ManaflowResults>): ManaflowResults {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ManaflowResults>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ManaflowResults): ManaflowResults {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* PlayerMarkerStockpiles optPlayerManaflowOutcomeStockpiles */ 1:
                    message.optPlayerManaflowOutcomeStockpiles = PlayerMarkerStockpiles.internalBinaryRead(reader, reader.uint32(), options, message.optPlayerManaflowOutcomeStockpiles);
                    break;
                case /* PlayerMarkerStockpiles osbPlayerManaflowOutcomeStockpiles */ 2:
                    message.osbPlayerManaflowOutcomeStockpiles = PlayerMarkerStockpiles.internalBinaryRead(reader, reader.uint32(), options, message.osbPlayerManaflowOutcomeStockpiles);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ManaflowResults, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* PlayerMarkerStockpiles optPlayerManaflowOutcomeStockpiles = 1; */
        if (message.optPlayerManaflowOutcomeStockpiles)
            PlayerMarkerStockpiles.internalBinaryWrite(message.optPlayerManaflowOutcomeStockpiles, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* PlayerMarkerStockpiles osbPlayerManaflowOutcomeStockpiles = 2; */
        if (message.osbPlayerManaflowOutcomeStockpiles)
            PlayerMarkerStockpiles.internalBinaryWrite(message.osbPlayerManaflowOutcomeStockpiles, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ManaflowResults
 */
export const ManaflowResults = new ManaflowResults$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WageClanConflictsResults$Type extends MessageType<WageClanConflictsResults> {
    constructor() {
        super("WageClanConflictsResults", [
            { no: 1, name: "optPlayerConflictOutcomeStockpiles", kind: "message", T: () => PlayerMarkerStockpiles },
            { no: 2, name: "osbPlayerConflictOutcomeStockpiles", kind: "message", T: () => PlayerMarkerStockpiles }
        ]);
    }
    create(value?: PartialMessage<WageClanConflictsResults>): WageClanConflictsResults {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<WageClanConflictsResults>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WageClanConflictsResults): WageClanConflictsResults {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* PlayerMarkerStockpiles optPlayerConflictOutcomeStockpiles */ 1:
                    message.optPlayerConflictOutcomeStockpiles = PlayerMarkerStockpiles.internalBinaryRead(reader, reader.uint32(), options, message.optPlayerConflictOutcomeStockpiles);
                    break;
                case /* PlayerMarkerStockpiles osbPlayerConflictOutcomeStockpiles */ 2:
                    message.osbPlayerConflictOutcomeStockpiles = PlayerMarkerStockpiles.internalBinaryRead(reader, reader.uint32(), options, message.osbPlayerConflictOutcomeStockpiles);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WageClanConflictsResults, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* PlayerMarkerStockpiles optPlayerConflictOutcomeStockpiles = 1; */
        if (message.optPlayerConflictOutcomeStockpiles)
            PlayerMarkerStockpiles.internalBinaryWrite(message.optPlayerConflictOutcomeStockpiles, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* PlayerMarkerStockpiles osbPlayerConflictOutcomeStockpiles = 2; */
        if (message.osbPlayerConflictOutcomeStockpiles)
            PlayerMarkerStockpiles.internalBinaryWrite(message.osbPlayerConflictOutcomeStockpiles, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WageClanConflictsResults
 */
export const WageClanConflictsResults = new WageClanConflictsResults$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PowerMonumentsResults$Type extends MessageType<PowerMonumentsResults> {
    constructor() {
        super("PowerMonumentsResults", [
            { no: 1, name: "dummyValue", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PowerMonumentsResults>): PowerMonumentsResults {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.dummyValue = "";
        if (value !== undefined)
            reflectionMergePartial<PowerMonumentsResults>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PowerMonumentsResults): PowerMonumentsResults {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string dummyValue */ 1:
                    message.dummyValue = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PowerMonumentsResults, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string dummyValue = 1; */
        if (message.dummyValue !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.dummyValue);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PowerMonumentsResults
 */
export const PowerMonumentsResults = new PowerMonumentsResults$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ConsolidateMarkersResults$Type extends MessageType<ConsolidateMarkersResults> {
    constructor() {
        super("ConsolidateMarkersResults", [
            { no: 1, name: "dummyValue", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ConsolidateMarkersResults>): ConsolidateMarkersResults {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.dummyValue = "";
        if (value !== undefined)
            reflectionMergePartial<ConsolidateMarkersResults>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ConsolidateMarkersResults): ConsolidateMarkersResults {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string dummyValue */ 1:
                    message.dummyValue = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ConsolidateMarkersResults, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string dummyValue = 1; */
        if (message.dummyValue !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.dummyValue);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ConsolidateMarkersResults
 */
export const ConsolidateMarkersResults = new ConsolidateMarkersResults$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerFamilyPlacementAndModalitySelections$Type extends MessageType<PlayerFamilyPlacementAndModalitySelections> {
    constructor() {
        super("PlayerFamilyPlacementAndModalitySelections", [
            { no: 1, name: "playerFamilyPlacementResults", kind: "message", T: () => PlayerFamilyPlacementResults },
            { no: 2, name: "modalitySelections", kind: "message", T: () => PlayerModalitySelectionResults }
        ]);
    }
    create(value?: PartialMessage<PlayerFamilyPlacementAndModalitySelections>): PlayerFamilyPlacementAndModalitySelections {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<PlayerFamilyPlacementAndModalitySelections>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerFamilyPlacementAndModalitySelections): PlayerFamilyPlacementAndModalitySelections {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* PlayerFamilyPlacementResults playerFamilyPlacementResults */ 1:
                    message.playerFamilyPlacementResults = PlayerFamilyPlacementResults.internalBinaryRead(reader, reader.uint32(), options, message.playerFamilyPlacementResults);
                    break;
                case /* PlayerModalitySelectionResults modalitySelections */ 2:
                    message.modalitySelections = PlayerModalitySelectionResults.internalBinaryRead(reader, reader.uint32(), options, message.modalitySelections);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerFamilyPlacementAndModalitySelections, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* PlayerFamilyPlacementResults playerFamilyPlacementResults = 1; */
        if (message.playerFamilyPlacementResults)
            PlayerFamilyPlacementResults.internalBinaryWrite(message.playerFamilyPlacementResults, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* PlayerModalitySelectionResults modalitySelections = 2; */
        if (message.modalitySelections)
            PlayerModalitySelectionResults.internalBinaryWrite(message.modalitySelections, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PlayerFamilyPlacementAndModalitySelections
 */
export const PlayerFamilyPlacementAndModalitySelections = new PlayerFamilyPlacementAndModalitySelections$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ManawavePlayerMoveSelection$Type extends MessageType<ManawavePlayerMoveSelection> {
    constructor() {
        super("ManawavePlayerMoveSelection", [
            { no: 1, name: "totemAndMonumentVetoPlayerChoices", kind: "message", oneof: "move", T: () => TotemAndMonumentVetoPlayerChoices },
            { no: 2, name: "playerClanPlacements", kind: "message", oneof: "move", T: () => PlayerClanPlacements },
            { no: 3, name: "playerCardChoice", kind: "enum", oneof: "move", T: () => ["PlayerCardChoicePb", PlayerCardChoicePb] },
            { no: 4, name: "playerFamilyPlacementAndModalitySelections", kind: "message", oneof: "move", T: () => PlayerFamilyPlacementAndModalitySelections },
            { no: 5, name: "playerPurchaseAndPlaceMarkersSelections", kind: "message", oneof: "move", T: () => PlayerPurchaseAndPlaceMarkersSelections }
        ]);
    }
    create(value?: PartialMessage<ManawavePlayerMoveSelection>): ManawavePlayerMoveSelection {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.move = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<ManawavePlayerMoveSelection>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ManawavePlayerMoveSelection): ManawavePlayerMoveSelection {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* TotemAndMonumentVetoPlayerChoices totemAndMonumentVetoPlayerChoices */ 1:
                    message.move = {
                        oneofKind: "totemAndMonumentVetoPlayerChoices",
                        totemAndMonumentVetoPlayerChoices: TotemAndMonumentVetoPlayerChoices.internalBinaryRead(reader, reader.uint32(), options, (message.move as any).totemAndMonumentVetoPlayerChoices)
                    };
                    break;
                case /* PlayerClanPlacements playerClanPlacements */ 2:
                    message.move = {
                        oneofKind: "playerClanPlacements",
                        playerClanPlacements: PlayerClanPlacements.internalBinaryRead(reader, reader.uint32(), options, (message.move as any).playerClanPlacements)
                    };
                    break;
                case /* PlayerCardChoicePb playerCardChoice */ 3:
                    message.move = {
                        oneofKind: "playerCardChoice",
                        playerCardChoice: reader.int32()
                    };
                    break;
                case /* PlayerFamilyPlacementAndModalitySelections playerFamilyPlacementAndModalitySelections */ 4:
                    message.move = {
                        oneofKind: "playerFamilyPlacementAndModalitySelections",
                        playerFamilyPlacementAndModalitySelections: PlayerFamilyPlacementAndModalitySelections.internalBinaryRead(reader, reader.uint32(), options, (message.move as any).playerFamilyPlacementAndModalitySelections)
                    };
                    break;
                case /* PlayerPurchaseAndPlaceMarkersSelections playerPurchaseAndPlaceMarkersSelections */ 5:
                    message.move = {
                        oneofKind: "playerPurchaseAndPlaceMarkersSelections",
                        playerPurchaseAndPlaceMarkersSelections: PlayerPurchaseAndPlaceMarkersSelections.internalBinaryRead(reader, reader.uint32(), options, (message.move as any).playerPurchaseAndPlaceMarkersSelections)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ManawavePlayerMoveSelection, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* TotemAndMonumentVetoPlayerChoices totemAndMonumentVetoPlayerChoices = 1; */
        if (message.move.oneofKind === "totemAndMonumentVetoPlayerChoices")
            TotemAndMonumentVetoPlayerChoices.internalBinaryWrite(message.move.totemAndMonumentVetoPlayerChoices, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* PlayerClanPlacements playerClanPlacements = 2; */
        if (message.move.oneofKind === "playerClanPlacements")
            PlayerClanPlacements.internalBinaryWrite(message.move.playerClanPlacements, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* PlayerCardChoicePb playerCardChoice = 3; */
        if (message.move.oneofKind === "playerCardChoice")
            writer.tag(3, WireType.Varint).int32(message.move.playerCardChoice);
        /* PlayerFamilyPlacementAndModalitySelections playerFamilyPlacementAndModalitySelections = 4; */
        if (message.move.oneofKind === "playerFamilyPlacementAndModalitySelections")
            PlayerFamilyPlacementAndModalitySelections.internalBinaryWrite(message.move.playerFamilyPlacementAndModalitySelections, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* PlayerPurchaseAndPlaceMarkersSelections playerPurchaseAndPlaceMarkersSelections = 5; */
        if (message.move.oneofKind === "playerPurchaseAndPlaceMarkersSelections")
            PlayerPurchaseAndPlaceMarkersSelections.internalBinaryWrite(message.move.playerPurchaseAndPlaceMarkersSelections, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ManawavePlayerMoveSelection
 */
export const ManawavePlayerMoveSelection = new ManawavePlayerMoveSelection$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ManawavePlayerMove$Type extends MessageType<ManawavePlayerMove> {
    constructor() {
        super("ManawavePlayerMove", [
            { no: 1, name: "move", kind: "message", T: () => ManawavePlayerMoveSelection },
            { no: 2, name: "playerSide", kind: "enum", T: () => ["PlayerSideId", PlayerSideId] }
        ]);
    }
    create(value?: PartialMessage<ManawavePlayerMove>): ManawavePlayerMove {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.playerSide = 0;
        if (value !== undefined)
            reflectionMergePartial<ManawavePlayerMove>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ManawavePlayerMove): ManawavePlayerMove {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ManawavePlayerMoveSelection move */ 1:
                    message.move = ManawavePlayerMoveSelection.internalBinaryRead(reader, reader.uint32(), options, message.move);
                    break;
                case /* PlayerSideId playerSide */ 2:
                    message.playerSide = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ManawavePlayerMove, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ManawavePlayerMoveSelection move = 1; */
        if (message.move)
            ManawavePlayerMoveSelection.internalBinaryWrite(message.move, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* PlayerSideId playerSide = 2; */
        if (message.playerSide !== 0)
            writer.tag(2, WireType.Varint).int32(message.playerSide);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ManawavePlayerMove
 */
export const ManawavePlayerMove = new ManawavePlayerMove$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ManawaveRound$Type extends MessageType<ManawaveRound> {
    constructor() {
        super("ManawaveRound", [
            { no: 1, name: "roundProgress", kind: "enum", T: () => ["RoundProgress", RoundProgress] },
            { no: 10, name: "drawFamilyCardsResults", kind: "message", T: () => DrawFamilyCardsResults },
            { no: 11, name: "allPlayerFamilyChoiceDefaults", kind: "message", T: () => AllPlayerFamilyChoiceDefaults },
            { no: 12, name: "allPlayerFamilyChoiceResults", kind: "message", T: () => AllPlayerFamilyChoiceResults },
            { no: 20, name: "allPlayerFamilyPlacementOptions", kind: "message", T: () => AllPlayerFamilyPlacementOptions },
            { no: 21, name: "allPlayerFamilyPlacementDefaults", kind: "message", T: () => AllPlayerFamilyPlacementDefaults },
            { no: 22, name: "allPlayerFamilyPlacementResults", kind: "message", T: () => AllPlayerFamilyPlacementResults },
            { no: 30, name: "allPlayerModalitySelectionDefaults", kind: "message", T: () => AllPlayerModalitySelectionDefaults },
            { no: 31, name: "allPlayerModalitySelectionResults", kind: "message", T: () => AllPlayerModalitySelectionResults },
            { no: 40, name: "manaflowResults", kind: "message", T: () => ManaflowResults },
            { no: 50, name: "allPlayerPurchaseAndPlaceMarkersDefaults", kind: "message", T: () => AllPlayerPurchaseAndPlaceMarkersDefaults },
            { no: 51, name: "allPlayerPurchaseAndPlaceMarkersResults", kind: "message", T: () => AllPlayerPurchaseAndPlaceMarkersResults },
            { no: 60, name: "wageClanConflictsResults", kind: "message", T: () => WageClanConflictsResults },
            { no: 80, name: "powerMonumentsResults", kind: "message", T: () => PowerMonumentsResults },
            { no: 90, name: "consolidateMarkersResults", kind: "message", T: () => ConsolidateMarkersResults },
            { no: 100, name: "gameOutcome", kind: "enum", T: () => ["GameOutcome", GameOutcome] }
        ]);
    }
    create(value?: PartialMessage<ManawaveRound>): ManawaveRound {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.roundProgress = 0;
        message.gameOutcome = 0;
        if (value !== undefined)
            reflectionMergePartial<ManawaveRound>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ManawaveRound): ManawaveRound {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* RoundProgress roundProgress */ 1:
                    message.roundProgress = reader.int32();
                    break;
                case /* DrawFamilyCardsResults drawFamilyCardsResults */ 10:
                    message.drawFamilyCardsResults = DrawFamilyCardsResults.internalBinaryRead(reader, reader.uint32(), options, message.drawFamilyCardsResults);
                    break;
                case /* AllPlayerFamilyChoiceDefaults allPlayerFamilyChoiceDefaults */ 11:
                    message.allPlayerFamilyChoiceDefaults = AllPlayerFamilyChoiceDefaults.internalBinaryRead(reader, reader.uint32(), options, message.allPlayerFamilyChoiceDefaults);
                    break;
                case /* AllPlayerFamilyChoiceResults allPlayerFamilyChoiceResults */ 12:
                    message.allPlayerFamilyChoiceResults = AllPlayerFamilyChoiceResults.internalBinaryRead(reader, reader.uint32(), options, message.allPlayerFamilyChoiceResults);
                    break;
                case /* AllPlayerFamilyPlacementOptions allPlayerFamilyPlacementOptions */ 20:
                    message.allPlayerFamilyPlacementOptions = AllPlayerFamilyPlacementOptions.internalBinaryRead(reader, reader.uint32(), options, message.allPlayerFamilyPlacementOptions);
                    break;
                case /* AllPlayerFamilyPlacementDefaults allPlayerFamilyPlacementDefaults */ 21:
                    message.allPlayerFamilyPlacementDefaults = AllPlayerFamilyPlacementDefaults.internalBinaryRead(reader, reader.uint32(), options, message.allPlayerFamilyPlacementDefaults);
                    break;
                case /* AllPlayerFamilyPlacementResults allPlayerFamilyPlacementResults */ 22:
                    message.allPlayerFamilyPlacementResults = AllPlayerFamilyPlacementResults.internalBinaryRead(reader, reader.uint32(), options, message.allPlayerFamilyPlacementResults);
                    break;
                case /* AllPlayerModalitySelectionDefaults allPlayerModalitySelectionDefaults */ 30:
                    message.allPlayerModalitySelectionDefaults = AllPlayerModalitySelectionDefaults.internalBinaryRead(reader, reader.uint32(), options, message.allPlayerModalitySelectionDefaults);
                    break;
                case /* AllPlayerModalitySelectionResults allPlayerModalitySelectionResults */ 31:
                    message.allPlayerModalitySelectionResults = AllPlayerModalitySelectionResults.internalBinaryRead(reader, reader.uint32(), options, message.allPlayerModalitySelectionResults);
                    break;
                case /* ManaflowResults manaflowResults */ 40:
                    message.manaflowResults = ManaflowResults.internalBinaryRead(reader, reader.uint32(), options, message.manaflowResults);
                    break;
                case /* AllPlayerPurchaseAndPlaceMarkersDefaults allPlayerPurchaseAndPlaceMarkersDefaults */ 50:
                    message.allPlayerPurchaseAndPlaceMarkersDefaults = AllPlayerPurchaseAndPlaceMarkersDefaults.internalBinaryRead(reader, reader.uint32(), options, message.allPlayerPurchaseAndPlaceMarkersDefaults);
                    break;
                case /* AllPlayerPurchaseAndPlaceMarkersResults allPlayerPurchaseAndPlaceMarkersResults */ 51:
                    message.allPlayerPurchaseAndPlaceMarkersResults = AllPlayerPurchaseAndPlaceMarkersResults.internalBinaryRead(reader, reader.uint32(), options, message.allPlayerPurchaseAndPlaceMarkersResults);
                    break;
                case /* WageClanConflictsResults wageClanConflictsResults */ 60:
                    message.wageClanConflictsResults = WageClanConflictsResults.internalBinaryRead(reader, reader.uint32(), options, message.wageClanConflictsResults);
                    break;
                case /* PowerMonumentsResults powerMonumentsResults */ 80:
                    message.powerMonumentsResults = PowerMonumentsResults.internalBinaryRead(reader, reader.uint32(), options, message.powerMonumentsResults);
                    break;
                case /* ConsolidateMarkersResults consolidateMarkersResults */ 90:
                    message.consolidateMarkersResults = ConsolidateMarkersResults.internalBinaryRead(reader, reader.uint32(), options, message.consolidateMarkersResults);
                    break;
                case /* GameOutcome gameOutcome */ 100:
                    message.gameOutcome = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ManawaveRound, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* RoundProgress roundProgress = 1; */
        if (message.roundProgress !== 0)
            writer.tag(1, WireType.Varint).int32(message.roundProgress);
        /* DrawFamilyCardsResults drawFamilyCardsResults = 10; */
        if (message.drawFamilyCardsResults)
            DrawFamilyCardsResults.internalBinaryWrite(message.drawFamilyCardsResults, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* AllPlayerFamilyChoiceDefaults allPlayerFamilyChoiceDefaults = 11; */
        if (message.allPlayerFamilyChoiceDefaults)
            AllPlayerFamilyChoiceDefaults.internalBinaryWrite(message.allPlayerFamilyChoiceDefaults, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* AllPlayerFamilyChoiceResults allPlayerFamilyChoiceResults = 12; */
        if (message.allPlayerFamilyChoiceResults)
            AllPlayerFamilyChoiceResults.internalBinaryWrite(message.allPlayerFamilyChoiceResults, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* AllPlayerFamilyPlacementOptions allPlayerFamilyPlacementOptions = 20; */
        if (message.allPlayerFamilyPlacementOptions)
            AllPlayerFamilyPlacementOptions.internalBinaryWrite(message.allPlayerFamilyPlacementOptions, writer.tag(20, WireType.LengthDelimited).fork(), options).join();
        /* AllPlayerFamilyPlacementDefaults allPlayerFamilyPlacementDefaults = 21; */
        if (message.allPlayerFamilyPlacementDefaults)
            AllPlayerFamilyPlacementDefaults.internalBinaryWrite(message.allPlayerFamilyPlacementDefaults, writer.tag(21, WireType.LengthDelimited).fork(), options).join();
        /* AllPlayerFamilyPlacementResults allPlayerFamilyPlacementResults = 22; */
        if (message.allPlayerFamilyPlacementResults)
            AllPlayerFamilyPlacementResults.internalBinaryWrite(message.allPlayerFamilyPlacementResults, writer.tag(22, WireType.LengthDelimited).fork(), options).join();
        /* AllPlayerModalitySelectionDefaults allPlayerModalitySelectionDefaults = 30; */
        if (message.allPlayerModalitySelectionDefaults)
            AllPlayerModalitySelectionDefaults.internalBinaryWrite(message.allPlayerModalitySelectionDefaults, writer.tag(30, WireType.LengthDelimited).fork(), options).join();
        /* AllPlayerModalitySelectionResults allPlayerModalitySelectionResults = 31; */
        if (message.allPlayerModalitySelectionResults)
            AllPlayerModalitySelectionResults.internalBinaryWrite(message.allPlayerModalitySelectionResults, writer.tag(31, WireType.LengthDelimited).fork(), options).join();
        /* ManaflowResults manaflowResults = 40; */
        if (message.manaflowResults)
            ManaflowResults.internalBinaryWrite(message.manaflowResults, writer.tag(40, WireType.LengthDelimited).fork(), options).join();
        /* AllPlayerPurchaseAndPlaceMarkersDefaults allPlayerPurchaseAndPlaceMarkersDefaults = 50; */
        if (message.allPlayerPurchaseAndPlaceMarkersDefaults)
            AllPlayerPurchaseAndPlaceMarkersDefaults.internalBinaryWrite(message.allPlayerPurchaseAndPlaceMarkersDefaults, writer.tag(50, WireType.LengthDelimited).fork(), options).join();
        /* AllPlayerPurchaseAndPlaceMarkersResults allPlayerPurchaseAndPlaceMarkersResults = 51; */
        if (message.allPlayerPurchaseAndPlaceMarkersResults)
            AllPlayerPurchaseAndPlaceMarkersResults.internalBinaryWrite(message.allPlayerPurchaseAndPlaceMarkersResults, writer.tag(51, WireType.LengthDelimited).fork(), options).join();
        /* WageClanConflictsResults wageClanConflictsResults = 60; */
        if (message.wageClanConflictsResults)
            WageClanConflictsResults.internalBinaryWrite(message.wageClanConflictsResults, writer.tag(60, WireType.LengthDelimited).fork(), options).join();
        /* PowerMonumentsResults powerMonumentsResults = 80; */
        if (message.powerMonumentsResults)
            PowerMonumentsResults.internalBinaryWrite(message.powerMonumentsResults, writer.tag(80, WireType.LengthDelimited).fork(), options).join();
        /* ConsolidateMarkersResults consolidateMarkersResults = 90; */
        if (message.consolidateMarkersResults)
            ConsolidateMarkersResults.internalBinaryWrite(message.consolidateMarkersResults, writer.tag(90, WireType.LengthDelimited).fork(), options).join();
        /* GameOutcome gameOutcome = 100; */
        if (message.gameOutcome !== 0)
            writer.tag(100, WireType.Varint).int32(message.gameOutcome);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ManawaveRound
 */
export const ManawaveRound = new ManawaveRound$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GameOverResult$Type extends MessageType<GameOverResult> {
    constructor() {
        super("GameOverResult", [
            { no: 1, name: "gameOutcome", kind: "enum", T: () => ["GameOutcome", GameOutcome] }
        ]);
    }
    create(value?: PartialMessage<GameOverResult>): GameOverResult {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.gameOutcome = 0;
        if (value !== undefined)
            reflectionMergePartial<GameOverResult>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GameOverResult): GameOverResult {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* GameOutcome gameOutcome */ 1:
                    message.gameOutcome = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GameOverResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* GameOutcome gameOutcome = 1; */
        if (message.gameOutcome !== 0)
            writer.tag(1, WireType.Varint).int32(message.gameOutcome);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GameOverResult
 */
export const GameOverResult = new GameOverResult$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GameStatePb$Type extends MessageType<GameStatePb> {
    constructor() {
        super("GameStatePb", [
            { no: 1, name: "gamePhaseId", kind: "enum", T: () => ["GamePhaseId", GamePhaseId] },
            { no: 2, name: "initialConditions", kind: "message", T: () => InitialConditions },
            { no: 3, name: "playerRegistration", kind: "message", T: () => PlayerRegistration },
            { no: 20, name: "initGameSetup", kind: "message", T: () => GameInitSetup },
            { no: 21, name: "initPickTotemsAndMonumentVetoResult", kind: "message", T: () => GameInitPickTotemsAndMonumentVetoResult },
            { no: 22, name: "initPlaceClansResult", kind: "message", T: () => GameInitPlaceClansResult },
            { no: 30, name: "currentRound", kind: "message", T: () => ManawaveRound },
            { no: 31, name: "completedRounds", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ManawaveRound },
            { no: 40, name: "gameOverResult", kind: "message", T: () => GameOverResult }
        ]);
    }
    create(value?: PartialMessage<GameStatePb>): GameStatePb {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.gamePhaseId = 0;
        message.completedRounds = [];
        if (value !== undefined)
            reflectionMergePartial<GameStatePb>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GameStatePb): GameStatePb {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* GamePhaseId gamePhaseId */ 1:
                    message.gamePhaseId = reader.int32();
                    break;
                case /* InitialConditions initialConditions */ 2:
                    message.initialConditions = InitialConditions.internalBinaryRead(reader, reader.uint32(), options, message.initialConditions);
                    break;
                case /* PlayerRegistration playerRegistration */ 3:
                    message.playerRegistration = PlayerRegistration.internalBinaryRead(reader, reader.uint32(), options, message.playerRegistration);
                    break;
                case /* GameInitSetup initGameSetup */ 20:
                    message.initGameSetup = GameInitSetup.internalBinaryRead(reader, reader.uint32(), options, message.initGameSetup);
                    break;
                case /* GameInitPickTotemsAndMonumentVetoResult initPickTotemsAndMonumentVetoResult */ 21:
                    message.initPickTotemsAndMonumentVetoResult = GameInitPickTotemsAndMonumentVetoResult.internalBinaryRead(reader, reader.uint32(), options, message.initPickTotemsAndMonumentVetoResult);
                    break;
                case /* GameInitPlaceClansResult initPlaceClansResult */ 22:
                    message.initPlaceClansResult = GameInitPlaceClansResult.internalBinaryRead(reader, reader.uint32(), options, message.initPlaceClansResult);
                    break;
                case /* ManawaveRound currentRound */ 30:
                    message.currentRound = ManawaveRound.internalBinaryRead(reader, reader.uint32(), options, message.currentRound);
                    break;
                case /* repeated ManawaveRound completedRounds */ 31:
                    message.completedRounds.push(ManawaveRound.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* GameOverResult gameOverResult */ 40:
                    message.gameOverResult = GameOverResult.internalBinaryRead(reader, reader.uint32(), options, message.gameOverResult);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GameStatePb, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* GamePhaseId gamePhaseId = 1; */
        if (message.gamePhaseId !== 0)
            writer.tag(1, WireType.Varint).int32(message.gamePhaseId);
        /* InitialConditions initialConditions = 2; */
        if (message.initialConditions)
            InitialConditions.internalBinaryWrite(message.initialConditions, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* PlayerRegistration playerRegistration = 3; */
        if (message.playerRegistration)
            PlayerRegistration.internalBinaryWrite(message.playerRegistration, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* GameInitSetup initGameSetup = 20; */
        if (message.initGameSetup)
            GameInitSetup.internalBinaryWrite(message.initGameSetup, writer.tag(20, WireType.LengthDelimited).fork(), options).join();
        /* GameInitPickTotemsAndMonumentVetoResult initPickTotemsAndMonumentVetoResult = 21; */
        if (message.initPickTotemsAndMonumentVetoResult)
            GameInitPickTotemsAndMonumentVetoResult.internalBinaryWrite(message.initPickTotemsAndMonumentVetoResult, writer.tag(21, WireType.LengthDelimited).fork(), options).join();
        /* GameInitPlaceClansResult initPlaceClansResult = 22; */
        if (message.initPlaceClansResult)
            GameInitPlaceClansResult.internalBinaryWrite(message.initPlaceClansResult, writer.tag(22, WireType.LengthDelimited).fork(), options).join();
        /* ManawaveRound currentRound = 30; */
        if (message.currentRound)
            ManawaveRound.internalBinaryWrite(message.currentRound, writer.tag(30, WireType.LengthDelimited).fork(), options).join();
        /* repeated ManawaveRound completedRounds = 31; */
        for (let i = 0; i < message.completedRounds.length; i++)
            ManawaveRound.internalBinaryWrite(message.completedRounds[i], writer.tag(31, WireType.LengthDelimited).fork(), options).join();
        /* GameOverResult gameOverResult = 40; */
        if (message.gameOverResult)
            GameOverResult.internalBinaryWrite(message.gameOverResult, writer.tag(40, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GameStatePb
 */
export const GameStatePb = new GameStatePb$Type();
