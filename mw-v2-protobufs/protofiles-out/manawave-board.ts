// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "manawave-board.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { GameOutcome } from "./manawave-types";
import { SeasonPbId } from "./manawave-types";
import { FamilyCardInstancePbId } from "./manawave-types";
import { ClanCardInstancePbId } from "./manawave-types";
import { GameBoardMonuments } from "./manawave-types";
import { LeylineDistanceFromSource } from "./manawave-types";
import { PlayerSideId } from "./manawave-types";
/**
 * @generated from protobuf message BoardPlayerSideCoordinate
 */
export interface BoardPlayerSideCoordinate {
    /**
     * @generated from protobuf field: PlayerSideId playerSideId = 1;
     */
    playerSideId: PlayerSideId;
    /**
     * @generated from protobuf field: LeylineDistanceFromSource leylineDistance = 2;
     */
    leylineDistance: LeylineDistanceFromSource;
    /**
     * @generated from protobuf field: uint32 familyRank = 3;
     */
    familyRank: number;
}
/**
 * @generated from protobuf message MyBoardPlayerSideCoordinate
 */
export interface MyBoardPlayerSideCoordinate {
    /**
     * @generated from protobuf field: LeylineDistanceFromSource leylineDistance = 1;
     */
    leylineDistance: LeylineDistanceFromSource;
    /**
     * @generated from protobuf field: uint32 familyRank = 2;
     */
    familyRank: number;
}
/**
 * @generated from protobuf message LeylineState
 */
export interface LeylineState {
    /**
     * @generated from protobuf field: GameBoardMonuments monuments = 1;
     */
    monuments?: GameBoardMonuments;
}
/**
 * @generated from protobuf message TribeCardStockpile
 */
export interface TribeCardStockpile {
    /**
     * @generated from protobuf field: uint32 soulstainTokenCount = 1;
     */
    soulstainTokenCount: number;
    /**
     * @generated from protobuf field: uint32 manaCountersCount = 2;
     */
    manaCountersCount: number;
    /**
     * @generated from protobuf field: uint32 populationIncreaseCountersCount = 3;
     */
    populationIncreaseCountersCount: number;
    /**
     * @generated from protobuf field: uint32 attackCountersCount = 4;
     */
    attackCountersCount: number;
    /**
     * @generated from protobuf field: uint32 shieldCountersCount = 5;
     */
    shieldCountersCount: number;
}
/**
 * @generated from protobuf message ClanCardStockpile
 */
export interface ClanCardStockpile {
    /**
     * @generated from protobuf field: uint32 populationTokensCount = 1;
     */
    populationTokensCount: number;
    /**
     * @generated from protobuf field: uint32 manalithTokensCount = 2;
     */
    manalithTokensCount: number;
    /**
     * @generated from protobuf field: uint32 manaCountersCount = 3;
     */
    manaCountersCount: number;
    /**
     * @generated from protobuf field: uint32 manalithClaimCountersCount = 4;
     */
    manalithClaimCountersCount: number;
    /**
     * @generated from protobuf field: uint32 attackCountersCount = 5;
     */
    attackCountersCount: number;
    /**
     * @generated from protobuf field: uint32 shieldCountersCount = 6;
     */
    shieldCountersCount: number;
    /**
     * @generated from protobuf field: uint32 populationIncreaseCountersCount = 7;
     */
    populationIncreaseCountersCount: number;
    /**
     * @generated from protobuf field: uint32 sacrificeCountersCount = 8;
     */
    sacrificeCountersCount: number;
}
/**
 * @generated from protobuf message TribeCardState
 */
export interface TribeCardState {
    /**
     * @generated from protobuf field: TribeCardStockpile stockpile = 1;
     */
    stockpile?: TribeCardStockpile;
}
/**
 * @generated from protobuf message ClanCardState
 */
export interface ClanCardState {
    /**
     * @generated from protobuf field: ClanCardInstancePbId clanCardInstanceId = 1;
     */
    clanCardInstanceId?: ClanCardInstancePbId;
    /**
     * @generated from protobuf field: uint32 activeModeIndex = 2;
     */
    activeModeIndex: number;
    /**
     * @generated from protobuf field: ClanCardStockpile stockpile = 3;
     */
    stockpile?: ClanCardStockpile;
}
/**
 * @generated from protobuf message FamilyCardState
 */
export interface FamilyCardState {
    /**
     * @generated from protobuf field: FamilyCardInstancePbId familyCardInstanceId = 1;
     */
    familyCardInstanceId?: FamilyCardInstancePbId;
    /**
     * @generated from protobuf field: uint32 activeModeIndex = 2;
     */
    activeModeIndex: number;
}
/**
 * @generated from protobuf message ClanColumn
 */
export interface ClanColumn {
    /**
     * @generated from protobuf field: ClanCardState clanCard = 1;
     */
    clanCard?: ClanCardState;
    /**
     * @generated from protobuf field: repeated FamilyCardState familyCards = 2;
     */
    familyCards: FamilyCardState[];
}
/**
 * @generated from protobuf message PlayerBoardSide
 */
export interface PlayerBoardSide {
    /**
     * @generated from protobuf field: TribeCardState tribeCard = 1;
     */
    tribeCard?: TribeCardState;
    /**
     * @generated from protobuf field: ClanColumn leyline1ClanColumn = 2;
     */
    leyline1ClanColumn?: ClanColumn;
    /**
     * @generated from protobuf field: ClanColumn leyline2ClanColumn = 3;
     */
    leyline2ClanColumn?: ClanColumn;
    /**
     * @generated from protobuf field: ClanColumn leyline3ClanColumn = 4;
     */
    leyline3ClanColumn?: ClanColumn;
}
/**
 * @generated from protobuf message FamilyCardSelectionArea
 */
export interface FamilyCardSelectionArea {
    /**
     * @generated from protobuf field: FamilyCardInstancePbId choiceA = 1;
     */
    choiceA?: FamilyCardInstancePbId;
    /**
     * @generated from protobuf field: FamilyCardInstancePbId choiceB = 2;
     */
    choiceB?: FamilyCardInstancePbId;
    /**
     * @generated from protobuf field: FamilyCardInstancePbId choiceC = 3;
     */
    choiceC?: FamilyCardInstancePbId;
    /**
     * @generated from protobuf field: uint32 numCardsRemainingInPile = 20;
     */
    numCardsRemainingInPile: number;
}
/**
 * @generated from protobuf message GameBoardStatePb
 */
export interface GameBoardStatePb {
    /**
     * @generated from protobuf field: uint32 roundNumber = 1;
     */
    roundNumber: number;
    /**
     * @generated from protobuf field: SeasonPbId seasonId = 2;
     */
    seasonId?: SeasonPbId;
    /**
     * @generated from protobuf field: LeylineState leylineState = 10;
     */
    leylineState?: LeylineState;
    /**
     * @generated from protobuf field: PlayerBoardSide optBoardSide = 11;
     */
    optBoardSide?: PlayerBoardSide;
    /**
     * @generated from protobuf field: PlayerBoardSide osbBoardSide = 12;
     */
    osbBoardSide?: PlayerBoardSide;
    /**
     * @generated from protobuf field: FamilyCardSelectionArea familyCardSelectionArea = 13;
     */
    familyCardSelectionArea?: FamilyCardSelectionArea;
    /**
     * @generated from protobuf field: GameOutcome gameOutcome = 20;
     */
    gameOutcome: GameOutcome;
}
// @generated message type with reflection information, may provide speed optimized methods
class BoardPlayerSideCoordinate$Type extends MessageType<BoardPlayerSideCoordinate> {
    constructor() {
        super("BoardPlayerSideCoordinate", [
            { no: 1, name: "playerSideId", kind: "enum", T: () => ["PlayerSideId", PlayerSideId] },
            { no: 2, name: "leylineDistance", kind: "enum", T: () => ["LeylineDistanceFromSource", LeylineDistanceFromSource] },
            { no: 3, name: "familyRank", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<BoardPlayerSideCoordinate>): BoardPlayerSideCoordinate {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.playerSideId = 0;
        message.leylineDistance = 0;
        message.familyRank = 0;
        if (value !== undefined)
            reflectionMergePartial<BoardPlayerSideCoordinate>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BoardPlayerSideCoordinate): BoardPlayerSideCoordinate {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* PlayerSideId playerSideId */ 1:
                    message.playerSideId = reader.int32();
                    break;
                case /* LeylineDistanceFromSource leylineDistance */ 2:
                    message.leylineDistance = reader.int32();
                    break;
                case /* uint32 familyRank */ 3:
                    message.familyRank = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BoardPlayerSideCoordinate, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* PlayerSideId playerSideId = 1; */
        if (message.playerSideId !== 0)
            writer.tag(1, WireType.Varint).int32(message.playerSideId);
        /* LeylineDistanceFromSource leylineDistance = 2; */
        if (message.leylineDistance !== 0)
            writer.tag(2, WireType.Varint).int32(message.leylineDistance);
        /* uint32 familyRank = 3; */
        if (message.familyRank !== 0)
            writer.tag(3, WireType.Varint).uint32(message.familyRank);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message BoardPlayerSideCoordinate
 */
export const BoardPlayerSideCoordinate = new BoardPlayerSideCoordinate$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MyBoardPlayerSideCoordinate$Type extends MessageType<MyBoardPlayerSideCoordinate> {
    constructor() {
        super("MyBoardPlayerSideCoordinate", [
            { no: 1, name: "leylineDistance", kind: "enum", T: () => ["LeylineDistanceFromSource", LeylineDistanceFromSource] },
            { no: 2, name: "familyRank", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<MyBoardPlayerSideCoordinate>): MyBoardPlayerSideCoordinate {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.leylineDistance = 0;
        message.familyRank = 0;
        if (value !== undefined)
            reflectionMergePartial<MyBoardPlayerSideCoordinate>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MyBoardPlayerSideCoordinate): MyBoardPlayerSideCoordinate {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* LeylineDistanceFromSource leylineDistance */ 1:
                    message.leylineDistance = reader.int32();
                    break;
                case /* uint32 familyRank */ 2:
                    message.familyRank = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MyBoardPlayerSideCoordinate, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* LeylineDistanceFromSource leylineDistance = 1; */
        if (message.leylineDistance !== 0)
            writer.tag(1, WireType.Varint).int32(message.leylineDistance);
        /* uint32 familyRank = 2; */
        if (message.familyRank !== 0)
            writer.tag(2, WireType.Varint).uint32(message.familyRank);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MyBoardPlayerSideCoordinate
 */
export const MyBoardPlayerSideCoordinate = new MyBoardPlayerSideCoordinate$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LeylineState$Type extends MessageType<LeylineState> {
    constructor() {
        super("LeylineState", [
            { no: 1, name: "monuments", kind: "message", T: () => GameBoardMonuments }
        ]);
    }
    create(value?: PartialMessage<LeylineState>): LeylineState {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<LeylineState>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LeylineState): LeylineState {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* GameBoardMonuments monuments */ 1:
                    message.monuments = GameBoardMonuments.internalBinaryRead(reader, reader.uint32(), options, message.monuments);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LeylineState, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* GameBoardMonuments monuments = 1; */
        if (message.monuments)
            GameBoardMonuments.internalBinaryWrite(message.monuments, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LeylineState
 */
export const LeylineState = new LeylineState$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TribeCardStockpile$Type extends MessageType<TribeCardStockpile> {
    constructor() {
        super("TribeCardStockpile", [
            { no: 1, name: "soulstainTokenCount", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "manaCountersCount", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "populationIncreaseCountersCount", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "attackCountersCount", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "shieldCountersCount", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<TribeCardStockpile>): TribeCardStockpile {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.soulstainTokenCount = 0;
        message.manaCountersCount = 0;
        message.populationIncreaseCountersCount = 0;
        message.attackCountersCount = 0;
        message.shieldCountersCount = 0;
        if (value !== undefined)
            reflectionMergePartial<TribeCardStockpile>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TribeCardStockpile): TribeCardStockpile {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 soulstainTokenCount */ 1:
                    message.soulstainTokenCount = reader.uint32();
                    break;
                case /* uint32 manaCountersCount */ 2:
                    message.manaCountersCount = reader.uint32();
                    break;
                case /* uint32 populationIncreaseCountersCount */ 3:
                    message.populationIncreaseCountersCount = reader.uint32();
                    break;
                case /* uint32 attackCountersCount */ 4:
                    message.attackCountersCount = reader.uint32();
                    break;
                case /* uint32 shieldCountersCount */ 5:
                    message.shieldCountersCount = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TribeCardStockpile, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 soulstainTokenCount = 1; */
        if (message.soulstainTokenCount !== 0)
            writer.tag(1, WireType.Varint).uint32(message.soulstainTokenCount);
        /* uint32 manaCountersCount = 2; */
        if (message.manaCountersCount !== 0)
            writer.tag(2, WireType.Varint).uint32(message.manaCountersCount);
        /* uint32 populationIncreaseCountersCount = 3; */
        if (message.populationIncreaseCountersCount !== 0)
            writer.tag(3, WireType.Varint).uint32(message.populationIncreaseCountersCount);
        /* uint32 attackCountersCount = 4; */
        if (message.attackCountersCount !== 0)
            writer.tag(4, WireType.Varint).uint32(message.attackCountersCount);
        /* uint32 shieldCountersCount = 5; */
        if (message.shieldCountersCount !== 0)
            writer.tag(5, WireType.Varint).uint32(message.shieldCountersCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TribeCardStockpile
 */
export const TribeCardStockpile = new TribeCardStockpile$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClanCardStockpile$Type extends MessageType<ClanCardStockpile> {
    constructor() {
        super("ClanCardStockpile", [
            { no: 1, name: "populationTokensCount", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "manalithTokensCount", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "manaCountersCount", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "manalithClaimCountersCount", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "attackCountersCount", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "shieldCountersCount", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "populationIncreaseCountersCount", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "sacrificeCountersCount", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ClanCardStockpile>): ClanCardStockpile {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.populationTokensCount = 0;
        message.manalithTokensCount = 0;
        message.manaCountersCount = 0;
        message.manalithClaimCountersCount = 0;
        message.attackCountersCount = 0;
        message.shieldCountersCount = 0;
        message.populationIncreaseCountersCount = 0;
        message.sacrificeCountersCount = 0;
        if (value !== undefined)
            reflectionMergePartial<ClanCardStockpile>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClanCardStockpile): ClanCardStockpile {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 populationTokensCount */ 1:
                    message.populationTokensCount = reader.uint32();
                    break;
                case /* uint32 manalithTokensCount */ 2:
                    message.manalithTokensCount = reader.uint32();
                    break;
                case /* uint32 manaCountersCount */ 3:
                    message.manaCountersCount = reader.uint32();
                    break;
                case /* uint32 manalithClaimCountersCount */ 4:
                    message.manalithClaimCountersCount = reader.uint32();
                    break;
                case /* uint32 attackCountersCount */ 5:
                    message.attackCountersCount = reader.uint32();
                    break;
                case /* uint32 shieldCountersCount */ 6:
                    message.shieldCountersCount = reader.uint32();
                    break;
                case /* uint32 populationIncreaseCountersCount */ 7:
                    message.populationIncreaseCountersCount = reader.uint32();
                    break;
                case /* uint32 sacrificeCountersCount */ 8:
                    message.sacrificeCountersCount = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClanCardStockpile, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 populationTokensCount = 1; */
        if (message.populationTokensCount !== 0)
            writer.tag(1, WireType.Varint).uint32(message.populationTokensCount);
        /* uint32 manalithTokensCount = 2; */
        if (message.manalithTokensCount !== 0)
            writer.tag(2, WireType.Varint).uint32(message.manalithTokensCount);
        /* uint32 manaCountersCount = 3; */
        if (message.manaCountersCount !== 0)
            writer.tag(3, WireType.Varint).uint32(message.manaCountersCount);
        /* uint32 manalithClaimCountersCount = 4; */
        if (message.manalithClaimCountersCount !== 0)
            writer.tag(4, WireType.Varint).uint32(message.manalithClaimCountersCount);
        /* uint32 attackCountersCount = 5; */
        if (message.attackCountersCount !== 0)
            writer.tag(5, WireType.Varint).uint32(message.attackCountersCount);
        /* uint32 shieldCountersCount = 6; */
        if (message.shieldCountersCount !== 0)
            writer.tag(6, WireType.Varint).uint32(message.shieldCountersCount);
        /* uint32 populationIncreaseCountersCount = 7; */
        if (message.populationIncreaseCountersCount !== 0)
            writer.tag(7, WireType.Varint).uint32(message.populationIncreaseCountersCount);
        /* uint32 sacrificeCountersCount = 8; */
        if (message.sacrificeCountersCount !== 0)
            writer.tag(8, WireType.Varint).uint32(message.sacrificeCountersCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ClanCardStockpile
 */
export const ClanCardStockpile = new ClanCardStockpile$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TribeCardState$Type extends MessageType<TribeCardState> {
    constructor() {
        super("TribeCardState", [
            { no: 1, name: "stockpile", kind: "message", T: () => TribeCardStockpile }
        ]);
    }
    create(value?: PartialMessage<TribeCardState>): TribeCardState {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TribeCardState>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TribeCardState): TribeCardState {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* TribeCardStockpile stockpile */ 1:
                    message.stockpile = TribeCardStockpile.internalBinaryRead(reader, reader.uint32(), options, message.stockpile);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TribeCardState, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* TribeCardStockpile stockpile = 1; */
        if (message.stockpile)
            TribeCardStockpile.internalBinaryWrite(message.stockpile, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TribeCardState
 */
export const TribeCardState = new TribeCardState$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClanCardState$Type extends MessageType<ClanCardState> {
    constructor() {
        super("ClanCardState", [
            { no: 1, name: "clanCardInstanceId", kind: "message", T: () => ClanCardInstancePbId },
            { no: 2, name: "activeModeIndex", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "stockpile", kind: "message", T: () => ClanCardStockpile }
        ]);
    }
    create(value?: PartialMessage<ClanCardState>): ClanCardState {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.activeModeIndex = 0;
        if (value !== undefined)
            reflectionMergePartial<ClanCardState>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClanCardState): ClanCardState {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ClanCardInstancePbId clanCardInstanceId */ 1:
                    message.clanCardInstanceId = ClanCardInstancePbId.internalBinaryRead(reader, reader.uint32(), options, message.clanCardInstanceId);
                    break;
                case /* uint32 activeModeIndex */ 2:
                    message.activeModeIndex = reader.uint32();
                    break;
                case /* ClanCardStockpile stockpile */ 3:
                    message.stockpile = ClanCardStockpile.internalBinaryRead(reader, reader.uint32(), options, message.stockpile);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClanCardState, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ClanCardInstancePbId clanCardInstanceId = 1; */
        if (message.clanCardInstanceId)
            ClanCardInstancePbId.internalBinaryWrite(message.clanCardInstanceId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint32 activeModeIndex = 2; */
        if (message.activeModeIndex !== 0)
            writer.tag(2, WireType.Varint).uint32(message.activeModeIndex);
        /* ClanCardStockpile stockpile = 3; */
        if (message.stockpile)
            ClanCardStockpile.internalBinaryWrite(message.stockpile, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ClanCardState
 */
export const ClanCardState = new ClanCardState$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FamilyCardState$Type extends MessageType<FamilyCardState> {
    constructor() {
        super("FamilyCardState", [
            { no: 1, name: "familyCardInstanceId", kind: "message", T: () => FamilyCardInstancePbId },
            { no: 2, name: "activeModeIndex", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<FamilyCardState>): FamilyCardState {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.activeModeIndex = 0;
        if (value !== undefined)
            reflectionMergePartial<FamilyCardState>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FamilyCardState): FamilyCardState {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* FamilyCardInstancePbId familyCardInstanceId */ 1:
                    message.familyCardInstanceId = FamilyCardInstancePbId.internalBinaryRead(reader, reader.uint32(), options, message.familyCardInstanceId);
                    break;
                case /* uint32 activeModeIndex */ 2:
                    message.activeModeIndex = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FamilyCardState, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* FamilyCardInstancePbId familyCardInstanceId = 1; */
        if (message.familyCardInstanceId)
            FamilyCardInstancePbId.internalBinaryWrite(message.familyCardInstanceId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint32 activeModeIndex = 2; */
        if (message.activeModeIndex !== 0)
            writer.tag(2, WireType.Varint).uint32(message.activeModeIndex);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message FamilyCardState
 */
export const FamilyCardState = new FamilyCardState$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClanColumn$Type extends MessageType<ClanColumn> {
    constructor() {
        super("ClanColumn", [
            { no: 1, name: "clanCard", kind: "message", T: () => ClanCardState },
            { no: 2, name: "familyCards", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => FamilyCardState }
        ]);
    }
    create(value?: PartialMessage<ClanColumn>): ClanColumn {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.familyCards = [];
        if (value !== undefined)
            reflectionMergePartial<ClanColumn>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClanColumn): ClanColumn {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ClanCardState clanCard */ 1:
                    message.clanCard = ClanCardState.internalBinaryRead(reader, reader.uint32(), options, message.clanCard);
                    break;
                case /* repeated FamilyCardState familyCards */ 2:
                    message.familyCards.push(FamilyCardState.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClanColumn, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ClanCardState clanCard = 1; */
        if (message.clanCard)
            ClanCardState.internalBinaryWrite(message.clanCard, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated FamilyCardState familyCards = 2; */
        for (let i = 0; i < message.familyCards.length; i++)
            FamilyCardState.internalBinaryWrite(message.familyCards[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ClanColumn
 */
export const ClanColumn = new ClanColumn$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerBoardSide$Type extends MessageType<PlayerBoardSide> {
    constructor() {
        super("PlayerBoardSide", [
            { no: 1, name: "tribeCard", kind: "message", T: () => TribeCardState },
            { no: 2, name: "leyline1ClanColumn", kind: "message", T: () => ClanColumn },
            { no: 3, name: "leyline2ClanColumn", kind: "message", T: () => ClanColumn },
            { no: 4, name: "leyline3ClanColumn", kind: "message", T: () => ClanColumn }
        ]);
    }
    create(value?: PartialMessage<PlayerBoardSide>): PlayerBoardSide {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<PlayerBoardSide>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerBoardSide): PlayerBoardSide {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* TribeCardState tribeCard */ 1:
                    message.tribeCard = TribeCardState.internalBinaryRead(reader, reader.uint32(), options, message.tribeCard);
                    break;
                case /* ClanColumn leyline1ClanColumn */ 2:
                    message.leyline1ClanColumn = ClanColumn.internalBinaryRead(reader, reader.uint32(), options, message.leyline1ClanColumn);
                    break;
                case /* ClanColumn leyline2ClanColumn */ 3:
                    message.leyline2ClanColumn = ClanColumn.internalBinaryRead(reader, reader.uint32(), options, message.leyline2ClanColumn);
                    break;
                case /* ClanColumn leyline3ClanColumn */ 4:
                    message.leyline3ClanColumn = ClanColumn.internalBinaryRead(reader, reader.uint32(), options, message.leyline3ClanColumn);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerBoardSide, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* TribeCardState tribeCard = 1; */
        if (message.tribeCard)
            TribeCardState.internalBinaryWrite(message.tribeCard, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* ClanColumn leyline1ClanColumn = 2; */
        if (message.leyline1ClanColumn)
            ClanColumn.internalBinaryWrite(message.leyline1ClanColumn, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* ClanColumn leyline2ClanColumn = 3; */
        if (message.leyline2ClanColumn)
            ClanColumn.internalBinaryWrite(message.leyline2ClanColumn, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* ClanColumn leyline3ClanColumn = 4; */
        if (message.leyline3ClanColumn)
            ClanColumn.internalBinaryWrite(message.leyline3ClanColumn, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PlayerBoardSide
 */
export const PlayerBoardSide = new PlayerBoardSide$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FamilyCardSelectionArea$Type extends MessageType<FamilyCardSelectionArea> {
    constructor() {
        super("FamilyCardSelectionArea", [
            { no: 1, name: "choiceA", kind: "message", T: () => FamilyCardInstancePbId },
            { no: 2, name: "choiceB", kind: "message", T: () => FamilyCardInstancePbId },
            { no: 3, name: "choiceC", kind: "message", T: () => FamilyCardInstancePbId },
            { no: 20, name: "numCardsRemainingInPile", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<FamilyCardSelectionArea>): FamilyCardSelectionArea {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.numCardsRemainingInPile = 0;
        if (value !== undefined)
            reflectionMergePartial<FamilyCardSelectionArea>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FamilyCardSelectionArea): FamilyCardSelectionArea {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* FamilyCardInstancePbId choiceA */ 1:
                    message.choiceA = FamilyCardInstancePbId.internalBinaryRead(reader, reader.uint32(), options, message.choiceA);
                    break;
                case /* FamilyCardInstancePbId choiceB */ 2:
                    message.choiceB = FamilyCardInstancePbId.internalBinaryRead(reader, reader.uint32(), options, message.choiceB);
                    break;
                case /* FamilyCardInstancePbId choiceC */ 3:
                    message.choiceC = FamilyCardInstancePbId.internalBinaryRead(reader, reader.uint32(), options, message.choiceC);
                    break;
                case /* uint32 numCardsRemainingInPile */ 20:
                    message.numCardsRemainingInPile = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FamilyCardSelectionArea, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* FamilyCardInstancePbId choiceA = 1; */
        if (message.choiceA)
            FamilyCardInstancePbId.internalBinaryWrite(message.choiceA, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* FamilyCardInstancePbId choiceB = 2; */
        if (message.choiceB)
            FamilyCardInstancePbId.internalBinaryWrite(message.choiceB, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* FamilyCardInstancePbId choiceC = 3; */
        if (message.choiceC)
            FamilyCardInstancePbId.internalBinaryWrite(message.choiceC, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* uint32 numCardsRemainingInPile = 20; */
        if (message.numCardsRemainingInPile !== 0)
            writer.tag(20, WireType.Varint).uint32(message.numCardsRemainingInPile);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message FamilyCardSelectionArea
 */
export const FamilyCardSelectionArea = new FamilyCardSelectionArea$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GameBoardStatePb$Type extends MessageType<GameBoardStatePb> {
    constructor() {
        super("GameBoardStatePb", [
            { no: 1, name: "roundNumber", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "seasonId", kind: "message", T: () => SeasonPbId },
            { no: 10, name: "leylineState", kind: "message", T: () => LeylineState },
            { no: 11, name: "optBoardSide", kind: "message", T: () => PlayerBoardSide },
            { no: 12, name: "osbBoardSide", kind: "message", T: () => PlayerBoardSide },
            { no: 13, name: "familyCardSelectionArea", kind: "message", T: () => FamilyCardSelectionArea },
            { no: 20, name: "gameOutcome", kind: "enum", T: () => ["GameOutcome", GameOutcome] }
        ]);
    }
    create(value?: PartialMessage<GameBoardStatePb>): GameBoardStatePb {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.roundNumber = 0;
        message.gameOutcome = 0;
        if (value !== undefined)
            reflectionMergePartial<GameBoardStatePb>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GameBoardStatePb): GameBoardStatePb {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 roundNumber */ 1:
                    message.roundNumber = reader.uint32();
                    break;
                case /* SeasonPbId seasonId */ 2:
                    message.seasonId = SeasonPbId.internalBinaryRead(reader, reader.uint32(), options, message.seasonId);
                    break;
                case /* LeylineState leylineState */ 10:
                    message.leylineState = LeylineState.internalBinaryRead(reader, reader.uint32(), options, message.leylineState);
                    break;
                case /* PlayerBoardSide optBoardSide */ 11:
                    message.optBoardSide = PlayerBoardSide.internalBinaryRead(reader, reader.uint32(), options, message.optBoardSide);
                    break;
                case /* PlayerBoardSide osbBoardSide */ 12:
                    message.osbBoardSide = PlayerBoardSide.internalBinaryRead(reader, reader.uint32(), options, message.osbBoardSide);
                    break;
                case /* FamilyCardSelectionArea familyCardSelectionArea */ 13:
                    message.familyCardSelectionArea = FamilyCardSelectionArea.internalBinaryRead(reader, reader.uint32(), options, message.familyCardSelectionArea);
                    break;
                case /* GameOutcome gameOutcome */ 20:
                    message.gameOutcome = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GameBoardStatePb, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 roundNumber = 1; */
        if (message.roundNumber !== 0)
            writer.tag(1, WireType.Varint).uint32(message.roundNumber);
        /* SeasonPbId seasonId = 2; */
        if (message.seasonId)
            SeasonPbId.internalBinaryWrite(message.seasonId, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* LeylineState leylineState = 10; */
        if (message.leylineState)
            LeylineState.internalBinaryWrite(message.leylineState, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* PlayerBoardSide optBoardSide = 11; */
        if (message.optBoardSide)
            PlayerBoardSide.internalBinaryWrite(message.optBoardSide, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* PlayerBoardSide osbBoardSide = 12; */
        if (message.osbBoardSide)
            PlayerBoardSide.internalBinaryWrite(message.osbBoardSide, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* FamilyCardSelectionArea familyCardSelectionArea = 13; */
        if (message.familyCardSelectionArea)
            FamilyCardSelectionArea.internalBinaryWrite(message.familyCardSelectionArea, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* GameOutcome gameOutcome = 20; */
        if (message.gameOutcome !== 0)
            writer.tag(20, WireType.Varint).int32(message.gameOutcome);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GameBoardStatePb
 */
export const GameBoardStatePb = new GameBoardStatePb$Type();
