// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "manawave-vm.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { MwMarkerType } from "./manawave-types";
import { BoardPlayerSideCoordinate } from "./manawave-board";
import { PlayerSideId } from "./manawave-types";
/**
 * @generated from protobuf message MvmRegisterData_PlayerSide
 */
export interface MvmRegisterData_PlayerSide {
    /**
     * @generated from protobuf field: PlayerSideId playerSideId = 1;
     */
    playerSideId: PlayerSideId;
}
/**
 * @generated from protobuf message MvmRegisterData_ClanCoordinateValue
 */
export interface MvmRegisterData_ClanCoordinateValue {
    /**
     * @generated from protobuf field: BoardPlayerSideCoordinate clanCoordinate = 1;
     */
    clanCoordinate?: BoardPlayerSideCoordinate;
}
/**
 * @generated from protobuf message MvmRegisterData_MarkerTypeAndQuantity
 */
export interface MvmRegisterData_MarkerTypeAndQuantity {
    /**
     * @generated from protobuf field: MwMarkerType markerType = 1;
     */
    markerType: MwMarkerType;
    /**
     * @generated from protobuf field: int32 quantity = 2;
     */
    quantity: number;
}
/**
 * @generated from protobuf message MvmRegisterData_IntAmount
 */
export interface MvmRegisterData_IntAmount {
    /**
     * @generated from protobuf field: int32 amount = 1;
     */
    amount: number;
}
/**
 * @generated from protobuf message MvmRegisterData
 */
export interface MvmRegisterData {
    /**
     * @generated from protobuf oneof: data
     */
    data: {
        oneofKind: "playerSide";
        /**
         * @generated from protobuf field: MvmRegisterData_PlayerSide playerSide = 1;
         */
        playerSide: MvmRegisterData_PlayerSide;
    } | {
        oneofKind: "clanCoordinateValue";
        /**
         * @generated from protobuf field: MvmRegisterData_ClanCoordinateValue clanCoordinateValue = 2;
         */
        clanCoordinateValue: MvmRegisterData_ClanCoordinateValue;
    } | {
        oneofKind: "markerTypeAndQuantity";
        /**
         * @generated from protobuf field: MvmRegisterData_MarkerTypeAndQuantity markerTypeAndQuantity = 3;
         */
        markerTypeAndQuantity: MvmRegisterData_MarkerTypeAndQuantity;
    } | {
        oneofKind: "intAmount";
        /**
         * @generated from protobuf field: MvmRegisterData_IntAmount intAmount = 4;
         */
        intAmount: MvmRegisterData_IntAmount;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message MvmInstruction_DeferToOnManaflowProcImpl
 */
export interface MvmInstruction_DeferToOnManaflowProcImpl {
    /**
     * @generated from protobuf field: string dummyValue = 1;
     */
    dummyValue: string;
}
/**
 * @generated from protobuf message MvmInstruction_SetMarkerRegister_ToMarkerTypeAndQuantity
 */
export interface MvmInstruction_SetMarkerRegister_ToMarkerTypeAndQuantity {
    /**
     * @generated from protobuf field: MvmRegisterId markerRegisterId = 1;
     */
    markerRegisterId: MvmRegisterId;
    /**
     * @generated from protobuf field: MvmRegisterData_MarkerTypeAndQuantity registerData = 2;
     */
    registerData?: MvmRegisterData_MarkerTypeAndQuantity;
}
/**
 * @generated from protobuf message MvmInstruction_SetMarkerRegisterAmount_ToRegisterAmount
 */
export interface MvmInstruction_SetMarkerRegisterAmount_ToRegisterAmount {
    /**
     * @generated from protobuf field: MvmRegisterId markerRegisterId = 1;
     */
    markerRegisterId: MvmRegisterId;
    /**
     * @generated from protobuf field: MvmRegisterId amountRegisterId = 2;
     */
    amountRegisterId: MvmRegisterId;
}
/**
 * @generated from protobuf message MvmInstruction_SetMarkerRegisterAmount_ToMvmAmountQueryOutput
 */
export interface MvmInstruction_SetMarkerRegisterAmount_ToMvmAmountQueryOutput {
    /**
     * @generated from protobuf field: MvmRegisterId markerRegisterId = 1;
     */
    markerRegisterId: MvmRegisterId;
    /**
     * @generated from protobuf field: MwMarkerType markerType = 2;
     */
    markerType: MwMarkerType;
    /**
     * @generated from protobuf field: MvmAmountQueryFunctionId mvmAmountQueryFunctionId = 3;
     */
    mvmAmountQueryFunctionId: MvmAmountQueryFunctionId;
    /**
     * @generated from protobuf field: bool multiplyOutputByNegative1 = 4;
     */
    multiplyOutputByNegative1: boolean;
}
/**
 * @generated from protobuf message MvmInstruction_AdjustMarkerRegisterAmount_ByAmount
 */
export interface MvmInstruction_AdjustMarkerRegisterAmount_ByAmount {
    /**
     * @generated from protobuf field: MvmRegisterId markerRegisterId = 1;
     */
    markerRegisterId: MvmRegisterId;
    /**
     * @generated from protobuf field: int32 amount = 2;
     */
    amount: number;
}
/**
 * @generated from protobuf message MvmInstruction_AdjustMarkerRegisterAmount_ByRegisterAmount
 */
export interface MvmInstruction_AdjustMarkerRegisterAmount_ByRegisterAmount {
    /**
     * @generated from protobuf field: MvmRegisterId markerRegisterId = 1;
     */
    markerRegisterId: MvmRegisterId;
    /**
     * @generated from protobuf field: MvmRegisterId amountRegisterId = 2;
     */
    amountRegisterId: MvmRegisterId;
    /**
     * @generated from protobuf field: bool subtractAdjustmentAmountInsteadOfAdd = 3;
     */
    subtractAdjustmentAmountInsteadOfAdd: boolean;
}
/**
 * @generated from protobuf message MvmInstruction_AdjustMarkerRegisterAmount_ByMvmAmountQueryOutput
 */
export interface MvmInstruction_AdjustMarkerRegisterAmount_ByMvmAmountQueryOutput {
    /**
     * @generated from protobuf field: MvmRegisterId markerRegisterId = 1;
     */
    markerRegisterId: MvmRegisterId;
    /**
     * @generated from protobuf field: MvmAmountQueryFunctionId mvmAmountQueryFunctionId = 2;
     */
    mvmAmountQueryFunctionId: MvmAmountQueryFunctionId;
    /**
     * @generated from protobuf field: bool subtractAdjustmentAmountInsteadOfAdd = 3;
     */
    subtractAdjustmentAmountInsteadOfAdd: boolean;
}
/**
 * @generated from protobuf message MvmInstruction_SetAmountRegisterValue_ToMvmAmountQueryOutput
 */
export interface MvmInstruction_SetAmountRegisterValue_ToMvmAmountQueryOutput {
    /**
     * @generated from protobuf field: MvmRegisterId amountRegisterId = 1;
     */
    amountRegisterId: MvmRegisterId;
    /**
     * @generated from protobuf field: MvmAmountQueryFunctionId mvmAmountQueryFunctionId = 2;
     */
    mvmAmountQueryFunctionId: MvmAmountQueryFunctionId;
}
/**
 * @generated from protobuf message MvmInstruction_ApplyMarkerRegisterToMyTribe
 */
export interface MvmInstruction_ApplyMarkerRegisterToMyTribe {
    /**
     * @generated from protobuf field: MvmRegisterId markerRegisterId = 1;
     */
    markerRegisterId: MvmRegisterId;
}
/**
 * @generated from protobuf message MvmInstruction_ApplyMarkerRegisterToClan_ForClanCoordinateRegister
 */
export interface MvmInstruction_ApplyMarkerRegisterToClan_ForClanCoordinateRegister {
    /**
     * @generated from protobuf field: MvmRegisterId markerRegisterId = 1;
     */
    markerRegisterId: MvmRegisterId;
    /**
     * @generated from protobuf field: MvmRegisterId clanCoordinateRegisterId = 2;
     */
    clanCoordinateRegisterId: MvmRegisterId;
}
/**
 * @generated from protobuf message MvmInstruction_ApplyMarkerRegisterToAdjacentClans_ForClanCoordinateRegister
 */
export interface MvmInstruction_ApplyMarkerRegisterToAdjacentClans_ForClanCoordinateRegister {
    /**
     * @generated from protobuf field: MvmRegisterId markerRegisterId = 1;
     */
    markerRegisterId: MvmRegisterId;
    /**
     * @generated from protobuf field: MvmRegisterId clanCoordinateRegisterId = 2;
     */
    clanCoordinateRegisterId: MvmRegisterId;
}
/**
 * @generated from protobuf message MvmInstruction_ApplyMarkerRegisterToAdjacentFamilies_ForFamilyCoordinateRegister
 */
export interface MvmInstruction_ApplyMarkerRegisterToAdjacentFamilies_ForFamilyCoordinateRegister {
    /**
     * @generated from protobuf field: MvmRegisterId markerRegisterId = 1;
     */
    markerRegisterId: MvmRegisterId;
    /**
     * @generated from protobuf field: MvmRegisterId familyCoordinateRegisterId = 2;
     */
    familyCoordinateRegisterId: MvmRegisterId;
}
/**
 * @generated from protobuf message MvmInstruction_SetRegisterData_ToMyPlayerSide
 */
export interface MvmInstruction_SetRegisterData_ToMyPlayerSide {
    /**
     * @generated from protobuf field: MvmRegisterId playerSideRegisterId = 1;
     */
    playerSideRegisterId: MvmRegisterId;
}
/**
 * @generated from protobuf message MvmInstruction_SetRegisterData_ToMyClanCoordinate
 */
export interface MvmInstruction_SetRegisterData_ToMyClanCoordinate {
    /**
     * @generated from protobuf field: MvmRegisterId clanCoordinateRegisterId = 1;
     */
    clanCoordinateRegisterId: MvmRegisterId;
}
/**
 * @generated from protobuf message MvmInstruction_SetRegisterData_ToMyFamilyCoordinate
 */
export interface MvmInstruction_SetRegisterData_ToMyFamilyCoordinate {
    /**
     * @generated from protobuf field: MvmRegisterId familyCoordinateRegisterId = 1;
     */
    familyCoordinateRegisterId: MvmRegisterId;
}
/**
 * @generated from protobuf message MvmAtomicInstruction
 */
export interface MvmAtomicInstruction {
    /**
     * @generated from protobuf oneof: instruction
     */
    instruction: {
        oneofKind: "setMarkerRegister";
        /**
         * @generated from protobuf field: MvmInstruction_SetMarkerRegister_ToMarkerTypeAndQuantity setMarkerRegister = 1;
         */
        setMarkerRegister: MvmInstruction_SetMarkerRegister_ToMarkerTypeAndQuantity;
    } | {
        oneofKind: "setMarkerRegisterAmountToRegisterAmount";
        /**
         * @generated from protobuf field: MvmInstruction_SetMarkerRegisterAmount_ToRegisterAmount setMarkerRegisterAmountToRegisterAmount = 2;
         */
        setMarkerRegisterAmountToRegisterAmount: MvmInstruction_SetMarkerRegisterAmount_ToRegisterAmount;
    } | {
        oneofKind: "setMarkerRegisterAmountToMvmAmountQueryOutput";
        /**
         * @generated from protobuf field: MvmInstruction_SetMarkerRegisterAmount_ToMvmAmountQueryOutput setMarkerRegisterAmountToMvmAmountQueryOutput = 3;
         */
        setMarkerRegisterAmountToMvmAmountQueryOutput: MvmInstruction_SetMarkerRegisterAmount_ToMvmAmountQueryOutput;
    } | {
        oneofKind: "adjustMarkerRegisterAmountByAmount";
        /**
         * @generated from protobuf field: MvmInstruction_AdjustMarkerRegisterAmount_ByAmount adjustMarkerRegisterAmountByAmount = 4;
         */
        adjustMarkerRegisterAmountByAmount: MvmInstruction_AdjustMarkerRegisterAmount_ByAmount;
    } | {
        oneofKind: "adjustMarkerRegisterAmountByRegisterAmount";
        /**
         * @generated from protobuf field: MvmInstruction_AdjustMarkerRegisterAmount_ByRegisterAmount adjustMarkerRegisterAmountByRegisterAmount = 5;
         */
        adjustMarkerRegisterAmountByRegisterAmount: MvmInstruction_AdjustMarkerRegisterAmount_ByRegisterAmount;
    } | {
        oneofKind: "adjustMarkerRegisterAmountByMvmAmountQueryOutput";
        /**
         * @generated from protobuf field: MvmInstruction_AdjustMarkerRegisterAmount_ByMvmAmountQueryOutput adjustMarkerRegisterAmountByMvmAmountQueryOutput = 6;
         */
        adjustMarkerRegisterAmountByMvmAmountQueryOutput: MvmInstruction_AdjustMarkerRegisterAmount_ByMvmAmountQueryOutput;
    } | {
        oneofKind: "setAmountRegisterValueToMvmAmountQueryOutput";
        /**
         * @generated from protobuf field: MvmInstruction_SetAmountRegisterValue_ToMvmAmountQueryOutput setAmountRegisterValueToMvmAmountQueryOutput = 10;
         */
        setAmountRegisterValueToMvmAmountQueryOutput: MvmInstruction_SetAmountRegisterValue_ToMvmAmountQueryOutput;
    } | {
        oneofKind: "applyMarkerRegisterToMyTribe";
        /**
         * @generated from protobuf field: MvmInstruction_ApplyMarkerRegisterToMyTribe applyMarkerRegisterToMyTribe = 20;
         */
        applyMarkerRegisterToMyTribe: MvmInstruction_ApplyMarkerRegisterToMyTribe;
    } | {
        oneofKind: "applyMarkerRegisterToClanForClanCoordinateRegister";
        /**
         * @generated from protobuf field: MvmInstruction_ApplyMarkerRegisterToClan_ForClanCoordinateRegister applyMarkerRegisterToClanForClanCoordinateRegister = 21;
         */
        applyMarkerRegisterToClanForClanCoordinateRegister: MvmInstruction_ApplyMarkerRegisterToClan_ForClanCoordinateRegister;
    } | {
        oneofKind: "applyMarkerRegisterToAdjacentClansForClanCoordinateRegister";
        /**
         * @generated from protobuf field: MvmInstruction_ApplyMarkerRegisterToAdjacentClans_ForClanCoordinateRegister applyMarkerRegisterToAdjacentClansForClanCoordinateRegister = 22;
         */
        applyMarkerRegisterToAdjacentClansForClanCoordinateRegister: MvmInstruction_ApplyMarkerRegisterToAdjacentClans_ForClanCoordinateRegister;
    } | {
        oneofKind: "applyMarkerRegisterToAdjacentFamiliesForFamilyCoordinateRegister";
        /**
         * @generated from protobuf field: MvmInstruction_ApplyMarkerRegisterToAdjacentFamilies_ForFamilyCoordinateRegister applyMarkerRegisterToAdjacentFamiliesForFamilyCoordinateRegister = 23;
         */
        applyMarkerRegisterToAdjacentFamiliesForFamilyCoordinateRegister: MvmInstruction_ApplyMarkerRegisterToAdjacentFamilies_ForFamilyCoordinateRegister;
    } | {
        oneofKind: "setRegisterDataToMyPlayerSide";
        /**
         * @generated from protobuf field: MvmInstruction_SetRegisterData_ToMyPlayerSide setRegisterDataToMyPlayerSide = 30;
         */
        setRegisterDataToMyPlayerSide: MvmInstruction_SetRegisterData_ToMyPlayerSide;
    } | {
        oneofKind: "setRegisterDataToMyClanCoordinate";
        /**
         * @generated from protobuf field: MvmInstruction_SetRegisterData_ToMyClanCoordinate setRegisterDataToMyClanCoordinate = 31;
         */
        setRegisterDataToMyClanCoordinate: MvmInstruction_SetRegisterData_ToMyClanCoordinate;
    } | {
        oneofKind: "setRegisterDataToMyFamilyCoordinate";
        /**
         * @generated from protobuf field: MvmInstruction_SetRegisterData_ToMyFamilyCoordinate setRegisterDataToMyFamilyCoordinate = 32;
         */
        setRegisterDataToMyFamilyCoordinate: MvmInstruction_SetRegisterData_ToMyFamilyCoordinate;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message MvmInstruction_Conditional_RunAtomicInstructions
 */
export interface MvmInstruction_Conditional_RunAtomicInstructions {
    /**
     * @generated from protobuf field: MvmBoolQueryFunctionId mvmBoolQueryFunctionId = 1;
     */
    mvmBoolQueryFunctionId: MvmBoolQueryFunctionId;
    /**
     * @generated from protobuf field: repeated MvmAtomicInstruction onTrueInstructions = 2;
     */
    onTrueInstructions: MvmAtomicInstruction[];
    /**
     * @generated from protobuf field: repeated MvmAtomicInstruction onFalseInstructions = 3;
     */
    onFalseInstructions: MvmAtomicInstruction[];
}
/**
 * @generated from protobuf message ManawaveVmInstruction
 */
export interface ManawaveVmInstruction {
    /**
     * @generated from protobuf oneof: instruction
     */
    instruction: {
        oneofKind: "atomicInstruction";
        /**
         * @generated from protobuf field: MvmAtomicInstruction atomicInstruction = 1;
         */
        atomicInstruction: MvmAtomicInstruction;
    } | {
        oneofKind: "conditionalRunAtomicInstructions";
        /**
         * @generated from protobuf field: MvmInstruction_Conditional_RunAtomicInstructions conditionalRunAtomicInstructions = 10;
         */
        conditionalRunAtomicInstructions: MvmInstruction_Conditional_RunAtomicInstructions;
    } | {
        oneofKind: "deferToOnManaflowProcImpl";
        /**
         * @generated from protobuf field: MvmInstruction_DeferToOnManaflowProcImpl deferToOnManaflowProcImpl = 255;
         */
        deferToOnManaflowProcImpl: MvmInstruction_DeferToOnManaflowProcImpl;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf enum MvmRegisterId
 */
export enum MvmRegisterId {
    /**
     * @generated from protobuf enum value: MvmRegister_NotSet = 0;
     */
    MvmRegister_NotSet = 0,
    /**
     * @generated from protobuf enum value: MvmRegister_1 = 1;
     */
    MvmRegister_1 = 1,
    /**
     * @generated from protobuf enum value: MvmRegister_2 = 2;
     */
    MvmRegister_2 = 2,
    /**
     * @generated from protobuf enum value: MvmRegister_3 = 3;
     */
    MvmRegister_3 = 3
}
/**
 * @generated from protobuf enum MvmAmountQueryFunctionId
 */
export enum MvmAmountQueryFunctionId {
    /**
     * @generated from protobuf enum value: MvmAmountQueryFunction_NotSet = 0;
     */
    MvmAmountQueryFunction_NotSet = 0,
    /**
     * @generated from protobuf enum value: MvmAmountQueryFunction_CountNumberOfPopulationTokensOnOpposingClan = 1;
     */
    MvmAmountQueryFunction_CountNumberOfPopulationTokensOnOpposingClan = 1,
    /**
     * @generated from protobuf enum value: MvmAmountQueryFunction_CountNumberOfAdjacentFamiliesToThisCard = 2;
     */
    MvmAmountQueryFunction_CountNumberOfAdjacentFamiliesToThisCard = 2,
    /**
     * @generated from protobuf enum value: MvmAmountQueryFunction_CountNumberOfMySoulstainTokens = 3;
     */
    MvmAmountQueryFunction_CountNumberOfMySoulstainTokens = 3,
    /**
     * @generated from protobuf enum value: MvmAmountQueryFunction_CountNumberOfAdjacentFamiliesToThisCardWithSameAlignment = 4;
     */
    MvmAmountQueryFunction_CountNumberOfAdjacentFamiliesToThisCardWithSameAlignment = 4
}
/**
 * @generated from protobuf enum MvmBoolQueryFunctionId
 */
export enum MvmBoolQueryFunctionId {
    /**
     * @generated from protobuf enum value: MvmBoolQueryFunction_NotSet = 0;
     */
    MvmBoolQueryFunction_NotSet = 0,
    /**
     * @generated from protobuf enum value: MvmBoolQueryFunction_DoesMyTribeHaveAnySoulstainTokens = 1;
     */
    MvmBoolQueryFunction_DoesMyTribeHaveAnySoulstainTokens = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class MvmRegisterData_PlayerSide$Type extends MessageType<MvmRegisterData_PlayerSide> {
    constructor() {
        super("MvmRegisterData_PlayerSide", [
            { no: 1, name: "playerSideId", kind: "enum", T: () => ["PlayerSideId", PlayerSideId] }
        ]);
    }
    create(value?: PartialMessage<MvmRegisterData_PlayerSide>): MvmRegisterData_PlayerSide {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.playerSideId = 0;
        if (value !== undefined)
            reflectionMergePartial<MvmRegisterData_PlayerSide>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MvmRegisterData_PlayerSide): MvmRegisterData_PlayerSide {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* PlayerSideId playerSideId */ 1:
                    message.playerSideId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MvmRegisterData_PlayerSide, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* PlayerSideId playerSideId = 1; */
        if (message.playerSideId !== 0)
            writer.tag(1, WireType.Varint).int32(message.playerSideId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MvmRegisterData_PlayerSide
 */
export const MvmRegisterData_PlayerSide = new MvmRegisterData_PlayerSide$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MvmRegisterData_ClanCoordinateValue$Type extends MessageType<MvmRegisterData_ClanCoordinateValue> {
    constructor() {
        super("MvmRegisterData_ClanCoordinateValue", [
            { no: 1, name: "clanCoordinate", kind: "message", T: () => BoardPlayerSideCoordinate }
        ]);
    }
    create(value?: PartialMessage<MvmRegisterData_ClanCoordinateValue>): MvmRegisterData_ClanCoordinateValue {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<MvmRegisterData_ClanCoordinateValue>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MvmRegisterData_ClanCoordinateValue): MvmRegisterData_ClanCoordinateValue {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* BoardPlayerSideCoordinate clanCoordinate */ 1:
                    message.clanCoordinate = BoardPlayerSideCoordinate.internalBinaryRead(reader, reader.uint32(), options, message.clanCoordinate);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MvmRegisterData_ClanCoordinateValue, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* BoardPlayerSideCoordinate clanCoordinate = 1; */
        if (message.clanCoordinate)
            BoardPlayerSideCoordinate.internalBinaryWrite(message.clanCoordinate, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MvmRegisterData_ClanCoordinateValue
 */
export const MvmRegisterData_ClanCoordinateValue = new MvmRegisterData_ClanCoordinateValue$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MvmRegisterData_MarkerTypeAndQuantity$Type extends MessageType<MvmRegisterData_MarkerTypeAndQuantity> {
    constructor() {
        super("MvmRegisterData_MarkerTypeAndQuantity", [
            { no: 1, name: "markerType", kind: "enum", T: () => ["MwMarkerType", MwMarkerType] },
            { no: 2, name: "quantity", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<MvmRegisterData_MarkerTypeAndQuantity>): MvmRegisterData_MarkerTypeAndQuantity {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.markerType = 0;
        message.quantity = 0;
        if (value !== undefined)
            reflectionMergePartial<MvmRegisterData_MarkerTypeAndQuantity>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MvmRegisterData_MarkerTypeAndQuantity): MvmRegisterData_MarkerTypeAndQuantity {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* MwMarkerType markerType */ 1:
                    message.markerType = reader.int32();
                    break;
                case /* int32 quantity */ 2:
                    message.quantity = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MvmRegisterData_MarkerTypeAndQuantity, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* MwMarkerType markerType = 1; */
        if (message.markerType !== 0)
            writer.tag(1, WireType.Varint).int32(message.markerType);
        /* int32 quantity = 2; */
        if (message.quantity !== 0)
            writer.tag(2, WireType.Varint).int32(message.quantity);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MvmRegisterData_MarkerTypeAndQuantity
 */
export const MvmRegisterData_MarkerTypeAndQuantity = new MvmRegisterData_MarkerTypeAndQuantity$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MvmRegisterData_IntAmount$Type extends MessageType<MvmRegisterData_IntAmount> {
    constructor() {
        super("MvmRegisterData_IntAmount", [
            { no: 1, name: "amount", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<MvmRegisterData_IntAmount>): MvmRegisterData_IntAmount {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.amount = 0;
        if (value !== undefined)
            reflectionMergePartial<MvmRegisterData_IntAmount>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MvmRegisterData_IntAmount): MvmRegisterData_IntAmount {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 amount */ 1:
                    message.amount = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MvmRegisterData_IntAmount, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 amount = 1; */
        if (message.amount !== 0)
            writer.tag(1, WireType.Varint).int32(message.amount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MvmRegisterData_IntAmount
 */
export const MvmRegisterData_IntAmount = new MvmRegisterData_IntAmount$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MvmRegisterData$Type extends MessageType<MvmRegisterData> {
    constructor() {
        super("MvmRegisterData", [
            { no: 1, name: "playerSide", kind: "message", oneof: "data", T: () => MvmRegisterData_PlayerSide },
            { no: 2, name: "clanCoordinateValue", kind: "message", oneof: "data", T: () => MvmRegisterData_ClanCoordinateValue },
            { no: 3, name: "markerTypeAndQuantity", kind: "message", oneof: "data", T: () => MvmRegisterData_MarkerTypeAndQuantity },
            { no: 4, name: "intAmount", kind: "message", oneof: "data", T: () => MvmRegisterData_IntAmount }
        ]);
    }
    create(value?: PartialMessage<MvmRegisterData>): MvmRegisterData {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.data = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<MvmRegisterData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MvmRegisterData): MvmRegisterData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* MvmRegisterData_PlayerSide playerSide */ 1:
                    message.data = {
                        oneofKind: "playerSide",
                        playerSide: MvmRegisterData_PlayerSide.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).playerSide)
                    };
                    break;
                case /* MvmRegisterData_ClanCoordinateValue clanCoordinateValue */ 2:
                    message.data = {
                        oneofKind: "clanCoordinateValue",
                        clanCoordinateValue: MvmRegisterData_ClanCoordinateValue.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).clanCoordinateValue)
                    };
                    break;
                case /* MvmRegisterData_MarkerTypeAndQuantity markerTypeAndQuantity */ 3:
                    message.data = {
                        oneofKind: "markerTypeAndQuantity",
                        markerTypeAndQuantity: MvmRegisterData_MarkerTypeAndQuantity.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).markerTypeAndQuantity)
                    };
                    break;
                case /* MvmRegisterData_IntAmount intAmount */ 4:
                    message.data = {
                        oneofKind: "intAmount",
                        intAmount: MvmRegisterData_IntAmount.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).intAmount)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MvmRegisterData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* MvmRegisterData_PlayerSide playerSide = 1; */
        if (message.data.oneofKind === "playerSide")
            MvmRegisterData_PlayerSide.internalBinaryWrite(message.data.playerSide, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* MvmRegisterData_ClanCoordinateValue clanCoordinateValue = 2; */
        if (message.data.oneofKind === "clanCoordinateValue")
            MvmRegisterData_ClanCoordinateValue.internalBinaryWrite(message.data.clanCoordinateValue, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* MvmRegisterData_MarkerTypeAndQuantity markerTypeAndQuantity = 3; */
        if (message.data.oneofKind === "markerTypeAndQuantity")
            MvmRegisterData_MarkerTypeAndQuantity.internalBinaryWrite(message.data.markerTypeAndQuantity, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* MvmRegisterData_IntAmount intAmount = 4; */
        if (message.data.oneofKind === "intAmount")
            MvmRegisterData_IntAmount.internalBinaryWrite(message.data.intAmount, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MvmRegisterData
 */
export const MvmRegisterData = new MvmRegisterData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MvmInstruction_DeferToOnManaflowProcImpl$Type extends MessageType<MvmInstruction_DeferToOnManaflowProcImpl> {
    constructor() {
        super("MvmInstruction_DeferToOnManaflowProcImpl", [
            { no: 1, name: "dummyValue", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MvmInstruction_DeferToOnManaflowProcImpl>): MvmInstruction_DeferToOnManaflowProcImpl {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.dummyValue = "";
        if (value !== undefined)
            reflectionMergePartial<MvmInstruction_DeferToOnManaflowProcImpl>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MvmInstruction_DeferToOnManaflowProcImpl): MvmInstruction_DeferToOnManaflowProcImpl {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string dummyValue */ 1:
                    message.dummyValue = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MvmInstruction_DeferToOnManaflowProcImpl, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string dummyValue = 1; */
        if (message.dummyValue !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.dummyValue);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MvmInstruction_DeferToOnManaflowProcImpl
 */
export const MvmInstruction_DeferToOnManaflowProcImpl = new MvmInstruction_DeferToOnManaflowProcImpl$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MvmInstruction_SetMarkerRegister_ToMarkerTypeAndQuantity$Type extends MessageType<MvmInstruction_SetMarkerRegister_ToMarkerTypeAndQuantity> {
    constructor() {
        super("MvmInstruction_SetMarkerRegister_ToMarkerTypeAndQuantity", [
            { no: 1, name: "markerRegisterId", kind: "enum", T: () => ["MvmRegisterId", MvmRegisterId] },
            { no: 2, name: "registerData", kind: "message", T: () => MvmRegisterData_MarkerTypeAndQuantity }
        ]);
    }
    create(value?: PartialMessage<MvmInstruction_SetMarkerRegister_ToMarkerTypeAndQuantity>): MvmInstruction_SetMarkerRegister_ToMarkerTypeAndQuantity {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.markerRegisterId = 0;
        if (value !== undefined)
            reflectionMergePartial<MvmInstruction_SetMarkerRegister_ToMarkerTypeAndQuantity>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MvmInstruction_SetMarkerRegister_ToMarkerTypeAndQuantity): MvmInstruction_SetMarkerRegister_ToMarkerTypeAndQuantity {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* MvmRegisterId markerRegisterId */ 1:
                    message.markerRegisterId = reader.int32();
                    break;
                case /* MvmRegisterData_MarkerTypeAndQuantity registerData */ 2:
                    message.registerData = MvmRegisterData_MarkerTypeAndQuantity.internalBinaryRead(reader, reader.uint32(), options, message.registerData);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MvmInstruction_SetMarkerRegister_ToMarkerTypeAndQuantity, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* MvmRegisterId markerRegisterId = 1; */
        if (message.markerRegisterId !== 0)
            writer.tag(1, WireType.Varint).int32(message.markerRegisterId);
        /* MvmRegisterData_MarkerTypeAndQuantity registerData = 2; */
        if (message.registerData)
            MvmRegisterData_MarkerTypeAndQuantity.internalBinaryWrite(message.registerData, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MvmInstruction_SetMarkerRegister_ToMarkerTypeAndQuantity
 */
export const MvmInstruction_SetMarkerRegister_ToMarkerTypeAndQuantity = new MvmInstruction_SetMarkerRegister_ToMarkerTypeAndQuantity$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MvmInstruction_SetMarkerRegisterAmount_ToRegisterAmount$Type extends MessageType<MvmInstruction_SetMarkerRegisterAmount_ToRegisterAmount> {
    constructor() {
        super("MvmInstruction_SetMarkerRegisterAmount_ToRegisterAmount", [
            { no: 1, name: "markerRegisterId", kind: "enum", T: () => ["MvmRegisterId", MvmRegisterId] },
            { no: 2, name: "amountRegisterId", kind: "enum", T: () => ["MvmRegisterId", MvmRegisterId] }
        ]);
    }
    create(value?: PartialMessage<MvmInstruction_SetMarkerRegisterAmount_ToRegisterAmount>): MvmInstruction_SetMarkerRegisterAmount_ToRegisterAmount {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.markerRegisterId = 0;
        message.amountRegisterId = 0;
        if (value !== undefined)
            reflectionMergePartial<MvmInstruction_SetMarkerRegisterAmount_ToRegisterAmount>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MvmInstruction_SetMarkerRegisterAmount_ToRegisterAmount): MvmInstruction_SetMarkerRegisterAmount_ToRegisterAmount {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* MvmRegisterId markerRegisterId */ 1:
                    message.markerRegisterId = reader.int32();
                    break;
                case /* MvmRegisterId amountRegisterId */ 2:
                    message.amountRegisterId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MvmInstruction_SetMarkerRegisterAmount_ToRegisterAmount, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* MvmRegisterId markerRegisterId = 1; */
        if (message.markerRegisterId !== 0)
            writer.tag(1, WireType.Varint).int32(message.markerRegisterId);
        /* MvmRegisterId amountRegisterId = 2; */
        if (message.amountRegisterId !== 0)
            writer.tag(2, WireType.Varint).int32(message.amountRegisterId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MvmInstruction_SetMarkerRegisterAmount_ToRegisterAmount
 */
export const MvmInstruction_SetMarkerRegisterAmount_ToRegisterAmount = new MvmInstruction_SetMarkerRegisterAmount_ToRegisterAmount$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MvmInstruction_SetMarkerRegisterAmount_ToMvmAmountQueryOutput$Type extends MessageType<MvmInstruction_SetMarkerRegisterAmount_ToMvmAmountQueryOutput> {
    constructor() {
        super("MvmInstruction_SetMarkerRegisterAmount_ToMvmAmountQueryOutput", [
            { no: 1, name: "markerRegisterId", kind: "enum", T: () => ["MvmRegisterId", MvmRegisterId] },
            { no: 2, name: "markerType", kind: "enum", T: () => ["MwMarkerType", MwMarkerType] },
            { no: 3, name: "mvmAmountQueryFunctionId", kind: "enum", T: () => ["MvmAmountQueryFunctionId", MvmAmountQueryFunctionId] },
            { no: 4, name: "multiplyOutputByNegative1", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<MvmInstruction_SetMarkerRegisterAmount_ToMvmAmountQueryOutput>): MvmInstruction_SetMarkerRegisterAmount_ToMvmAmountQueryOutput {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.markerRegisterId = 0;
        message.markerType = 0;
        message.mvmAmountQueryFunctionId = 0;
        message.multiplyOutputByNegative1 = false;
        if (value !== undefined)
            reflectionMergePartial<MvmInstruction_SetMarkerRegisterAmount_ToMvmAmountQueryOutput>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MvmInstruction_SetMarkerRegisterAmount_ToMvmAmountQueryOutput): MvmInstruction_SetMarkerRegisterAmount_ToMvmAmountQueryOutput {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* MvmRegisterId markerRegisterId */ 1:
                    message.markerRegisterId = reader.int32();
                    break;
                case /* MwMarkerType markerType */ 2:
                    message.markerType = reader.int32();
                    break;
                case /* MvmAmountQueryFunctionId mvmAmountQueryFunctionId */ 3:
                    message.mvmAmountQueryFunctionId = reader.int32();
                    break;
                case /* bool multiplyOutputByNegative1 */ 4:
                    message.multiplyOutputByNegative1 = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MvmInstruction_SetMarkerRegisterAmount_ToMvmAmountQueryOutput, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* MvmRegisterId markerRegisterId = 1; */
        if (message.markerRegisterId !== 0)
            writer.tag(1, WireType.Varint).int32(message.markerRegisterId);
        /* MwMarkerType markerType = 2; */
        if (message.markerType !== 0)
            writer.tag(2, WireType.Varint).int32(message.markerType);
        /* MvmAmountQueryFunctionId mvmAmountQueryFunctionId = 3; */
        if (message.mvmAmountQueryFunctionId !== 0)
            writer.tag(3, WireType.Varint).int32(message.mvmAmountQueryFunctionId);
        /* bool multiplyOutputByNegative1 = 4; */
        if (message.multiplyOutputByNegative1 !== false)
            writer.tag(4, WireType.Varint).bool(message.multiplyOutputByNegative1);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MvmInstruction_SetMarkerRegisterAmount_ToMvmAmountQueryOutput
 */
export const MvmInstruction_SetMarkerRegisterAmount_ToMvmAmountQueryOutput = new MvmInstruction_SetMarkerRegisterAmount_ToMvmAmountQueryOutput$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MvmInstruction_AdjustMarkerRegisterAmount_ByAmount$Type extends MessageType<MvmInstruction_AdjustMarkerRegisterAmount_ByAmount> {
    constructor() {
        super("MvmInstruction_AdjustMarkerRegisterAmount_ByAmount", [
            { no: 1, name: "markerRegisterId", kind: "enum", T: () => ["MvmRegisterId", MvmRegisterId] },
            { no: 2, name: "amount", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<MvmInstruction_AdjustMarkerRegisterAmount_ByAmount>): MvmInstruction_AdjustMarkerRegisterAmount_ByAmount {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.markerRegisterId = 0;
        message.amount = 0;
        if (value !== undefined)
            reflectionMergePartial<MvmInstruction_AdjustMarkerRegisterAmount_ByAmount>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MvmInstruction_AdjustMarkerRegisterAmount_ByAmount): MvmInstruction_AdjustMarkerRegisterAmount_ByAmount {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* MvmRegisterId markerRegisterId */ 1:
                    message.markerRegisterId = reader.int32();
                    break;
                case /* int32 amount */ 2:
                    message.amount = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MvmInstruction_AdjustMarkerRegisterAmount_ByAmount, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* MvmRegisterId markerRegisterId = 1; */
        if (message.markerRegisterId !== 0)
            writer.tag(1, WireType.Varint).int32(message.markerRegisterId);
        /* int32 amount = 2; */
        if (message.amount !== 0)
            writer.tag(2, WireType.Varint).int32(message.amount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MvmInstruction_AdjustMarkerRegisterAmount_ByAmount
 */
export const MvmInstruction_AdjustMarkerRegisterAmount_ByAmount = new MvmInstruction_AdjustMarkerRegisterAmount_ByAmount$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MvmInstruction_AdjustMarkerRegisterAmount_ByRegisterAmount$Type extends MessageType<MvmInstruction_AdjustMarkerRegisterAmount_ByRegisterAmount> {
    constructor() {
        super("MvmInstruction_AdjustMarkerRegisterAmount_ByRegisterAmount", [
            { no: 1, name: "markerRegisterId", kind: "enum", T: () => ["MvmRegisterId", MvmRegisterId] },
            { no: 2, name: "amountRegisterId", kind: "enum", T: () => ["MvmRegisterId", MvmRegisterId] },
            { no: 3, name: "subtractAdjustmentAmountInsteadOfAdd", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<MvmInstruction_AdjustMarkerRegisterAmount_ByRegisterAmount>): MvmInstruction_AdjustMarkerRegisterAmount_ByRegisterAmount {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.markerRegisterId = 0;
        message.amountRegisterId = 0;
        message.subtractAdjustmentAmountInsteadOfAdd = false;
        if (value !== undefined)
            reflectionMergePartial<MvmInstruction_AdjustMarkerRegisterAmount_ByRegisterAmount>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MvmInstruction_AdjustMarkerRegisterAmount_ByRegisterAmount): MvmInstruction_AdjustMarkerRegisterAmount_ByRegisterAmount {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* MvmRegisterId markerRegisterId */ 1:
                    message.markerRegisterId = reader.int32();
                    break;
                case /* MvmRegisterId amountRegisterId */ 2:
                    message.amountRegisterId = reader.int32();
                    break;
                case /* bool subtractAdjustmentAmountInsteadOfAdd */ 3:
                    message.subtractAdjustmentAmountInsteadOfAdd = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MvmInstruction_AdjustMarkerRegisterAmount_ByRegisterAmount, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* MvmRegisterId markerRegisterId = 1; */
        if (message.markerRegisterId !== 0)
            writer.tag(1, WireType.Varint).int32(message.markerRegisterId);
        /* MvmRegisterId amountRegisterId = 2; */
        if (message.amountRegisterId !== 0)
            writer.tag(2, WireType.Varint).int32(message.amountRegisterId);
        /* bool subtractAdjustmentAmountInsteadOfAdd = 3; */
        if (message.subtractAdjustmentAmountInsteadOfAdd !== false)
            writer.tag(3, WireType.Varint).bool(message.subtractAdjustmentAmountInsteadOfAdd);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MvmInstruction_AdjustMarkerRegisterAmount_ByRegisterAmount
 */
export const MvmInstruction_AdjustMarkerRegisterAmount_ByRegisterAmount = new MvmInstruction_AdjustMarkerRegisterAmount_ByRegisterAmount$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MvmInstruction_AdjustMarkerRegisterAmount_ByMvmAmountQueryOutput$Type extends MessageType<MvmInstruction_AdjustMarkerRegisterAmount_ByMvmAmountQueryOutput> {
    constructor() {
        super("MvmInstruction_AdjustMarkerRegisterAmount_ByMvmAmountQueryOutput", [
            { no: 1, name: "markerRegisterId", kind: "enum", T: () => ["MvmRegisterId", MvmRegisterId] },
            { no: 2, name: "mvmAmountQueryFunctionId", kind: "enum", T: () => ["MvmAmountQueryFunctionId", MvmAmountQueryFunctionId] },
            { no: 3, name: "subtractAdjustmentAmountInsteadOfAdd", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<MvmInstruction_AdjustMarkerRegisterAmount_ByMvmAmountQueryOutput>): MvmInstruction_AdjustMarkerRegisterAmount_ByMvmAmountQueryOutput {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.markerRegisterId = 0;
        message.mvmAmountQueryFunctionId = 0;
        message.subtractAdjustmentAmountInsteadOfAdd = false;
        if (value !== undefined)
            reflectionMergePartial<MvmInstruction_AdjustMarkerRegisterAmount_ByMvmAmountQueryOutput>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MvmInstruction_AdjustMarkerRegisterAmount_ByMvmAmountQueryOutput): MvmInstruction_AdjustMarkerRegisterAmount_ByMvmAmountQueryOutput {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* MvmRegisterId markerRegisterId */ 1:
                    message.markerRegisterId = reader.int32();
                    break;
                case /* MvmAmountQueryFunctionId mvmAmountQueryFunctionId */ 2:
                    message.mvmAmountQueryFunctionId = reader.int32();
                    break;
                case /* bool subtractAdjustmentAmountInsteadOfAdd */ 3:
                    message.subtractAdjustmentAmountInsteadOfAdd = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MvmInstruction_AdjustMarkerRegisterAmount_ByMvmAmountQueryOutput, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* MvmRegisterId markerRegisterId = 1; */
        if (message.markerRegisterId !== 0)
            writer.tag(1, WireType.Varint).int32(message.markerRegisterId);
        /* MvmAmountQueryFunctionId mvmAmountQueryFunctionId = 2; */
        if (message.mvmAmountQueryFunctionId !== 0)
            writer.tag(2, WireType.Varint).int32(message.mvmAmountQueryFunctionId);
        /* bool subtractAdjustmentAmountInsteadOfAdd = 3; */
        if (message.subtractAdjustmentAmountInsteadOfAdd !== false)
            writer.tag(3, WireType.Varint).bool(message.subtractAdjustmentAmountInsteadOfAdd);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MvmInstruction_AdjustMarkerRegisterAmount_ByMvmAmountQueryOutput
 */
export const MvmInstruction_AdjustMarkerRegisterAmount_ByMvmAmountQueryOutput = new MvmInstruction_AdjustMarkerRegisterAmount_ByMvmAmountQueryOutput$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MvmInstruction_SetAmountRegisterValue_ToMvmAmountQueryOutput$Type extends MessageType<MvmInstruction_SetAmountRegisterValue_ToMvmAmountQueryOutput> {
    constructor() {
        super("MvmInstruction_SetAmountRegisterValue_ToMvmAmountQueryOutput", [
            { no: 1, name: "amountRegisterId", kind: "enum", T: () => ["MvmRegisterId", MvmRegisterId] },
            { no: 2, name: "mvmAmountQueryFunctionId", kind: "enum", T: () => ["MvmAmountQueryFunctionId", MvmAmountQueryFunctionId] }
        ]);
    }
    create(value?: PartialMessage<MvmInstruction_SetAmountRegisterValue_ToMvmAmountQueryOutput>): MvmInstruction_SetAmountRegisterValue_ToMvmAmountQueryOutput {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.amountRegisterId = 0;
        message.mvmAmountQueryFunctionId = 0;
        if (value !== undefined)
            reflectionMergePartial<MvmInstruction_SetAmountRegisterValue_ToMvmAmountQueryOutput>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MvmInstruction_SetAmountRegisterValue_ToMvmAmountQueryOutput): MvmInstruction_SetAmountRegisterValue_ToMvmAmountQueryOutput {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* MvmRegisterId amountRegisterId */ 1:
                    message.amountRegisterId = reader.int32();
                    break;
                case /* MvmAmountQueryFunctionId mvmAmountQueryFunctionId */ 2:
                    message.mvmAmountQueryFunctionId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MvmInstruction_SetAmountRegisterValue_ToMvmAmountQueryOutput, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* MvmRegisterId amountRegisterId = 1; */
        if (message.amountRegisterId !== 0)
            writer.tag(1, WireType.Varint).int32(message.amountRegisterId);
        /* MvmAmountQueryFunctionId mvmAmountQueryFunctionId = 2; */
        if (message.mvmAmountQueryFunctionId !== 0)
            writer.tag(2, WireType.Varint).int32(message.mvmAmountQueryFunctionId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MvmInstruction_SetAmountRegisterValue_ToMvmAmountQueryOutput
 */
export const MvmInstruction_SetAmountRegisterValue_ToMvmAmountQueryOutput = new MvmInstruction_SetAmountRegisterValue_ToMvmAmountQueryOutput$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MvmInstruction_ApplyMarkerRegisterToMyTribe$Type extends MessageType<MvmInstruction_ApplyMarkerRegisterToMyTribe> {
    constructor() {
        super("MvmInstruction_ApplyMarkerRegisterToMyTribe", [
            { no: 1, name: "markerRegisterId", kind: "enum", T: () => ["MvmRegisterId", MvmRegisterId] }
        ]);
    }
    create(value?: PartialMessage<MvmInstruction_ApplyMarkerRegisterToMyTribe>): MvmInstruction_ApplyMarkerRegisterToMyTribe {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.markerRegisterId = 0;
        if (value !== undefined)
            reflectionMergePartial<MvmInstruction_ApplyMarkerRegisterToMyTribe>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MvmInstruction_ApplyMarkerRegisterToMyTribe): MvmInstruction_ApplyMarkerRegisterToMyTribe {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* MvmRegisterId markerRegisterId */ 1:
                    message.markerRegisterId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MvmInstruction_ApplyMarkerRegisterToMyTribe, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* MvmRegisterId markerRegisterId = 1; */
        if (message.markerRegisterId !== 0)
            writer.tag(1, WireType.Varint).int32(message.markerRegisterId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MvmInstruction_ApplyMarkerRegisterToMyTribe
 */
export const MvmInstruction_ApplyMarkerRegisterToMyTribe = new MvmInstruction_ApplyMarkerRegisterToMyTribe$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MvmInstruction_ApplyMarkerRegisterToClan_ForClanCoordinateRegister$Type extends MessageType<MvmInstruction_ApplyMarkerRegisterToClan_ForClanCoordinateRegister> {
    constructor() {
        super("MvmInstruction_ApplyMarkerRegisterToClan_ForClanCoordinateRegister", [
            { no: 1, name: "markerRegisterId", kind: "enum", T: () => ["MvmRegisterId", MvmRegisterId] },
            { no: 2, name: "clanCoordinateRegisterId", kind: "enum", T: () => ["MvmRegisterId", MvmRegisterId] }
        ]);
    }
    create(value?: PartialMessage<MvmInstruction_ApplyMarkerRegisterToClan_ForClanCoordinateRegister>): MvmInstruction_ApplyMarkerRegisterToClan_ForClanCoordinateRegister {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.markerRegisterId = 0;
        message.clanCoordinateRegisterId = 0;
        if (value !== undefined)
            reflectionMergePartial<MvmInstruction_ApplyMarkerRegisterToClan_ForClanCoordinateRegister>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MvmInstruction_ApplyMarkerRegisterToClan_ForClanCoordinateRegister): MvmInstruction_ApplyMarkerRegisterToClan_ForClanCoordinateRegister {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* MvmRegisterId markerRegisterId */ 1:
                    message.markerRegisterId = reader.int32();
                    break;
                case /* MvmRegisterId clanCoordinateRegisterId */ 2:
                    message.clanCoordinateRegisterId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MvmInstruction_ApplyMarkerRegisterToClan_ForClanCoordinateRegister, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* MvmRegisterId markerRegisterId = 1; */
        if (message.markerRegisterId !== 0)
            writer.tag(1, WireType.Varint).int32(message.markerRegisterId);
        /* MvmRegisterId clanCoordinateRegisterId = 2; */
        if (message.clanCoordinateRegisterId !== 0)
            writer.tag(2, WireType.Varint).int32(message.clanCoordinateRegisterId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MvmInstruction_ApplyMarkerRegisterToClan_ForClanCoordinateRegister
 */
export const MvmInstruction_ApplyMarkerRegisterToClan_ForClanCoordinateRegister = new MvmInstruction_ApplyMarkerRegisterToClan_ForClanCoordinateRegister$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MvmInstruction_ApplyMarkerRegisterToAdjacentClans_ForClanCoordinateRegister$Type extends MessageType<MvmInstruction_ApplyMarkerRegisterToAdjacentClans_ForClanCoordinateRegister> {
    constructor() {
        super("MvmInstruction_ApplyMarkerRegisterToAdjacentClans_ForClanCoordinateRegister", [
            { no: 1, name: "markerRegisterId", kind: "enum", T: () => ["MvmRegisterId", MvmRegisterId] },
            { no: 2, name: "clanCoordinateRegisterId", kind: "enum", T: () => ["MvmRegisterId", MvmRegisterId] }
        ]);
    }
    create(value?: PartialMessage<MvmInstruction_ApplyMarkerRegisterToAdjacentClans_ForClanCoordinateRegister>): MvmInstruction_ApplyMarkerRegisterToAdjacentClans_ForClanCoordinateRegister {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.markerRegisterId = 0;
        message.clanCoordinateRegisterId = 0;
        if (value !== undefined)
            reflectionMergePartial<MvmInstruction_ApplyMarkerRegisterToAdjacentClans_ForClanCoordinateRegister>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MvmInstruction_ApplyMarkerRegisterToAdjacentClans_ForClanCoordinateRegister): MvmInstruction_ApplyMarkerRegisterToAdjacentClans_ForClanCoordinateRegister {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* MvmRegisterId markerRegisterId */ 1:
                    message.markerRegisterId = reader.int32();
                    break;
                case /* MvmRegisterId clanCoordinateRegisterId */ 2:
                    message.clanCoordinateRegisterId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MvmInstruction_ApplyMarkerRegisterToAdjacentClans_ForClanCoordinateRegister, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* MvmRegisterId markerRegisterId = 1; */
        if (message.markerRegisterId !== 0)
            writer.tag(1, WireType.Varint).int32(message.markerRegisterId);
        /* MvmRegisterId clanCoordinateRegisterId = 2; */
        if (message.clanCoordinateRegisterId !== 0)
            writer.tag(2, WireType.Varint).int32(message.clanCoordinateRegisterId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MvmInstruction_ApplyMarkerRegisterToAdjacentClans_ForClanCoordinateRegister
 */
export const MvmInstruction_ApplyMarkerRegisterToAdjacentClans_ForClanCoordinateRegister = new MvmInstruction_ApplyMarkerRegisterToAdjacentClans_ForClanCoordinateRegister$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MvmInstruction_ApplyMarkerRegisterToAdjacentFamilies_ForFamilyCoordinateRegister$Type extends MessageType<MvmInstruction_ApplyMarkerRegisterToAdjacentFamilies_ForFamilyCoordinateRegister> {
    constructor() {
        super("MvmInstruction_ApplyMarkerRegisterToAdjacentFamilies_ForFamilyCoordinateRegister", [
            { no: 1, name: "markerRegisterId", kind: "enum", T: () => ["MvmRegisterId", MvmRegisterId] },
            { no: 2, name: "familyCoordinateRegisterId", kind: "enum", T: () => ["MvmRegisterId", MvmRegisterId] }
        ]);
    }
    create(value?: PartialMessage<MvmInstruction_ApplyMarkerRegisterToAdjacentFamilies_ForFamilyCoordinateRegister>): MvmInstruction_ApplyMarkerRegisterToAdjacentFamilies_ForFamilyCoordinateRegister {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.markerRegisterId = 0;
        message.familyCoordinateRegisterId = 0;
        if (value !== undefined)
            reflectionMergePartial<MvmInstruction_ApplyMarkerRegisterToAdjacentFamilies_ForFamilyCoordinateRegister>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MvmInstruction_ApplyMarkerRegisterToAdjacentFamilies_ForFamilyCoordinateRegister): MvmInstruction_ApplyMarkerRegisterToAdjacentFamilies_ForFamilyCoordinateRegister {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* MvmRegisterId markerRegisterId */ 1:
                    message.markerRegisterId = reader.int32();
                    break;
                case /* MvmRegisterId familyCoordinateRegisterId */ 2:
                    message.familyCoordinateRegisterId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MvmInstruction_ApplyMarkerRegisterToAdjacentFamilies_ForFamilyCoordinateRegister, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* MvmRegisterId markerRegisterId = 1; */
        if (message.markerRegisterId !== 0)
            writer.tag(1, WireType.Varint).int32(message.markerRegisterId);
        /* MvmRegisterId familyCoordinateRegisterId = 2; */
        if (message.familyCoordinateRegisterId !== 0)
            writer.tag(2, WireType.Varint).int32(message.familyCoordinateRegisterId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MvmInstruction_ApplyMarkerRegisterToAdjacentFamilies_ForFamilyCoordinateRegister
 */
export const MvmInstruction_ApplyMarkerRegisterToAdjacentFamilies_ForFamilyCoordinateRegister = new MvmInstruction_ApplyMarkerRegisterToAdjacentFamilies_ForFamilyCoordinateRegister$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MvmInstruction_SetRegisterData_ToMyPlayerSide$Type extends MessageType<MvmInstruction_SetRegisterData_ToMyPlayerSide> {
    constructor() {
        super("MvmInstruction_SetRegisterData_ToMyPlayerSide", [
            { no: 1, name: "playerSideRegisterId", kind: "enum", T: () => ["MvmRegisterId", MvmRegisterId] }
        ]);
    }
    create(value?: PartialMessage<MvmInstruction_SetRegisterData_ToMyPlayerSide>): MvmInstruction_SetRegisterData_ToMyPlayerSide {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.playerSideRegisterId = 0;
        if (value !== undefined)
            reflectionMergePartial<MvmInstruction_SetRegisterData_ToMyPlayerSide>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MvmInstruction_SetRegisterData_ToMyPlayerSide): MvmInstruction_SetRegisterData_ToMyPlayerSide {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* MvmRegisterId playerSideRegisterId */ 1:
                    message.playerSideRegisterId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MvmInstruction_SetRegisterData_ToMyPlayerSide, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* MvmRegisterId playerSideRegisterId = 1; */
        if (message.playerSideRegisterId !== 0)
            writer.tag(1, WireType.Varint).int32(message.playerSideRegisterId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MvmInstruction_SetRegisterData_ToMyPlayerSide
 */
export const MvmInstruction_SetRegisterData_ToMyPlayerSide = new MvmInstruction_SetRegisterData_ToMyPlayerSide$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MvmInstruction_SetRegisterData_ToMyClanCoordinate$Type extends MessageType<MvmInstruction_SetRegisterData_ToMyClanCoordinate> {
    constructor() {
        super("MvmInstruction_SetRegisterData_ToMyClanCoordinate", [
            { no: 1, name: "clanCoordinateRegisterId", kind: "enum", T: () => ["MvmRegisterId", MvmRegisterId] }
        ]);
    }
    create(value?: PartialMessage<MvmInstruction_SetRegisterData_ToMyClanCoordinate>): MvmInstruction_SetRegisterData_ToMyClanCoordinate {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.clanCoordinateRegisterId = 0;
        if (value !== undefined)
            reflectionMergePartial<MvmInstruction_SetRegisterData_ToMyClanCoordinate>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MvmInstruction_SetRegisterData_ToMyClanCoordinate): MvmInstruction_SetRegisterData_ToMyClanCoordinate {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* MvmRegisterId clanCoordinateRegisterId */ 1:
                    message.clanCoordinateRegisterId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MvmInstruction_SetRegisterData_ToMyClanCoordinate, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* MvmRegisterId clanCoordinateRegisterId = 1; */
        if (message.clanCoordinateRegisterId !== 0)
            writer.tag(1, WireType.Varint).int32(message.clanCoordinateRegisterId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MvmInstruction_SetRegisterData_ToMyClanCoordinate
 */
export const MvmInstruction_SetRegisterData_ToMyClanCoordinate = new MvmInstruction_SetRegisterData_ToMyClanCoordinate$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MvmInstruction_SetRegisterData_ToMyFamilyCoordinate$Type extends MessageType<MvmInstruction_SetRegisterData_ToMyFamilyCoordinate> {
    constructor() {
        super("MvmInstruction_SetRegisterData_ToMyFamilyCoordinate", [
            { no: 1, name: "familyCoordinateRegisterId", kind: "enum", T: () => ["MvmRegisterId", MvmRegisterId] }
        ]);
    }
    create(value?: PartialMessage<MvmInstruction_SetRegisterData_ToMyFamilyCoordinate>): MvmInstruction_SetRegisterData_ToMyFamilyCoordinate {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.familyCoordinateRegisterId = 0;
        if (value !== undefined)
            reflectionMergePartial<MvmInstruction_SetRegisterData_ToMyFamilyCoordinate>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MvmInstruction_SetRegisterData_ToMyFamilyCoordinate): MvmInstruction_SetRegisterData_ToMyFamilyCoordinate {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* MvmRegisterId familyCoordinateRegisterId */ 1:
                    message.familyCoordinateRegisterId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MvmInstruction_SetRegisterData_ToMyFamilyCoordinate, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* MvmRegisterId familyCoordinateRegisterId = 1; */
        if (message.familyCoordinateRegisterId !== 0)
            writer.tag(1, WireType.Varint).int32(message.familyCoordinateRegisterId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MvmInstruction_SetRegisterData_ToMyFamilyCoordinate
 */
export const MvmInstruction_SetRegisterData_ToMyFamilyCoordinate = new MvmInstruction_SetRegisterData_ToMyFamilyCoordinate$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MvmAtomicInstruction$Type extends MessageType<MvmAtomicInstruction> {
    constructor() {
        super("MvmAtomicInstruction", [
            { no: 1, name: "setMarkerRegister", kind: "message", oneof: "instruction", T: () => MvmInstruction_SetMarkerRegister_ToMarkerTypeAndQuantity },
            { no: 2, name: "setMarkerRegisterAmountToRegisterAmount", kind: "message", oneof: "instruction", T: () => MvmInstruction_SetMarkerRegisterAmount_ToRegisterAmount },
            { no: 3, name: "setMarkerRegisterAmountToMvmAmountQueryOutput", kind: "message", oneof: "instruction", T: () => MvmInstruction_SetMarkerRegisterAmount_ToMvmAmountQueryOutput },
            { no: 4, name: "adjustMarkerRegisterAmountByAmount", kind: "message", oneof: "instruction", T: () => MvmInstruction_AdjustMarkerRegisterAmount_ByAmount },
            { no: 5, name: "adjustMarkerRegisterAmountByRegisterAmount", kind: "message", oneof: "instruction", T: () => MvmInstruction_AdjustMarkerRegisterAmount_ByRegisterAmount },
            { no: 6, name: "adjustMarkerRegisterAmountByMvmAmountQueryOutput", kind: "message", oneof: "instruction", T: () => MvmInstruction_AdjustMarkerRegisterAmount_ByMvmAmountQueryOutput },
            { no: 10, name: "setAmountRegisterValueToMvmAmountQueryOutput", kind: "message", oneof: "instruction", T: () => MvmInstruction_SetAmountRegisterValue_ToMvmAmountQueryOutput },
            { no: 20, name: "applyMarkerRegisterToMyTribe", kind: "message", oneof: "instruction", T: () => MvmInstruction_ApplyMarkerRegisterToMyTribe },
            { no: 21, name: "applyMarkerRegisterToClanForClanCoordinateRegister", kind: "message", oneof: "instruction", T: () => MvmInstruction_ApplyMarkerRegisterToClan_ForClanCoordinateRegister },
            { no: 22, name: "applyMarkerRegisterToAdjacentClansForClanCoordinateRegister", kind: "message", oneof: "instruction", T: () => MvmInstruction_ApplyMarkerRegisterToAdjacentClans_ForClanCoordinateRegister },
            { no: 23, name: "applyMarkerRegisterToAdjacentFamiliesForFamilyCoordinateRegister", kind: "message", oneof: "instruction", T: () => MvmInstruction_ApplyMarkerRegisterToAdjacentFamilies_ForFamilyCoordinateRegister },
            { no: 30, name: "setRegisterDataToMyPlayerSide", kind: "message", oneof: "instruction", T: () => MvmInstruction_SetRegisterData_ToMyPlayerSide },
            { no: 31, name: "setRegisterDataToMyClanCoordinate", kind: "message", oneof: "instruction", T: () => MvmInstruction_SetRegisterData_ToMyClanCoordinate },
            { no: 32, name: "setRegisterDataToMyFamilyCoordinate", kind: "message", oneof: "instruction", T: () => MvmInstruction_SetRegisterData_ToMyFamilyCoordinate }
        ]);
    }
    create(value?: PartialMessage<MvmAtomicInstruction>): MvmAtomicInstruction {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.instruction = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<MvmAtomicInstruction>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MvmAtomicInstruction): MvmAtomicInstruction {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* MvmInstruction_SetMarkerRegister_ToMarkerTypeAndQuantity setMarkerRegister */ 1:
                    message.instruction = {
                        oneofKind: "setMarkerRegister",
                        setMarkerRegister: MvmInstruction_SetMarkerRegister_ToMarkerTypeAndQuantity.internalBinaryRead(reader, reader.uint32(), options, (message.instruction as any).setMarkerRegister)
                    };
                    break;
                case /* MvmInstruction_SetMarkerRegisterAmount_ToRegisterAmount setMarkerRegisterAmountToRegisterAmount */ 2:
                    message.instruction = {
                        oneofKind: "setMarkerRegisterAmountToRegisterAmount",
                        setMarkerRegisterAmountToRegisterAmount: MvmInstruction_SetMarkerRegisterAmount_ToRegisterAmount.internalBinaryRead(reader, reader.uint32(), options, (message.instruction as any).setMarkerRegisterAmountToRegisterAmount)
                    };
                    break;
                case /* MvmInstruction_SetMarkerRegisterAmount_ToMvmAmountQueryOutput setMarkerRegisterAmountToMvmAmountQueryOutput */ 3:
                    message.instruction = {
                        oneofKind: "setMarkerRegisterAmountToMvmAmountQueryOutput",
                        setMarkerRegisterAmountToMvmAmountQueryOutput: MvmInstruction_SetMarkerRegisterAmount_ToMvmAmountQueryOutput.internalBinaryRead(reader, reader.uint32(), options, (message.instruction as any).setMarkerRegisterAmountToMvmAmountQueryOutput)
                    };
                    break;
                case /* MvmInstruction_AdjustMarkerRegisterAmount_ByAmount adjustMarkerRegisterAmountByAmount */ 4:
                    message.instruction = {
                        oneofKind: "adjustMarkerRegisterAmountByAmount",
                        adjustMarkerRegisterAmountByAmount: MvmInstruction_AdjustMarkerRegisterAmount_ByAmount.internalBinaryRead(reader, reader.uint32(), options, (message.instruction as any).adjustMarkerRegisterAmountByAmount)
                    };
                    break;
                case /* MvmInstruction_AdjustMarkerRegisterAmount_ByRegisterAmount adjustMarkerRegisterAmountByRegisterAmount */ 5:
                    message.instruction = {
                        oneofKind: "adjustMarkerRegisterAmountByRegisterAmount",
                        adjustMarkerRegisterAmountByRegisterAmount: MvmInstruction_AdjustMarkerRegisterAmount_ByRegisterAmount.internalBinaryRead(reader, reader.uint32(), options, (message.instruction as any).adjustMarkerRegisterAmountByRegisterAmount)
                    };
                    break;
                case /* MvmInstruction_AdjustMarkerRegisterAmount_ByMvmAmountQueryOutput adjustMarkerRegisterAmountByMvmAmountQueryOutput */ 6:
                    message.instruction = {
                        oneofKind: "adjustMarkerRegisterAmountByMvmAmountQueryOutput",
                        adjustMarkerRegisterAmountByMvmAmountQueryOutput: MvmInstruction_AdjustMarkerRegisterAmount_ByMvmAmountQueryOutput.internalBinaryRead(reader, reader.uint32(), options, (message.instruction as any).adjustMarkerRegisterAmountByMvmAmountQueryOutput)
                    };
                    break;
                case /* MvmInstruction_SetAmountRegisterValue_ToMvmAmountQueryOutput setAmountRegisterValueToMvmAmountQueryOutput */ 10:
                    message.instruction = {
                        oneofKind: "setAmountRegisterValueToMvmAmountQueryOutput",
                        setAmountRegisterValueToMvmAmountQueryOutput: MvmInstruction_SetAmountRegisterValue_ToMvmAmountQueryOutput.internalBinaryRead(reader, reader.uint32(), options, (message.instruction as any).setAmountRegisterValueToMvmAmountQueryOutput)
                    };
                    break;
                case /* MvmInstruction_ApplyMarkerRegisterToMyTribe applyMarkerRegisterToMyTribe */ 20:
                    message.instruction = {
                        oneofKind: "applyMarkerRegisterToMyTribe",
                        applyMarkerRegisterToMyTribe: MvmInstruction_ApplyMarkerRegisterToMyTribe.internalBinaryRead(reader, reader.uint32(), options, (message.instruction as any).applyMarkerRegisterToMyTribe)
                    };
                    break;
                case /* MvmInstruction_ApplyMarkerRegisterToClan_ForClanCoordinateRegister applyMarkerRegisterToClanForClanCoordinateRegister */ 21:
                    message.instruction = {
                        oneofKind: "applyMarkerRegisterToClanForClanCoordinateRegister",
                        applyMarkerRegisterToClanForClanCoordinateRegister: MvmInstruction_ApplyMarkerRegisterToClan_ForClanCoordinateRegister.internalBinaryRead(reader, reader.uint32(), options, (message.instruction as any).applyMarkerRegisterToClanForClanCoordinateRegister)
                    };
                    break;
                case /* MvmInstruction_ApplyMarkerRegisterToAdjacentClans_ForClanCoordinateRegister applyMarkerRegisterToAdjacentClansForClanCoordinateRegister */ 22:
                    message.instruction = {
                        oneofKind: "applyMarkerRegisterToAdjacentClansForClanCoordinateRegister",
                        applyMarkerRegisterToAdjacentClansForClanCoordinateRegister: MvmInstruction_ApplyMarkerRegisterToAdjacentClans_ForClanCoordinateRegister.internalBinaryRead(reader, reader.uint32(), options, (message.instruction as any).applyMarkerRegisterToAdjacentClansForClanCoordinateRegister)
                    };
                    break;
                case /* MvmInstruction_ApplyMarkerRegisterToAdjacentFamilies_ForFamilyCoordinateRegister applyMarkerRegisterToAdjacentFamiliesForFamilyCoordinateRegister */ 23:
                    message.instruction = {
                        oneofKind: "applyMarkerRegisterToAdjacentFamiliesForFamilyCoordinateRegister",
                        applyMarkerRegisterToAdjacentFamiliesForFamilyCoordinateRegister: MvmInstruction_ApplyMarkerRegisterToAdjacentFamilies_ForFamilyCoordinateRegister.internalBinaryRead(reader, reader.uint32(), options, (message.instruction as any).applyMarkerRegisterToAdjacentFamiliesForFamilyCoordinateRegister)
                    };
                    break;
                case /* MvmInstruction_SetRegisterData_ToMyPlayerSide setRegisterDataToMyPlayerSide */ 30:
                    message.instruction = {
                        oneofKind: "setRegisterDataToMyPlayerSide",
                        setRegisterDataToMyPlayerSide: MvmInstruction_SetRegisterData_ToMyPlayerSide.internalBinaryRead(reader, reader.uint32(), options, (message.instruction as any).setRegisterDataToMyPlayerSide)
                    };
                    break;
                case /* MvmInstruction_SetRegisterData_ToMyClanCoordinate setRegisterDataToMyClanCoordinate */ 31:
                    message.instruction = {
                        oneofKind: "setRegisterDataToMyClanCoordinate",
                        setRegisterDataToMyClanCoordinate: MvmInstruction_SetRegisterData_ToMyClanCoordinate.internalBinaryRead(reader, reader.uint32(), options, (message.instruction as any).setRegisterDataToMyClanCoordinate)
                    };
                    break;
                case /* MvmInstruction_SetRegisterData_ToMyFamilyCoordinate setRegisterDataToMyFamilyCoordinate */ 32:
                    message.instruction = {
                        oneofKind: "setRegisterDataToMyFamilyCoordinate",
                        setRegisterDataToMyFamilyCoordinate: MvmInstruction_SetRegisterData_ToMyFamilyCoordinate.internalBinaryRead(reader, reader.uint32(), options, (message.instruction as any).setRegisterDataToMyFamilyCoordinate)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MvmAtomicInstruction, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* MvmInstruction_SetMarkerRegister_ToMarkerTypeAndQuantity setMarkerRegister = 1; */
        if (message.instruction.oneofKind === "setMarkerRegister")
            MvmInstruction_SetMarkerRegister_ToMarkerTypeAndQuantity.internalBinaryWrite(message.instruction.setMarkerRegister, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* MvmInstruction_SetMarkerRegisterAmount_ToRegisterAmount setMarkerRegisterAmountToRegisterAmount = 2; */
        if (message.instruction.oneofKind === "setMarkerRegisterAmountToRegisterAmount")
            MvmInstruction_SetMarkerRegisterAmount_ToRegisterAmount.internalBinaryWrite(message.instruction.setMarkerRegisterAmountToRegisterAmount, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* MvmInstruction_SetMarkerRegisterAmount_ToMvmAmountQueryOutput setMarkerRegisterAmountToMvmAmountQueryOutput = 3; */
        if (message.instruction.oneofKind === "setMarkerRegisterAmountToMvmAmountQueryOutput")
            MvmInstruction_SetMarkerRegisterAmount_ToMvmAmountQueryOutput.internalBinaryWrite(message.instruction.setMarkerRegisterAmountToMvmAmountQueryOutput, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* MvmInstruction_AdjustMarkerRegisterAmount_ByAmount adjustMarkerRegisterAmountByAmount = 4; */
        if (message.instruction.oneofKind === "adjustMarkerRegisterAmountByAmount")
            MvmInstruction_AdjustMarkerRegisterAmount_ByAmount.internalBinaryWrite(message.instruction.adjustMarkerRegisterAmountByAmount, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* MvmInstruction_AdjustMarkerRegisterAmount_ByRegisterAmount adjustMarkerRegisterAmountByRegisterAmount = 5; */
        if (message.instruction.oneofKind === "adjustMarkerRegisterAmountByRegisterAmount")
            MvmInstruction_AdjustMarkerRegisterAmount_ByRegisterAmount.internalBinaryWrite(message.instruction.adjustMarkerRegisterAmountByRegisterAmount, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* MvmInstruction_AdjustMarkerRegisterAmount_ByMvmAmountQueryOutput adjustMarkerRegisterAmountByMvmAmountQueryOutput = 6; */
        if (message.instruction.oneofKind === "adjustMarkerRegisterAmountByMvmAmountQueryOutput")
            MvmInstruction_AdjustMarkerRegisterAmount_ByMvmAmountQueryOutput.internalBinaryWrite(message.instruction.adjustMarkerRegisterAmountByMvmAmountQueryOutput, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* MvmInstruction_SetAmountRegisterValue_ToMvmAmountQueryOutput setAmountRegisterValueToMvmAmountQueryOutput = 10; */
        if (message.instruction.oneofKind === "setAmountRegisterValueToMvmAmountQueryOutput")
            MvmInstruction_SetAmountRegisterValue_ToMvmAmountQueryOutput.internalBinaryWrite(message.instruction.setAmountRegisterValueToMvmAmountQueryOutput, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* MvmInstruction_ApplyMarkerRegisterToMyTribe applyMarkerRegisterToMyTribe = 20; */
        if (message.instruction.oneofKind === "applyMarkerRegisterToMyTribe")
            MvmInstruction_ApplyMarkerRegisterToMyTribe.internalBinaryWrite(message.instruction.applyMarkerRegisterToMyTribe, writer.tag(20, WireType.LengthDelimited).fork(), options).join();
        /* MvmInstruction_ApplyMarkerRegisterToClan_ForClanCoordinateRegister applyMarkerRegisterToClanForClanCoordinateRegister = 21; */
        if (message.instruction.oneofKind === "applyMarkerRegisterToClanForClanCoordinateRegister")
            MvmInstruction_ApplyMarkerRegisterToClan_ForClanCoordinateRegister.internalBinaryWrite(message.instruction.applyMarkerRegisterToClanForClanCoordinateRegister, writer.tag(21, WireType.LengthDelimited).fork(), options).join();
        /* MvmInstruction_ApplyMarkerRegisterToAdjacentClans_ForClanCoordinateRegister applyMarkerRegisterToAdjacentClansForClanCoordinateRegister = 22; */
        if (message.instruction.oneofKind === "applyMarkerRegisterToAdjacentClansForClanCoordinateRegister")
            MvmInstruction_ApplyMarkerRegisterToAdjacentClans_ForClanCoordinateRegister.internalBinaryWrite(message.instruction.applyMarkerRegisterToAdjacentClansForClanCoordinateRegister, writer.tag(22, WireType.LengthDelimited).fork(), options).join();
        /* MvmInstruction_ApplyMarkerRegisterToAdjacentFamilies_ForFamilyCoordinateRegister applyMarkerRegisterToAdjacentFamiliesForFamilyCoordinateRegister = 23; */
        if (message.instruction.oneofKind === "applyMarkerRegisterToAdjacentFamiliesForFamilyCoordinateRegister")
            MvmInstruction_ApplyMarkerRegisterToAdjacentFamilies_ForFamilyCoordinateRegister.internalBinaryWrite(message.instruction.applyMarkerRegisterToAdjacentFamiliesForFamilyCoordinateRegister, writer.tag(23, WireType.LengthDelimited).fork(), options).join();
        /* MvmInstruction_SetRegisterData_ToMyPlayerSide setRegisterDataToMyPlayerSide = 30; */
        if (message.instruction.oneofKind === "setRegisterDataToMyPlayerSide")
            MvmInstruction_SetRegisterData_ToMyPlayerSide.internalBinaryWrite(message.instruction.setRegisterDataToMyPlayerSide, writer.tag(30, WireType.LengthDelimited).fork(), options).join();
        /* MvmInstruction_SetRegisterData_ToMyClanCoordinate setRegisterDataToMyClanCoordinate = 31; */
        if (message.instruction.oneofKind === "setRegisterDataToMyClanCoordinate")
            MvmInstruction_SetRegisterData_ToMyClanCoordinate.internalBinaryWrite(message.instruction.setRegisterDataToMyClanCoordinate, writer.tag(31, WireType.LengthDelimited).fork(), options).join();
        /* MvmInstruction_SetRegisterData_ToMyFamilyCoordinate setRegisterDataToMyFamilyCoordinate = 32; */
        if (message.instruction.oneofKind === "setRegisterDataToMyFamilyCoordinate")
            MvmInstruction_SetRegisterData_ToMyFamilyCoordinate.internalBinaryWrite(message.instruction.setRegisterDataToMyFamilyCoordinate, writer.tag(32, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MvmAtomicInstruction
 */
export const MvmAtomicInstruction = new MvmAtomicInstruction$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MvmInstruction_Conditional_RunAtomicInstructions$Type extends MessageType<MvmInstruction_Conditional_RunAtomicInstructions> {
    constructor() {
        super("MvmInstruction_Conditional_RunAtomicInstructions", [
            { no: 1, name: "mvmBoolQueryFunctionId", kind: "enum", T: () => ["MvmBoolQueryFunctionId", MvmBoolQueryFunctionId] },
            { no: 2, name: "onTrueInstructions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MvmAtomicInstruction },
            { no: 3, name: "onFalseInstructions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MvmAtomicInstruction }
        ]);
    }
    create(value?: PartialMessage<MvmInstruction_Conditional_RunAtomicInstructions>): MvmInstruction_Conditional_RunAtomicInstructions {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.mvmBoolQueryFunctionId = 0;
        message.onTrueInstructions = [];
        message.onFalseInstructions = [];
        if (value !== undefined)
            reflectionMergePartial<MvmInstruction_Conditional_RunAtomicInstructions>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MvmInstruction_Conditional_RunAtomicInstructions): MvmInstruction_Conditional_RunAtomicInstructions {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* MvmBoolQueryFunctionId mvmBoolQueryFunctionId */ 1:
                    message.mvmBoolQueryFunctionId = reader.int32();
                    break;
                case /* repeated MvmAtomicInstruction onTrueInstructions */ 2:
                    message.onTrueInstructions.push(MvmAtomicInstruction.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated MvmAtomicInstruction onFalseInstructions */ 3:
                    message.onFalseInstructions.push(MvmAtomicInstruction.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MvmInstruction_Conditional_RunAtomicInstructions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* MvmBoolQueryFunctionId mvmBoolQueryFunctionId = 1; */
        if (message.mvmBoolQueryFunctionId !== 0)
            writer.tag(1, WireType.Varint).int32(message.mvmBoolQueryFunctionId);
        /* repeated MvmAtomicInstruction onTrueInstructions = 2; */
        for (let i = 0; i < message.onTrueInstructions.length; i++)
            MvmAtomicInstruction.internalBinaryWrite(message.onTrueInstructions[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated MvmAtomicInstruction onFalseInstructions = 3; */
        for (let i = 0; i < message.onFalseInstructions.length; i++)
            MvmAtomicInstruction.internalBinaryWrite(message.onFalseInstructions[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MvmInstruction_Conditional_RunAtomicInstructions
 */
export const MvmInstruction_Conditional_RunAtomicInstructions = new MvmInstruction_Conditional_RunAtomicInstructions$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ManawaveVmInstruction$Type extends MessageType<ManawaveVmInstruction> {
    constructor() {
        super("ManawaveVmInstruction", [
            { no: 1, name: "atomicInstruction", kind: "message", oneof: "instruction", T: () => MvmAtomicInstruction },
            { no: 10, name: "conditionalRunAtomicInstructions", kind: "message", oneof: "instruction", T: () => MvmInstruction_Conditional_RunAtomicInstructions },
            { no: 255, name: "deferToOnManaflowProcImpl", kind: "message", oneof: "instruction", T: () => MvmInstruction_DeferToOnManaflowProcImpl }
        ]);
    }
    create(value?: PartialMessage<ManawaveVmInstruction>): ManawaveVmInstruction {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.instruction = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<ManawaveVmInstruction>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ManawaveVmInstruction): ManawaveVmInstruction {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* MvmAtomicInstruction atomicInstruction */ 1:
                    message.instruction = {
                        oneofKind: "atomicInstruction",
                        atomicInstruction: MvmAtomicInstruction.internalBinaryRead(reader, reader.uint32(), options, (message.instruction as any).atomicInstruction)
                    };
                    break;
                case /* MvmInstruction_Conditional_RunAtomicInstructions conditionalRunAtomicInstructions */ 10:
                    message.instruction = {
                        oneofKind: "conditionalRunAtomicInstructions",
                        conditionalRunAtomicInstructions: MvmInstruction_Conditional_RunAtomicInstructions.internalBinaryRead(reader, reader.uint32(), options, (message.instruction as any).conditionalRunAtomicInstructions)
                    };
                    break;
                case /* MvmInstruction_DeferToOnManaflowProcImpl deferToOnManaflowProcImpl */ 255:
                    message.instruction = {
                        oneofKind: "deferToOnManaflowProcImpl",
                        deferToOnManaflowProcImpl: MvmInstruction_DeferToOnManaflowProcImpl.internalBinaryRead(reader, reader.uint32(), options, (message.instruction as any).deferToOnManaflowProcImpl)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ManawaveVmInstruction, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* MvmAtomicInstruction atomicInstruction = 1; */
        if (message.instruction.oneofKind === "atomicInstruction")
            MvmAtomicInstruction.internalBinaryWrite(message.instruction.atomicInstruction, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* MvmInstruction_Conditional_RunAtomicInstructions conditionalRunAtomicInstructions = 10; */
        if (message.instruction.oneofKind === "conditionalRunAtomicInstructions")
            MvmInstruction_Conditional_RunAtomicInstructions.internalBinaryWrite(message.instruction.conditionalRunAtomicInstructions, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* MvmInstruction_DeferToOnManaflowProcImpl deferToOnManaflowProcImpl = 255; */
        if (message.instruction.oneofKind === "deferToOnManaflowProcImpl")
            MvmInstruction_DeferToOnManaflowProcImpl.internalBinaryWrite(message.instruction.deferToOnManaflowProcImpl, writer.tag(255, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ManawaveVmInstruction
 */
export const ManawaveVmInstruction = new ManawaveVmInstruction$Type();
